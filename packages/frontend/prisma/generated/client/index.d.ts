
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model LoginAttempt
 * 
 */
export type LoginAttempt = $Result.DefaultSelection<Prisma.$LoginAttemptPayload>
/**
 * Model Season
 * 
 */
export type Season = $Result.DefaultSelection<Prisma.$SeasonPayload>
/**
 * Model Week
 * 
 */
export type Week = $Result.DefaultSelection<Prisma.$WeekPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model Pick
 * 
 */
export type Pick = $Result.DefaultSelection<Prisma.$PickPayload>
/**
 * Model WeeklyResult
 * 
 */
export type WeeklyResult = $Result.DefaultSelection<Prisma.$WeeklyResultPayload>
/**
 * Model League
 * 
 */
export type League = $Result.DefaultSelection<Prisma.$LeaguePayload>
/**
 * Model UserLeague
 * 
 */
export type UserLeague = $Result.DefaultSelection<Prisma.$UserLeaguePayload>
/**
 * Model LeagueMessage
 * 
 */
export type LeagueMessage = $Result.DefaultSelection<Prisma.$LeagueMessagePayload>
/**
 * Model Achievement
 * 
 */
export type Achievement = $Result.DefaultSelection<Prisma.$AchievementPayload>
/**
 * Model UserAchievement
 * 
 */
export type UserAchievement = $Result.DefaultSelection<Prisma.$UserAchievementPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model RssFeedLog
 * 
 */
export type RssFeedLog = $Result.DefaultSelection<Prisma.$RssFeedLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const WeekType: {
  PRESEASON: 'PRESEASON',
  REGULAR: 'REGULAR',
  WILDCARD: 'WILDCARD',
  DIVISIONAL: 'DIVISIONAL',
  CONFERENCE: 'CONFERENCE',
  SUPERBOWL: 'SUPERBOWL',
  PROBOWL: 'PROBOWL'
};

export type WeekType = (typeof WeekType)[keyof typeof WeekType]


export const Conference: {
  AFC: 'AFC',
  NFC: 'NFC'
};

export type Conference = (typeof Conference)[keyof typeof Conference]


export const Division: {
  NORTH: 'NORTH',
  SOUTH: 'SOUTH',
  EAST: 'EAST',
  WEST: 'WEST'
};

export type Division = (typeof Division)[keyof typeof Division]


export const GameStatus: {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  HALFTIME: 'HALFTIME',
  FINAL: 'FINAL',
  FINAL_OT: 'FINAL_OT',
  POSTPONED: 'POSTPONED',
  CANCELLED: 'CANCELLED'
};

export type GameStatus = (typeof GameStatus)[keyof typeof GameStatus]


export const ScoringSystem: {
  STANDARD: 'STANDARD',
  CONFIDENCE: 'CONFIDENCE',
  SPREAD: 'SPREAD'
};

export type ScoringSystem = (typeof ScoringSystem)[keyof typeof ScoringSystem]


export const LeagueRole: {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  MEMBER: 'MEMBER'
};

export type LeagueRole = (typeof LeagueRole)[keyof typeof LeagueRole]


export const MemberStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BANNED: 'BANNED'
};

export type MemberStatus = (typeof MemberStatus)[keyof typeof MemberStatus]


export const AchievementCategory: {
  ACCURACY: 'ACCURACY',
  STREAK: 'STREAK',
  PARTICIPATION: 'PARTICIPATION',
  PERFECT: 'PERFECT',
  MILESTONE: 'MILESTONE',
  SPECIAL: 'SPECIAL',
  SOCIAL: 'SOCIAL'
};

export type AchievementCategory = (typeof AchievementCategory)[keyof typeof AchievementCategory]


export const Rarity: {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

export type Rarity = (typeof Rarity)[keyof typeof Rarity]


export const NotificationType: {
  PICK_REMINDER: 'PICK_REMINDER',
  ACHIEVEMENT_UNLOCKED: 'ACHIEVEMENT_UNLOCKED',
  LEAGUE_INVITE: 'LEAGUE_INVITE',
  LEAGUE_MESSAGE: 'LEAGUE_MESSAGE',
  WEEK_RESULTS: 'WEEK_RESULTS',
  GAME_UPDATE: 'GAME_UPDATE',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const Priority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type Priority = (typeof Priority)[keyof typeof Priority]

}

export type WeekType = $Enums.WeekType

export const WeekType: typeof $Enums.WeekType

export type Conference = $Enums.Conference

export const Conference: typeof $Enums.Conference

export type Division = $Enums.Division

export const Division: typeof $Enums.Division

export type GameStatus = $Enums.GameStatus

export const GameStatus: typeof $Enums.GameStatus

export type ScoringSystem = $Enums.ScoringSystem

export const ScoringSystem: typeof $Enums.ScoringSystem

export type LeagueRole = $Enums.LeagueRole

export const LeagueRole: typeof $Enums.LeagueRole

export type MemberStatus = $Enums.MemberStatus

export const MemberStatus: typeof $Enums.MemberStatus

export type AchievementCategory = $Enums.AchievementCategory

export const AchievementCategory: typeof $Enums.AchievementCategory

export type Rarity = $Enums.Rarity

export const Rarity: typeof $Enums.Rarity

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs>;

  /**
   * `prisma.loginAttempt`: Exposes CRUD operations for the **LoginAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoginAttempts
    * const loginAttempts = await prisma.loginAttempt.findMany()
    * ```
    */
  get loginAttempt(): Prisma.LoginAttemptDelegate<ExtArgs>;

  /**
   * `prisma.season`: Exposes CRUD operations for the **Season** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seasons
    * const seasons = await prisma.season.findMany()
    * ```
    */
  get season(): Prisma.SeasonDelegate<ExtArgs>;

  /**
   * `prisma.week`: Exposes CRUD operations for the **Week** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Weeks
    * const weeks = await prisma.week.findMany()
    * ```
    */
  get week(): Prisma.WeekDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs>;

  /**
   * `prisma.pick`: Exposes CRUD operations for the **Pick** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Picks
    * const picks = await prisma.pick.findMany()
    * ```
    */
  get pick(): Prisma.PickDelegate<ExtArgs>;

  /**
   * `prisma.weeklyResult`: Exposes CRUD operations for the **WeeklyResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeeklyResults
    * const weeklyResults = await prisma.weeklyResult.findMany()
    * ```
    */
  get weeklyResult(): Prisma.WeeklyResultDelegate<ExtArgs>;

  /**
   * `prisma.league`: Exposes CRUD operations for the **League** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leagues
    * const leagues = await prisma.league.findMany()
    * ```
    */
  get league(): Prisma.LeagueDelegate<ExtArgs>;

  /**
   * `prisma.userLeague`: Exposes CRUD operations for the **UserLeague** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLeagues
    * const userLeagues = await prisma.userLeague.findMany()
    * ```
    */
  get userLeague(): Prisma.UserLeagueDelegate<ExtArgs>;

  /**
   * `prisma.leagueMessage`: Exposes CRUD operations for the **LeagueMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeagueMessages
    * const leagueMessages = await prisma.leagueMessage.findMany()
    * ```
    */
  get leagueMessage(): Prisma.LeagueMessageDelegate<ExtArgs>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<ExtArgs>;

  /**
   * `prisma.userAchievement`: Exposes CRUD operations for the **UserAchievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAchievements
    * const userAchievements = await prisma.userAchievement.findMany()
    * ```
    */
  get userAchievement(): Prisma.UserAchievementDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.rssFeedLog`: Exposes CRUD operations for the **RssFeedLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RssFeedLogs
    * const rssFeedLogs = await prisma.rssFeedLog.findMany()
    * ```
    */
  get rssFeedLog(): Prisma.RssFeedLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    RefreshToken: 'RefreshToken',
    LoginAttempt: 'LoginAttempt',
    Season: 'Season',
    Week: 'Week',
    Team: 'Team',
    Game: 'Game',
    Pick: 'Pick',
    WeeklyResult: 'WeeklyResult',
    League: 'League',
    UserLeague: 'UserLeague',
    LeagueMessage: 'LeagueMessage',
    Achievement: 'Achievement',
    UserAchievement: 'UserAchievement',
    Notification: 'Notification',
    AuditLog: 'AuditLog',
    RssFeedLog: 'RssFeedLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "refreshToken" | "loginAttempt" | "season" | "week" | "team" | "game" | "pick" | "weeklyResult" | "league" | "userLeague" | "leagueMessage" | "achievement" | "userAchievement" | "notification" | "auditLog" | "rssFeedLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      LoginAttempt: {
        payload: Prisma.$LoginAttemptPayload<ExtArgs>
        fields: Prisma.LoginAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoginAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoginAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          findFirst: {
            args: Prisma.LoginAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoginAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          findMany: {
            args: Prisma.LoginAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>[]
          }
          create: {
            args: Prisma.LoginAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          createMany: {
            args: Prisma.LoginAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoginAttemptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>[]
          }
          delete: {
            args: Prisma.LoginAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          update: {
            args: Prisma.LoginAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          deleteMany: {
            args: Prisma.LoginAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoginAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LoginAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          aggregate: {
            args: Prisma.LoginAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoginAttempt>
          }
          groupBy: {
            args: Prisma.LoginAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoginAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoginAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<LoginAttemptCountAggregateOutputType> | number
          }
        }
      }
      Season: {
        payload: Prisma.$SeasonPayload<ExtArgs>
        fields: Prisma.SeasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeasonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeasonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          findFirst: {
            args: Prisma.SeasonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeasonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          findMany: {
            args: Prisma.SeasonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>[]
          }
          create: {
            args: Prisma.SeasonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          createMany: {
            args: Prisma.SeasonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeasonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>[]
          }
          delete: {
            args: Prisma.SeasonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          update: {
            args: Prisma.SeasonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          deleteMany: {
            args: Prisma.SeasonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeasonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeasonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          aggregate: {
            args: Prisma.SeasonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeason>
          }
          groupBy: {
            args: Prisma.SeasonGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeasonCountArgs<ExtArgs>
            result: $Utils.Optional<SeasonCountAggregateOutputType> | number
          }
        }
      }
      Week: {
        payload: Prisma.$WeekPayload<ExtArgs>
        fields: Prisma.WeekFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeekFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeekFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          findFirst: {
            args: Prisma.WeekFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeekFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          findMany: {
            args: Prisma.WeekFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>[]
          }
          create: {
            args: Prisma.WeekCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          createMany: {
            args: Prisma.WeekCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeekCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>[]
          }
          delete: {
            args: Prisma.WeekDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          update: {
            args: Prisma.WeekUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          deleteMany: {
            args: Prisma.WeekDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeekUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WeekUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeekPayload>
          }
          aggregate: {
            args: Prisma.WeekAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeek>
          }
          groupBy: {
            args: Prisma.WeekGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeekGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeekCountArgs<ExtArgs>
            result: $Utils.Optional<WeekCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      Pick: {
        payload: Prisma.$PickPayload<ExtArgs>
        fields: Prisma.PickFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PickFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PickFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          findFirst: {
            args: Prisma.PickFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PickFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          findMany: {
            args: Prisma.PickFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload>[]
          }
          create: {
            args: Prisma.PickCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          createMany: {
            args: Prisma.PickCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PickCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload>[]
          }
          delete: {
            args: Prisma.PickDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          update: {
            args: Prisma.PickUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          deleteMany: {
            args: Prisma.PickDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PickUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PickUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickPayload>
          }
          aggregate: {
            args: Prisma.PickAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePick>
          }
          groupBy: {
            args: Prisma.PickGroupByArgs<ExtArgs>
            result: $Utils.Optional<PickGroupByOutputType>[]
          }
          count: {
            args: Prisma.PickCountArgs<ExtArgs>
            result: $Utils.Optional<PickCountAggregateOutputType> | number
          }
        }
      }
      WeeklyResult: {
        payload: Prisma.$WeeklyResultPayload<ExtArgs>
        fields: Prisma.WeeklyResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeeklyResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeeklyResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload>
          }
          findFirst: {
            args: Prisma.WeeklyResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeeklyResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload>
          }
          findMany: {
            args: Prisma.WeeklyResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload>[]
          }
          create: {
            args: Prisma.WeeklyResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload>
          }
          createMany: {
            args: Prisma.WeeklyResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeeklyResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload>[]
          }
          delete: {
            args: Prisma.WeeklyResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload>
          }
          update: {
            args: Prisma.WeeklyResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload>
          }
          deleteMany: {
            args: Prisma.WeeklyResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeeklyResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WeeklyResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyResultPayload>
          }
          aggregate: {
            args: Prisma.WeeklyResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeeklyResult>
          }
          groupBy: {
            args: Prisma.WeeklyResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeeklyResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeeklyResultCountArgs<ExtArgs>
            result: $Utils.Optional<WeeklyResultCountAggregateOutputType> | number
          }
        }
      }
      League: {
        payload: Prisma.$LeaguePayload<ExtArgs>
        fields: Prisma.LeagueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeagueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeagueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findFirst: {
            args: Prisma.LeagueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeagueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findMany: {
            args: Prisma.LeagueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          create: {
            args: Prisma.LeagueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          createMany: {
            args: Prisma.LeagueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeagueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          delete: {
            args: Prisma.LeagueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          update: {
            args: Prisma.LeagueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          deleteMany: {
            args: Prisma.LeagueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeagueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeagueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          aggregate: {
            args: Prisma.LeagueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeague>
          }
          groupBy: {
            args: Prisma.LeagueGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeagueGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeagueCountArgs<ExtArgs>
            result: $Utils.Optional<LeagueCountAggregateOutputType> | number
          }
        }
      }
      UserLeague: {
        payload: Prisma.$UserLeaguePayload<ExtArgs>
        fields: Prisma.UserLeagueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLeagueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLeagueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload>
          }
          findFirst: {
            args: Prisma.UserLeagueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLeagueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload>
          }
          findMany: {
            args: Prisma.UserLeagueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload>[]
          }
          create: {
            args: Prisma.UserLeagueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload>
          }
          createMany: {
            args: Prisma.UserLeagueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserLeagueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload>[]
          }
          delete: {
            args: Prisma.UserLeagueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload>
          }
          update: {
            args: Prisma.UserLeagueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload>
          }
          deleteMany: {
            args: Prisma.UserLeagueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLeagueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLeagueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeaguePayload>
          }
          aggregate: {
            args: Prisma.UserLeagueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLeague>
          }
          groupBy: {
            args: Prisma.UserLeagueGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLeagueGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLeagueCountArgs<ExtArgs>
            result: $Utils.Optional<UserLeagueCountAggregateOutputType> | number
          }
        }
      }
      LeagueMessage: {
        payload: Prisma.$LeagueMessagePayload<ExtArgs>
        fields: Prisma.LeagueMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeagueMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeagueMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload>
          }
          findFirst: {
            args: Prisma.LeagueMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeagueMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload>
          }
          findMany: {
            args: Prisma.LeagueMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload>[]
          }
          create: {
            args: Prisma.LeagueMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload>
          }
          createMany: {
            args: Prisma.LeagueMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeagueMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload>[]
          }
          delete: {
            args: Prisma.LeagueMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload>
          }
          update: {
            args: Prisma.LeagueMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload>
          }
          deleteMany: {
            args: Prisma.LeagueMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeagueMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeagueMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeagueMessagePayload>
          }
          aggregate: {
            args: Prisma.LeagueMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeagueMessage>
          }
          groupBy: {
            args: Prisma.LeagueMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeagueMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeagueMessageCountArgs<ExtArgs>
            result: $Utils.Optional<LeagueMessageCountAggregateOutputType> | number
          }
        }
      }
      Achievement: {
        payload: Prisma.$AchievementPayload<ExtArgs>
        fields: Prisma.AchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findFirst: {
            args: Prisma.AchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findMany: {
            args: Prisma.AchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          create: {
            args: Prisma.AchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          createMany: {
            args: Prisma.AchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          delete: {
            args: Prisma.AchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          update: {
            args: Prisma.AchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          deleteMany: {
            args: Prisma.AchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          aggregate: {
            args: Prisma.AchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchievement>
          }
          groupBy: {
            args: Prisma.AchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievementCountArgs<ExtArgs>
            result: $Utils.Optional<AchievementCountAggregateOutputType> | number
          }
        }
      }
      UserAchievement: {
        payload: Prisma.$UserAchievementPayload<ExtArgs>
        fields: Prisma.UserAchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findFirst: {
            args: Prisma.UserAchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findMany: {
            args: Prisma.UserAchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          create: {
            args: Prisma.UserAchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          createMany: {
            args: Prisma.UserAchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          delete: {
            args: Prisma.UserAchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          update: {
            args: Prisma.UserAchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          deleteMany: {
            args: Prisma.UserAchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          aggregate: {
            args: Prisma.UserAchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAchievement>
          }
          groupBy: {
            args: Prisma.UserAchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAchievementCountArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      RssFeedLog: {
        payload: Prisma.$RssFeedLogPayload<ExtArgs>
        fields: Prisma.RssFeedLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RssFeedLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RssFeedLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload>
          }
          findFirst: {
            args: Prisma.RssFeedLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RssFeedLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload>
          }
          findMany: {
            args: Prisma.RssFeedLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload>[]
          }
          create: {
            args: Prisma.RssFeedLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload>
          }
          createMany: {
            args: Prisma.RssFeedLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RssFeedLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload>[]
          }
          delete: {
            args: Prisma.RssFeedLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload>
          }
          update: {
            args: Prisma.RssFeedLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload>
          }
          deleteMany: {
            args: Prisma.RssFeedLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RssFeedLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RssFeedLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RssFeedLogPayload>
          }
          aggregate: {
            args: Prisma.RssFeedLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRssFeedLog>
          }
          groupBy: {
            args: Prisma.RssFeedLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<RssFeedLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.RssFeedLogCountArgs<ExtArgs>
            result: $Utils.Optional<RssFeedLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    picks: number
    weeklyResults: number
    userLeagues: number
    createdLeagues: number
    achievements: number
    refreshTokens: number
    loginHistory: number
    notifications: number
    auditLogs: number
    messages: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    picks?: boolean | UserCountOutputTypeCountPicksArgs
    weeklyResults?: boolean | UserCountOutputTypeCountWeeklyResultsArgs
    userLeagues?: boolean | UserCountOutputTypeCountUserLeaguesArgs
    createdLeagues?: boolean | UserCountOutputTypeCountCreatedLeaguesArgs
    achievements?: boolean | UserCountOutputTypeCountAchievementsArgs
    refreshTokens?: boolean | UserCountOutputTypeCountRefreshTokensArgs
    loginHistory?: boolean | UserCountOutputTypeCountLoginHistoryArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWeeklyResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLeagueWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLoginHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginAttemptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueMessageWhereInput
  }


  /**
   * Count Type SeasonCountOutputType
   */

  export type SeasonCountOutputType = {
    weeks: number
    leagues: number
  }

  export type SeasonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weeks?: boolean | SeasonCountOutputTypeCountWeeksArgs
    leagues?: boolean | SeasonCountOutputTypeCountLeaguesArgs
  }

  // Custom InputTypes
  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonCountOutputType
     */
    select?: SeasonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeCountWeeksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeekWhereInput
  }

  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeCountLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
  }


  /**
   * Count Type WeekCountOutputType
   */

  export type WeekCountOutputType = {
    games: number
    picks: number
    weeklyResults: number
  }

  export type WeekCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | WeekCountOutputTypeCountGamesArgs
    picks?: boolean | WeekCountOutputTypeCountPicksArgs
    weeklyResults?: boolean | WeekCountOutputTypeCountWeeklyResultsArgs
  }

  // Custom InputTypes
  /**
   * WeekCountOutputType without action
   */
  export type WeekCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeekCountOutputType
     */
    select?: WeekCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WeekCountOutputType without action
   */
  export type WeekCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * WeekCountOutputType without action
   */
  export type WeekCountOutputTypeCountPicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickWhereInput
  }

  /**
   * WeekCountOutputType without action
   */
  export type WeekCountOutputTypeCountWeeklyResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyResultWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    homeGames: number
    awayGames: number
    picks: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    homeGames?: boolean | TeamCountOutputTypeCountHomeGamesArgs
    awayGames?: boolean | TeamCountOutputTypeCountAwayGamesArgs
    picks?: boolean | TeamCountOutputTypeCountPicksArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountHomeGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountAwayGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    picks: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    picks?: boolean | GameCountOutputTypeCountPicksArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountPicksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickWhereInput
  }


  /**
   * Count Type LeagueCountOutputType
   */

  export type LeagueCountOutputType = {
    members: number
    messages: number
  }

  export type LeagueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | LeagueCountOutputTypeCountMembersArgs
    messages?: boolean | LeagueCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueCountOutputType
     */
    select?: LeagueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLeagueWhereInput
  }

  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueMessageWhereInput
  }


  /**
   * Count Type AchievementCountOutputType
   */

  export type AchievementCountOutputType = {
    users: number
  }

  export type AchievementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AchievementCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchievementCountOutputType
     */
    select?: AchievementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    loginCount: number | null
    loginAttempts: number | null
  }

  export type UserSumAggregateOutputType = {
    loginCount: number | null
    loginAttempts: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
    isActive: boolean | null
    emailVerified: boolean | null
    emailVerifiedAt: Date | null
    lastLoginAt: Date | null
    loginCount: number | null
    loginAttempts: number | null
    lockedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
    isActive: boolean | null
    emailVerified: boolean | null
    emailVerifiedAt: Date | null
    lastLoginAt: Date | null
    loginCount: number | null
    loginAttempts: number | null
    lockedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    displayName: number
    avatarUrl: number
    bio: number
    isActive: number
    emailVerified: number
    emailVerifiedAt: number
    lastLoginAt: number
    loginCount: number
    loginAttempts: number
    lockedAt: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    loginCount?: true
    loginAttempts?: true
  }

  export type UserSumAggregateInputType = {
    loginCount?: true
    loginAttempts?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
    isActive?: true
    emailVerified?: true
    emailVerifiedAt?: true
    lastLoginAt?: true
    loginCount?: true
    loginAttempts?: true
    lockedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
    isActive?: true
    emailVerified?: true
    emailVerifiedAt?: true
    lastLoginAt?: true
    loginCount?: true
    loginAttempts?: true
    lockedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
    isActive?: true
    emailVerified?: true
    emailVerifiedAt?: true
    lastLoginAt?: true
    loginCount?: true
    loginAttempts?: true
    lockedAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
    isActive: boolean
    emailVerified: boolean
    emailVerifiedAt: Date | null
    lastLoginAt: Date | null
    loginCount: number
    loginAttempts: number
    lockedAt: Date | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: boolean
    lastLoginAt?: boolean
    loginCount?: boolean
    loginAttempts?: boolean
    lockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    picks?: boolean | User$picksArgs<ExtArgs>
    weeklyResults?: boolean | User$weeklyResultsArgs<ExtArgs>
    userLeagues?: boolean | User$userLeaguesArgs<ExtArgs>
    createdLeagues?: boolean | User$createdLeaguesArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    loginHistory?: boolean | User$loginHistoryArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: boolean
    lastLoginAt?: boolean
    loginCount?: boolean
    loginAttempts?: boolean
    lockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: boolean
    lastLoginAt?: boolean
    loginCount?: boolean
    loginAttempts?: boolean
    lockedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    picks?: boolean | User$picksArgs<ExtArgs>
    weeklyResults?: boolean | User$weeklyResultsArgs<ExtArgs>
    userLeagues?: boolean | User$userLeaguesArgs<ExtArgs>
    createdLeagues?: boolean | User$createdLeaguesArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    loginHistory?: boolean | User$loginHistoryArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      picks: Prisma.$PickPayload<ExtArgs>[]
      weeklyResults: Prisma.$WeeklyResultPayload<ExtArgs>[]
      userLeagues: Prisma.$UserLeaguePayload<ExtArgs>[]
      createdLeagues: Prisma.$LeaguePayload<ExtArgs>[]
      achievements: Prisma.$UserAchievementPayload<ExtArgs>[]
      refreshTokens: Prisma.$RefreshTokenPayload<ExtArgs>[]
      loginHistory: Prisma.$LoginAttemptPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      messages: Prisma.$LeagueMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      displayName: string | null
      avatarUrl: string | null
      bio: string | null
      isActive: boolean
      emailVerified: boolean
      emailVerifiedAt: Date | null
      lastLoginAt: Date | null
      loginCount: number
      loginAttempts: number
      lockedAt: Date | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    picks<T extends User$picksArgs<ExtArgs> = {}>(args?: Subset<T, User$picksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findMany"> | Null>
    weeklyResults<T extends User$weeklyResultsArgs<ExtArgs> = {}>(args?: Subset<T, User$weeklyResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "findMany"> | Null>
    userLeagues<T extends User$userLeaguesArgs<ExtArgs> = {}>(args?: Subset<T, User$userLeaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "findMany"> | Null>
    createdLeagues<T extends User$createdLeaguesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdLeaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany"> | Null>
    achievements<T extends User$achievementsArgs<ExtArgs> = {}>(args?: Subset<T, User$achievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany"> | Null>
    refreshTokens<T extends User$refreshTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany"> | Null>
    loginHistory<T extends User$loginHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$loginHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerifiedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly loginCount: FieldRef<"User", 'Int'>
    readonly loginAttempts: FieldRef<"User", 'Int'>
    readonly lockedAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.picks
   */
  export type User$picksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    where?: PickWhereInput
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    cursor?: PickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }

  /**
   * User.weeklyResults
   */
  export type User$weeklyResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    where?: WeeklyResultWhereInput
    orderBy?: WeeklyResultOrderByWithRelationInput | WeeklyResultOrderByWithRelationInput[]
    cursor?: WeeklyResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyResultScalarFieldEnum | WeeklyResultScalarFieldEnum[]
  }

  /**
   * User.userLeagues
   */
  export type User$userLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    where?: UserLeagueWhereInput
    orderBy?: UserLeagueOrderByWithRelationInput | UserLeagueOrderByWithRelationInput[]
    cursor?: UserLeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLeagueScalarFieldEnum | UserLeagueScalarFieldEnum[]
  }

  /**
   * User.createdLeagues
   */
  export type User$createdLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    cursor?: LeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * User.achievements
   */
  export type User$achievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * User.refreshTokens
   */
  export type User$refreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User.loginHistory
   */
  export type User$loginHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    where?: LoginAttemptWhereInput
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    cursor?: LoginAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoginAttemptScalarFieldEnum | LoginAttemptScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    where?: LeagueMessageWhereInput
    orderBy?: LeagueMessageOrderByWithRelationInput | LeagueMessageOrderByWithRelationInput[]
    cursor?: LeagueMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueMessageScalarFieldEnum | LeagueMessageScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    family: string | null
    expiresAt: Date | null
    isRevoked: boolean | null
    createdAt: Date | null
    lastUsedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    family: string | null
    expiresAt: Date | null
    isRevoked: boolean | null
    createdAt: Date | null
    lastUsedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    family: number
    expiresAt: number
    isRevoked: number
    createdAt: number
    lastUsedAt: number
    ipAddress: number
    userAgent: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    family?: true
    expiresAt?: true
    isRevoked?: true
    createdAt?: true
    lastUsedAt?: true
    ipAddress?: true
    userAgent?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    family?: true
    expiresAt?: true
    isRevoked?: true
    createdAt?: true
    lastUsedAt?: true
    ipAddress?: true
    userAgent?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    family?: true
    expiresAt?: true
    isRevoked?: true
    createdAt?: true
    lastUsedAt?: true
    ipAddress?: true
    userAgent?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    token: string
    userId: string
    family: string
    expiresAt: Date
    isRevoked: boolean
    createdAt: Date
    lastUsedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    family?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    createdAt?: boolean
    lastUsedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    family?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    createdAt?: boolean
    lastUsedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    family?: boolean
    expiresAt?: boolean
    isRevoked?: boolean
    createdAt?: boolean
    lastUsedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
  }

  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      family: string
      expiresAt: Date
      isRevoked: boolean
      createdAt: Date
      lastUsedAt: Date | null
      ipAddress: string | null
      userAgent: string | null
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */ 
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly family: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly isRevoked: FieldRef<"RefreshToken", 'Boolean'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly lastUsedAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly ipAddress: FieldRef<"RefreshToken", 'String'>
    readonly userAgent: FieldRef<"RefreshToken", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model LoginAttempt
   */

  export type AggregateLoginAttempt = {
    _count: LoginAttemptCountAggregateOutputType | null
    _min: LoginAttemptMinAggregateOutputType | null
    _max: LoginAttemptMaxAggregateOutputType | null
  }

  export type LoginAttemptMinAggregateOutputType = {
    id: string | null
    userId: string | null
    identifier: string | null
    ipAddress: string | null
    userAgent: string | null
    success: boolean | null
    createdAt: Date | null
  }

  export type LoginAttemptMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    identifier: string | null
    ipAddress: string | null
    userAgent: string | null
    success: boolean | null
    createdAt: Date | null
  }

  export type LoginAttemptCountAggregateOutputType = {
    id: number
    userId: number
    identifier: number
    ipAddress: number
    userAgent: number
    success: number
    createdAt: number
    _all: number
  }


  export type LoginAttemptMinAggregateInputType = {
    id?: true
    userId?: true
    identifier?: true
    ipAddress?: true
    userAgent?: true
    success?: true
    createdAt?: true
  }

  export type LoginAttemptMaxAggregateInputType = {
    id?: true
    userId?: true
    identifier?: true
    ipAddress?: true
    userAgent?: true
    success?: true
    createdAt?: true
  }

  export type LoginAttemptCountAggregateInputType = {
    id?: true
    userId?: true
    identifier?: true
    ipAddress?: true
    userAgent?: true
    success?: true
    createdAt?: true
    _all?: true
  }

  export type LoginAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoginAttempt to aggregate.
     */
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     */
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoginAttempts
    **/
    _count?: true | LoginAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoginAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoginAttemptMaxAggregateInputType
  }

  export type GetLoginAttemptAggregateType<T extends LoginAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateLoginAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoginAttempt[P]>
      : GetScalarType<T[P], AggregateLoginAttempt[P]>
  }




  export type LoginAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginAttemptWhereInput
    orderBy?: LoginAttemptOrderByWithAggregationInput | LoginAttemptOrderByWithAggregationInput[]
    by: LoginAttemptScalarFieldEnum[] | LoginAttemptScalarFieldEnum
    having?: LoginAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoginAttemptCountAggregateInputType | true
    _min?: LoginAttemptMinAggregateInputType
    _max?: LoginAttemptMaxAggregateInputType
  }

  export type LoginAttemptGroupByOutputType = {
    id: string
    userId: string | null
    identifier: string
    ipAddress: string
    userAgent: string | null
    success: boolean
    createdAt: Date
    _count: LoginAttemptCountAggregateOutputType | null
    _min: LoginAttemptMinAggregateOutputType | null
    _max: LoginAttemptMaxAggregateOutputType | null
  }

  type GetLoginAttemptGroupByPayload<T extends LoginAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoginAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoginAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoginAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], LoginAttemptGroupByOutputType[P]>
        }
      >
    >


  export type LoginAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    identifier?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    success?: boolean
    createdAt?: boolean
    user?: boolean | LoginAttempt$userArgs<ExtArgs>
  }, ExtArgs["result"]["loginAttempt"]>

  export type LoginAttemptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    identifier?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    success?: boolean
    createdAt?: boolean
    user?: boolean | LoginAttempt$userArgs<ExtArgs>
  }, ExtArgs["result"]["loginAttempt"]>

  export type LoginAttemptSelectScalar = {
    id?: boolean
    userId?: boolean
    identifier?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    success?: boolean
    createdAt?: boolean
  }

  export type LoginAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LoginAttempt$userArgs<ExtArgs>
  }
  export type LoginAttemptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LoginAttempt$userArgs<ExtArgs>
  }

  export type $LoginAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoginAttempt"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      identifier: string
      ipAddress: string
      userAgent: string | null
      success: boolean
      createdAt: Date
    }, ExtArgs["result"]["loginAttempt"]>
    composites: {}
  }

  type LoginAttemptGetPayload<S extends boolean | null | undefined | LoginAttemptDefaultArgs> = $Result.GetResult<Prisma.$LoginAttemptPayload, S>

  type LoginAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoginAttemptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LoginAttemptCountAggregateInputType | true
    }

  export interface LoginAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoginAttempt'], meta: { name: 'LoginAttempt' } }
    /**
     * Find zero or one LoginAttempt that matches the filter.
     * @param {LoginAttemptFindUniqueArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoginAttemptFindUniqueArgs>(args: SelectSubset<T, LoginAttemptFindUniqueArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LoginAttempt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LoginAttemptFindUniqueOrThrowArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoginAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, LoginAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LoginAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptFindFirstArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoginAttemptFindFirstArgs>(args?: SelectSubset<T, LoginAttemptFindFirstArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LoginAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptFindFirstOrThrowArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoginAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, LoginAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LoginAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoginAttempts
     * const loginAttempts = await prisma.loginAttempt.findMany()
     * 
     * // Get first 10 LoginAttempts
     * const loginAttempts = await prisma.loginAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loginAttemptWithIdOnly = await prisma.loginAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoginAttemptFindManyArgs>(args?: SelectSubset<T, LoginAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LoginAttempt.
     * @param {LoginAttemptCreateArgs} args - Arguments to create a LoginAttempt.
     * @example
     * // Create one LoginAttempt
     * const LoginAttempt = await prisma.loginAttempt.create({
     *   data: {
     *     // ... data to create a LoginAttempt
     *   }
     * })
     * 
     */
    create<T extends LoginAttemptCreateArgs>(args: SelectSubset<T, LoginAttemptCreateArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LoginAttempts.
     * @param {LoginAttemptCreateManyArgs} args - Arguments to create many LoginAttempts.
     * @example
     * // Create many LoginAttempts
     * const loginAttempt = await prisma.loginAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoginAttemptCreateManyArgs>(args?: SelectSubset<T, LoginAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LoginAttempts and returns the data saved in the database.
     * @param {LoginAttemptCreateManyAndReturnArgs} args - Arguments to create many LoginAttempts.
     * @example
     * // Create many LoginAttempts
     * const loginAttempt = await prisma.loginAttempt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LoginAttempts and only return the `id`
     * const loginAttemptWithIdOnly = await prisma.loginAttempt.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoginAttemptCreateManyAndReturnArgs>(args?: SelectSubset<T, LoginAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LoginAttempt.
     * @param {LoginAttemptDeleteArgs} args - Arguments to delete one LoginAttempt.
     * @example
     * // Delete one LoginAttempt
     * const LoginAttempt = await prisma.loginAttempt.delete({
     *   where: {
     *     // ... filter to delete one LoginAttempt
     *   }
     * })
     * 
     */
    delete<T extends LoginAttemptDeleteArgs>(args: SelectSubset<T, LoginAttemptDeleteArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LoginAttempt.
     * @param {LoginAttemptUpdateArgs} args - Arguments to update one LoginAttempt.
     * @example
     * // Update one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoginAttemptUpdateArgs>(args: SelectSubset<T, LoginAttemptUpdateArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LoginAttempts.
     * @param {LoginAttemptDeleteManyArgs} args - Arguments to filter LoginAttempts to delete.
     * @example
     * // Delete a few LoginAttempts
     * const { count } = await prisma.loginAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoginAttemptDeleteManyArgs>(args?: SelectSubset<T, LoginAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoginAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoginAttempts
     * const loginAttempt = await prisma.loginAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoginAttemptUpdateManyArgs>(args: SelectSubset<T, LoginAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LoginAttempt.
     * @param {LoginAttemptUpsertArgs} args - Arguments to update or create a LoginAttempt.
     * @example
     * // Update or create a LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.upsert({
     *   create: {
     *     // ... data to create a LoginAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoginAttempt we want to update
     *   }
     * })
     */
    upsert<T extends LoginAttemptUpsertArgs>(args: SelectSubset<T, LoginAttemptUpsertArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LoginAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptCountArgs} args - Arguments to filter LoginAttempts to count.
     * @example
     * // Count the number of LoginAttempts
     * const count = await prisma.loginAttempt.count({
     *   where: {
     *     // ... the filter for the LoginAttempts we want to count
     *   }
     * })
    **/
    count<T extends LoginAttemptCountArgs>(
      args?: Subset<T, LoginAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoginAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoginAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoginAttemptAggregateArgs>(args: Subset<T, LoginAttemptAggregateArgs>): Prisma.PrismaPromise<GetLoginAttemptAggregateType<T>>

    /**
     * Group by LoginAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoginAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoginAttemptGroupByArgs['orderBy'] }
        : { orderBy?: LoginAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoginAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoginAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoginAttempt model
   */
  readonly fields: LoginAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoginAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoginAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends LoginAttempt$userArgs<ExtArgs> = {}>(args?: Subset<T, LoginAttempt$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LoginAttempt model
   */ 
  interface LoginAttemptFieldRefs {
    readonly id: FieldRef<"LoginAttempt", 'String'>
    readonly userId: FieldRef<"LoginAttempt", 'String'>
    readonly identifier: FieldRef<"LoginAttempt", 'String'>
    readonly ipAddress: FieldRef<"LoginAttempt", 'String'>
    readonly userAgent: FieldRef<"LoginAttempt", 'String'>
    readonly success: FieldRef<"LoginAttempt", 'Boolean'>
    readonly createdAt: FieldRef<"LoginAttempt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LoginAttempt findUnique
   */
  export type LoginAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempt to fetch.
     */
    where: LoginAttemptWhereUniqueInput
  }

  /**
   * LoginAttempt findUniqueOrThrow
   */
  export type LoginAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempt to fetch.
     */
    where: LoginAttemptWhereUniqueInput
  }

  /**
   * LoginAttempt findFirst
   */
  export type LoginAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempt to fetch.
     */
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     */
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginAttempts.
     */
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginAttempts.
     */
    distinct?: LoginAttemptScalarFieldEnum | LoginAttemptScalarFieldEnum[]
  }

  /**
   * LoginAttempt findFirstOrThrow
   */
  export type LoginAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempt to fetch.
     */
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     */
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginAttempts.
     */
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginAttempts.
     */
    distinct?: LoginAttemptScalarFieldEnum | LoginAttemptScalarFieldEnum[]
  }

  /**
   * LoginAttempt findMany
   */
  export type LoginAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempts to fetch.
     */
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     */
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoginAttempts.
     */
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     */
    skip?: number
    distinct?: LoginAttemptScalarFieldEnum | LoginAttemptScalarFieldEnum[]
  }

  /**
   * LoginAttempt create
   */
  export type LoginAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a LoginAttempt.
     */
    data: XOR<LoginAttemptCreateInput, LoginAttemptUncheckedCreateInput>
  }

  /**
   * LoginAttempt createMany
   */
  export type LoginAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoginAttempts.
     */
    data: LoginAttemptCreateManyInput | LoginAttemptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoginAttempt createManyAndReturn
   */
  export type LoginAttemptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LoginAttempts.
     */
    data: LoginAttemptCreateManyInput | LoginAttemptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LoginAttempt update
   */
  export type LoginAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a LoginAttempt.
     */
    data: XOR<LoginAttemptUpdateInput, LoginAttemptUncheckedUpdateInput>
    /**
     * Choose, which LoginAttempt to update.
     */
    where: LoginAttemptWhereUniqueInput
  }

  /**
   * LoginAttempt updateMany
   */
  export type LoginAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoginAttempts.
     */
    data: XOR<LoginAttemptUpdateManyMutationInput, LoginAttemptUncheckedUpdateManyInput>
    /**
     * Filter which LoginAttempts to update
     */
    where?: LoginAttemptWhereInput
  }

  /**
   * LoginAttempt upsert
   */
  export type LoginAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the LoginAttempt to update in case it exists.
     */
    where: LoginAttemptWhereUniqueInput
    /**
     * In case the LoginAttempt found by the `where` argument doesn't exist, create a new LoginAttempt with this data.
     */
    create: XOR<LoginAttemptCreateInput, LoginAttemptUncheckedCreateInput>
    /**
     * In case the LoginAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoginAttemptUpdateInput, LoginAttemptUncheckedUpdateInput>
  }

  /**
   * LoginAttempt delete
   */
  export type LoginAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter which LoginAttempt to delete.
     */
    where: LoginAttemptWhereUniqueInput
  }

  /**
   * LoginAttempt deleteMany
   */
  export type LoginAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoginAttempts to delete
     */
    where?: LoginAttemptWhereInput
  }

  /**
   * LoginAttempt.user
   */
  export type LoginAttempt$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LoginAttempt without action
   */
  export type LoginAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
  }


  /**
   * Model Season
   */

  export type AggregateSeason = {
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  export type SeasonAvgAggregateOutputType = {
    year: number | null
    weeksCount: number | null
    playoffWeeks: number | null
  }

  export type SeasonSumAggregateOutputType = {
    year: number | null
    weeksCount: number | null
    playoffWeeks: number | null
  }

  export type SeasonMinAggregateOutputType = {
    id: string | null
    year: number | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    isCurrent: boolean | null
    weeksCount: number | null
    playoffWeeks: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SeasonMaxAggregateOutputType = {
    id: string | null
    year: number | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    isCurrent: boolean | null
    weeksCount: number | null
    playoffWeeks: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SeasonCountAggregateOutputType = {
    id: number
    year: number
    startDate: number
    endDate: number
    isActive: number
    isCurrent: number
    weeksCount: number
    playoffWeeks: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SeasonAvgAggregateInputType = {
    year?: true
    weeksCount?: true
    playoffWeeks?: true
  }

  export type SeasonSumAggregateInputType = {
    year?: true
    weeksCount?: true
    playoffWeeks?: true
  }

  export type SeasonMinAggregateInputType = {
    id?: true
    year?: true
    startDate?: true
    endDate?: true
    isActive?: true
    isCurrent?: true
    weeksCount?: true
    playoffWeeks?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SeasonMaxAggregateInputType = {
    id?: true
    year?: true
    startDate?: true
    endDate?: true
    isActive?: true
    isCurrent?: true
    weeksCount?: true
    playoffWeeks?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SeasonCountAggregateInputType = {
    id?: true
    year?: true
    startDate?: true
    endDate?: true
    isActive?: true
    isCurrent?: true
    weeksCount?: true
    playoffWeeks?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SeasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Season to aggregate.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seasons
    **/
    _count?: true | SeasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeasonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeasonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeasonMaxAggregateInputType
  }

  export type GetSeasonAggregateType<T extends SeasonAggregateArgs> = {
        [P in keyof T & keyof AggregateSeason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeason[P]>
      : GetScalarType<T[P], AggregateSeason[P]>
  }




  export type SeasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeasonWhereInput
    orderBy?: SeasonOrderByWithAggregationInput | SeasonOrderByWithAggregationInput[]
    by: SeasonScalarFieldEnum[] | SeasonScalarFieldEnum
    having?: SeasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeasonCountAggregateInputType | true
    _avg?: SeasonAvgAggregateInputType
    _sum?: SeasonSumAggregateInputType
    _min?: SeasonMinAggregateInputType
    _max?: SeasonMaxAggregateInputType
  }

  export type SeasonGroupByOutputType = {
    id: string
    year: number
    startDate: Date
    endDate: Date
    isActive: boolean
    isCurrent: boolean
    weeksCount: number
    playoffWeeks: number
    createdAt: Date
    updatedAt: Date
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  type GetSeasonGroupByPayload<T extends SeasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeasonGroupByOutputType[P]>
            : GetScalarType<T[P], SeasonGroupByOutputType[P]>
        }
      >
    >


  export type SeasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: boolean
    playoffWeeks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    weeks?: boolean | Season$weeksArgs<ExtArgs>
    leagues?: boolean | Season$leaguesArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["season"]>

  export type SeasonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: boolean
    playoffWeeks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["season"]>

  export type SeasonSelectScalar = {
    id?: boolean
    year?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: boolean
    playoffWeeks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SeasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weeks?: boolean | Season$weeksArgs<ExtArgs>
    leagues?: boolean | Season$leaguesArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeasonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SeasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Season"
    objects: {
      weeks: Prisma.$WeekPayload<ExtArgs>[]
      leagues: Prisma.$LeaguePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      year: number
      startDate: Date
      endDate: Date
      isActive: boolean
      isCurrent: boolean
      weeksCount: number
      playoffWeeks: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["season"]>
    composites: {}
  }

  type SeasonGetPayload<S extends boolean | null | undefined | SeasonDefaultArgs> = $Result.GetResult<Prisma.$SeasonPayload, S>

  type SeasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeasonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeasonCountAggregateInputType | true
    }

  export interface SeasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Season'], meta: { name: 'Season' } }
    /**
     * Find zero or one Season that matches the filter.
     * @param {SeasonFindUniqueArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeasonFindUniqueArgs>(args: SelectSubset<T, SeasonFindUniqueArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Season that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeasonFindUniqueOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeasonFindUniqueOrThrowArgs>(args: SelectSubset<T, SeasonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Season that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeasonFindFirstArgs>(args?: SelectSubset<T, SeasonFindFirstArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Season that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeasonFindFirstOrThrowArgs>(args?: SelectSubset<T, SeasonFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Seasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seasons
     * const seasons = await prisma.season.findMany()
     * 
     * // Get first 10 Seasons
     * const seasons = await prisma.season.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seasonWithIdOnly = await prisma.season.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeasonFindManyArgs>(args?: SelectSubset<T, SeasonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Season.
     * @param {SeasonCreateArgs} args - Arguments to create a Season.
     * @example
     * // Create one Season
     * const Season = await prisma.season.create({
     *   data: {
     *     // ... data to create a Season
     *   }
     * })
     * 
     */
    create<T extends SeasonCreateArgs>(args: SelectSubset<T, SeasonCreateArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Seasons.
     * @param {SeasonCreateManyArgs} args - Arguments to create many Seasons.
     * @example
     * // Create many Seasons
     * const season = await prisma.season.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeasonCreateManyArgs>(args?: SelectSubset<T, SeasonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seasons and returns the data saved in the database.
     * @param {SeasonCreateManyAndReturnArgs} args - Arguments to create many Seasons.
     * @example
     * // Create many Seasons
     * const season = await prisma.season.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seasons and only return the `id`
     * const seasonWithIdOnly = await prisma.season.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeasonCreateManyAndReturnArgs>(args?: SelectSubset<T, SeasonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Season.
     * @param {SeasonDeleteArgs} args - Arguments to delete one Season.
     * @example
     * // Delete one Season
     * const Season = await prisma.season.delete({
     *   where: {
     *     // ... filter to delete one Season
     *   }
     * })
     * 
     */
    delete<T extends SeasonDeleteArgs>(args: SelectSubset<T, SeasonDeleteArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Season.
     * @param {SeasonUpdateArgs} args - Arguments to update one Season.
     * @example
     * // Update one Season
     * const season = await prisma.season.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeasonUpdateArgs>(args: SelectSubset<T, SeasonUpdateArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Seasons.
     * @param {SeasonDeleteManyArgs} args - Arguments to filter Seasons to delete.
     * @example
     * // Delete a few Seasons
     * const { count } = await prisma.season.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeasonDeleteManyArgs>(args?: SelectSubset<T, SeasonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seasons
     * const season = await prisma.season.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeasonUpdateManyArgs>(args: SelectSubset<T, SeasonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Season.
     * @param {SeasonUpsertArgs} args - Arguments to update or create a Season.
     * @example
     * // Update or create a Season
     * const season = await prisma.season.upsert({
     *   create: {
     *     // ... data to create a Season
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Season we want to update
     *   }
     * })
     */
    upsert<T extends SeasonUpsertArgs>(args: SelectSubset<T, SeasonUpsertArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonCountArgs} args - Arguments to filter Seasons to count.
     * @example
     * // Count the number of Seasons
     * const count = await prisma.season.count({
     *   where: {
     *     // ... the filter for the Seasons we want to count
     *   }
     * })
    **/
    count<T extends SeasonCountArgs>(
      args?: Subset<T, SeasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeasonAggregateArgs>(args: Subset<T, SeasonAggregateArgs>): Prisma.PrismaPromise<GetSeasonAggregateType<T>>

    /**
     * Group by Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeasonGroupByArgs['orderBy'] }
        : { orderBy?: SeasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Season model
   */
  readonly fields: SeasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Season.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    weeks<T extends Season$weeksArgs<ExtArgs> = {}>(args?: Subset<T, Season$weeksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findMany"> | Null>
    leagues<T extends Season$leaguesArgs<ExtArgs> = {}>(args?: Subset<T, Season$leaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Season model
   */ 
  interface SeasonFieldRefs {
    readonly id: FieldRef<"Season", 'String'>
    readonly year: FieldRef<"Season", 'Int'>
    readonly startDate: FieldRef<"Season", 'DateTime'>
    readonly endDate: FieldRef<"Season", 'DateTime'>
    readonly isActive: FieldRef<"Season", 'Boolean'>
    readonly isCurrent: FieldRef<"Season", 'Boolean'>
    readonly weeksCount: FieldRef<"Season", 'Int'>
    readonly playoffWeeks: FieldRef<"Season", 'Int'>
    readonly createdAt: FieldRef<"Season", 'DateTime'>
    readonly updatedAt: FieldRef<"Season", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Season findUnique
   */
  export type SeasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season findUniqueOrThrow
   */
  export type SeasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season findFirst
   */
  export type SeasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season findFirstOrThrow
   */
  export type SeasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season findMany
   */
  export type SeasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Seasons to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season create
   */
  export type SeasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to create a Season.
     */
    data: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
  }

  /**
   * Season createMany
   */
  export type SeasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seasons.
     */
    data: SeasonCreateManyInput | SeasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Season createManyAndReturn
   */
  export type SeasonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Seasons.
     */
    data: SeasonCreateManyInput | SeasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Season update
   */
  export type SeasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to update a Season.
     */
    data: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
    /**
     * Choose, which Season to update.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season updateMany
   */
  export type SeasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seasons.
     */
    data: XOR<SeasonUpdateManyMutationInput, SeasonUncheckedUpdateManyInput>
    /**
     * Filter which Seasons to update
     */
    where?: SeasonWhereInput
  }

  /**
   * Season upsert
   */
  export type SeasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The filter to search for the Season to update in case it exists.
     */
    where: SeasonWhereUniqueInput
    /**
     * In case the Season found by the `where` argument doesn't exist, create a new Season with this data.
     */
    create: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
    /**
     * In case the Season was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
  }

  /**
   * Season delete
   */
  export type SeasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter which Season to delete.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season deleteMany
   */
  export type SeasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seasons to delete
     */
    where?: SeasonWhereInput
  }

  /**
   * Season.weeks
   */
  export type Season$weeksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    where?: WeekWhereInput
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    cursor?: WeekWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeekScalarFieldEnum | WeekScalarFieldEnum[]
  }

  /**
   * Season.leagues
   */
  export type Season$leaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    cursor?: LeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * Season without action
   */
  export type SeasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
  }


  /**
   * Model Week
   */

  export type AggregateWeek = {
    _count: WeekCountAggregateOutputType | null
    _avg: WeekAvgAggregateOutputType | null
    _sum: WeekSumAggregateOutputType | null
    _min: WeekMinAggregateOutputType | null
    _max: WeekMaxAggregateOutputType | null
  }

  export type WeekAvgAggregateOutputType = {
    weekNumber: number | null
  }

  export type WeekSumAggregateOutputType = {
    weekNumber: number | null
  }

  export type WeekMinAggregateOutputType = {
    id: string | null
    seasonId: string | null
    weekNumber: number | null
    weekType: $Enums.WeekType | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    pickDeadline: Date | null
    tiebreakerGameId: string | null
    isActive: boolean | null
    isComplete: boolean | null
    isScored: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeekMaxAggregateOutputType = {
    id: string | null
    seasonId: string | null
    weekNumber: number | null
    weekType: $Enums.WeekType | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    pickDeadline: Date | null
    tiebreakerGameId: string | null
    isActive: boolean | null
    isComplete: boolean | null
    isScored: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeekCountAggregateOutputType = {
    id: number
    seasonId: number
    weekNumber: number
    weekType: number
    name: number
    startDate: number
    endDate: number
    pickDeadline: number
    tiebreakerGameId: number
    isActive: number
    isComplete: number
    isScored: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WeekAvgAggregateInputType = {
    weekNumber?: true
  }

  export type WeekSumAggregateInputType = {
    weekNumber?: true
  }

  export type WeekMinAggregateInputType = {
    id?: true
    seasonId?: true
    weekNumber?: true
    weekType?: true
    name?: true
    startDate?: true
    endDate?: true
    pickDeadline?: true
    tiebreakerGameId?: true
    isActive?: true
    isComplete?: true
    isScored?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeekMaxAggregateInputType = {
    id?: true
    seasonId?: true
    weekNumber?: true
    weekType?: true
    name?: true
    startDate?: true
    endDate?: true
    pickDeadline?: true
    tiebreakerGameId?: true
    isActive?: true
    isComplete?: true
    isScored?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeekCountAggregateInputType = {
    id?: true
    seasonId?: true
    weekNumber?: true
    weekType?: true
    name?: true
    startDate?: true
    endDate?: true
    pickDeadline?: true
    tiebreakerGameId?: true
    isActive?: true
    isComplete?: true
    isScored?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WeekAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Week to aggregate.
     */
    where?: WeekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weeks to fetch.
     */
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Weeks
    **/
    _count?: true | WeekCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeekAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeekSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeekMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeekMaxAggregateInputType
  }

  export type GetWeekAggregateType<T extends WeekAggregateArgs> = {
        [P in keyof T & keyof AggregateWeek]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeek[P]>
      : GetScalarType<T[P], AggregateWeek[P]>
  }




  export type WeekGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeekWhereInput
    orderBy?: WeekOrderByWithAggregationInput | WeekOrderByWithAggregationInput[]
    by: WeekScalarFieldEnum[] | WeekScalarFieldEnum
    having?: WeekScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeekCountAggregateInputType | true
    _avg?: WeekAvgAggregateInputType
    _sum?: WeekSumAggregateInputType
    _min?: WeekMinAggregateInputType
    _max?: WeekMaxAggregateInputType
  }

  export type WeekGroupByOutputType = {
    id: string
    seasonId: string
    weekNumber: number
    weekType: $Enums.WeekType
    name: string | null
    startDate: Date
    endDate: Date
    pickDeadline: Date
    tiebreakerGameId: string | null
    isActive: boolean
    isComplete: boolean
    isScored: boolean
    createdAt: Date
    updatedAt: Date
    _count: WeekCountAggregateOutputType | null
    _avg: WeekAvgAggregateOutputType | null
    _sum: WeekSumAggregateOutputType | null
    _min: WeekMinAggregateOutputType | null
    _max: WeekMaxAggregateOutputType | null
  }

  type GetWeekGroupByPayload<T extends WeekGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeekGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeekGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeekGroupByOutputType[P]>
            : GetScalarType<T[P], WeekGroupByOutputType[P]>
        }
      >
    >


  export type WeekSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seasonId?: boolean
    weekNumber?: boolean
    weekType?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    pickDeadline?: boolean
    tiebreakerGameId?: boolean
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    games?: boolean | Week$gamesArgs<ExtArgs>
    picks?: boolean | Week$picksArgs<ExtArgs>
    weeklyResults?: boolean | Week$weeklyResultsArgs<ExtArgs>
    tiebreakerGame?: boolean | Week$tiebreakerGameArgs<ExtArgs>
    _count?: boolean | WeekCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["week"]>

  export type WeekSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seasonId?: boolean
    weekNumber?: boolean
    weekType?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    pickDeadline?: boolean
    tiebreakerGameId?: boolean
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    tiebreakerGame?: boolean | Week$tiebreakerGameArgs<ExtArgs>
  }, ExtArgs["result"]["week"]>

  export type WeekSelectScalar = {
    id?: boolean
    seasonId?: boolean
    weekNumber?: boolean
    weekType?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    pickDeadline?: boolean
    tiebreakerGameId?: boolean
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WeekInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    games?: boolean | Week$gamesArgs<ExtArgs>
    picks?: boolean | Week$picksArgs<ExtArgs>
    weeklyResults?: boolean | Week$weeklyResultsArgs<ExtArgs>
    tiebreakerGame?: boolean | Week$tiebreakerGameArgs<ExtArgs>
    _count?: boolean | WeekCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WeekIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    tiebreakerGame?: boolean | Week$tiebreakerGameArgs<ExtArgs>
  }

  export type $WeekPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Week"
    objects: {
      season: Prisma.$SeasonPayload<ExtArgs>
      games: Prisma.$GamePayload<ExtArgs>[]
      picks: Prisma.$PickPayload<ExtArgs>[]
      weeklyResults: Prisma.$WeeklyResultPayload<ExtArgs>[]
      tiebreakerGame: Prisma.$GamePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      seasonId: string
      weekNumber: number
      weekType: $Enums.WeekType
      name: string | null
      startDate: Date
      endDate: Date
      pickDeadline: Date
      tiebreakerGameId: string | null
      isActive: boolean
      isComplete: boolean
      isScored: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["week"]>
    composites: {}
  }

  type WeekGetPayload<S extends boolean | null | undefined | WeekDefaultArgs> = $Result.GetResult<Prisma.$WeekPayload, S>

  type WeekCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeekFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeekCountAggregateInputType | true
    }

  export interface WeekDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Week'], meta: { name: 'Week' } }
    /**
     * Find zero or one Week that matches the filter.
     * @param {WeekFindUniqueArgs} args - Arguments to find a Week
     * @example
     * // Get one Week
     * const week = await prisma.week.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeekFindUniqueArgs>(args: SelectSubset<T, WeekFindUniqueArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Week that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WeekFindUniqueOrThrowArgs} args - Arguments to find a Week
     * @example
     * // Get one Week
     * const week = await prisma.week.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeekFindUniqueOrThrowArgs>(args: SelectSubset<T, WeekFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Week that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekFindFirstArgs} args - Arguments to find a Week
     * @example
     * // Get one Week
     * const week = await prisma.week.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeekFindFirstArgs>(args?: SelectSubset<T, WeekFindFirstArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Week that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekFindFirstOrThrowArgs} args - Arguments to find a Week
     * @example
     * // Get one Week
     * const week = await prisma.week.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeekFindFirstOrThrowArgs>(args?: SelectSubset<T, WeekFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Weeks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Weeks
     * const weeks = await prisma.week.findMany()
     * 
     * // Get first 10 Weeks
     * const weeks = await prisma.week.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weekWithIdOnly = await prisma.week.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeekFindManyArgs>(args?: SelectSubset<T, WeekFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Week.
     * @param {WeekCreateArgs} args - Arguments to create a Week.
     * @example
     * // Create one Week
     * const Week = await prisma.week.create({
     *   data: {
     *     // ... data to create a Week
     *   }
     * })
     * 
     */
    create<T extends WeekCreateArgs>(args: SelectSubset<T, WeekCreateArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Weeks.
     * @param {WeekCreateManyArgs} args - Arguments to create many Weeks.
     * @example
     * // Create many Weeks
     * const week = await prisma.week.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeekCreateManyArgs>(args?: SelectSubset<T, WeekCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Weeks and returns the data saved in the database.
     * @param {WeekCreateManyAndReturnArgs} args - Arguments to create many Weeks.
     * @example
     * // Create many Weeks
     * const week = await prisma.week.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Weeks and only return the `id`
     * const weekWithIdOnly = await prisma.week.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeekCreateManyAndReturnArgs>(args?: SelectSubset<T, WeekCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Week.
     * @param {WeekDeleteArgs} args - Arguments to delete one Week.
     * @example
     * // Delete one Week
     * const Week = await prisma.week.delete({
     *   where: {
     *     // ... filter to delete one Week
     *   }
     * })
     * 
     */
    delete<T extends WeekDeleteArgs>(args: SelectSubset<T, WeekDeleteArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Week.
     * @param {WeekUpdateArgs} args - Arguments to update one Week.
     * @example
     * // Update one Week
     * const week = await prisma.week.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeekUpdateArgs>(args: SelectSubset<T, WeekUpdateArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Weeks.
     * @param {WeekDeleteManyArgs} args - Arguments to filter Weeks to delete.
     * @example
     * // Delete a few Weeks
     * const { count } = await prisma.week.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeekDeleteManyArgs>(args?: SelectSubset<T, WeekDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weeks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Weeks
     * const week = await prisma.week.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeekUpdateManyArgs>(args: SelectSubset<T, WeekUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Week.
     * @param {WeekUpsertArgs} args - Arguments to update or create a Week.
     * @example
     * // Update or create a Week
     * const week = await prisma.week.upsert({
     *   create: {
     *     // ... data to create a Week
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Week we want to update
     *   }
     * })
     */
    upsert<T extends WeekUpsertArgs>(args: SelectSubset<T, WeekUpsertArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Weeks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekCountArgs} args - Arguments to filter Weeks to count.
     * @example
     * // Count the number of Weeks
     * const count = await prisma.week.count({
     *   where: {
     *     // ... the filter for the Weeks we want to count
     *   }
     * })
    **/
    count<T extends WeekCountArgs>(
      args?: Subset<T, WeekCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeekCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Week.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeekAggregateArgs>(args: Subset<T, WeekAggregateArgs>): Prisma.PrismaPromise<GetWeekAggregateType<T>>

    /**
     * Group by Week.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeekGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeekGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeekGroupByArgs['orderBy'] }
        : { orderBy?: WeekGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeekGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeekGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Week model
   */
  readonly fields: WeekFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Week.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeekClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    season<T extends SeasonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeasonDefaultArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    games<T extends Week$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Week$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany"> | Null>
    picks<T extends Week$picksArgs<ExtArgs> = {}>(args?: Subset<T, Week$picksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findMany"> | Null>
    weeklyResults<T extends Week$weeklyResultsArgs<ExtArgs> = {}>(args?: Subset<T, Week$weeklyResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "findMany"> | Null>
    tiebreakerGame<T extends Week$tiebreakerGameArgs<ExtArgs> = {}>(args?: Subset<T, Week$tiebreakerGameArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Week model
   */ 
  interface WeekFieldRefs {
    readonly id: FieldRef<"Week", 'String'>
    readonly seasonId: FieldRef<"Week", 'String'>
    readonly weekNumber: FieldRef<"Week", 'Int'>
    readonly weekType: FieldRef<"Week", 'WeekType'>
    readonly name: FieldRef<"Week", 'String'>
    readonly startDate: FieldRef<"Week", 'DateTime'>
    readonly endDate: FieldRef<"Week", 'DateTime'>
    readonly pickDeadline: FieldRef<"Week", 'DateTime'>
    readonly tiebreakerGameId: FieldRef<"Week", 'String'>
    readonly isActive: FieldRef<"Week", 'Boolean'>
    readonly isComplete: FieldRef<"Week", 'Boolean'>
    readonly isScored: FieldRef<"Week", 'Boolean'>
    readonly createdAt: FieldRef<"Week", 'DateTime'>
    readonly updatedAt: FieldRef<"Week", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Week findUnique
   */
  export type WeekFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Week to fetch.
     */
    where: WeekWhereUniqueInput
  }

  /**
   * Week findUniqueOrThrow
   */
  export type WeekFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Week to fetch.
     */
    where: WeekWhereUniqueInput
  }

  /**
   * Week findFirst
   */
  export type WeekFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Week to fetch.
     */
    where?: WeekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weeks to fetch.
     */
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weeks.
     */
    cursor?: WeekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weeks.
     */
    distinct?: WeekScalarFieldEnum | WeekScalarFieldEnum[]
  }

  /**
   * Week findFirstOrThrow
   */
  export type WeekFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Week to fetch.
     */
    where?: WeekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weeks to fetch.
     */
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weeks.
     */
    cursor?: WeekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weeks.
     */
    distinct?: WeekScalarFieldEnum | WeekScalarFieldEnum[]
  }

  /**
   * Week findMany
   */
  export type WeekFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter, which Weeks to fetch.
     */
    where?: WeekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weeks to fetch.
     */
    orderBy?: WeekOrderByWithRelationInput | WeekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Weeks.
     */
    cursor?: WeekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weeks.
     */
    skip?: number
    distinct?: WeekScalarFieldEnum | WeekScalarFieldEnum[]
  }

  /**
   * Week create
   */
  export type WeekCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * The data needed to create a Week.
     */
    data: XOR<WeekCreateInput, WeekUncheckedCreateInput>
  }

  /**
   * Week createMany
   */
  export type WeekCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Weeks.
     */
    data: WeekCreateManyInput | WeekCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Week createManyAndReturn
   */
  export type WeekCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Weeks.
     */
    data: WeekCreateManyInput | WeekCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Week update
   */
  export type WeekUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * The data needed to update a Week.
     */
    data: XOR<WeekUpdateInput, WeekUncheckedUpdateInput>
    /**
     * Choose, which Week to update.
     */
    where: WeekWhereUniqueInput
  }

  /**
   * Week updateMany
   */
  export type WeekUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Weeks.
     */
    data: XOR<WeekUpdateManyMutationInput, WeekUncheckedUpdateManyInput>
    /**
     * Filter which Weeks to update
     */
    where?: WeekWhereInput
  }

  /**
   * Week upsert
   */
  export type WeekUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * The filter to search for the Week to update in case it exists.
     */
    where: WeekWhereUniqueInput
    /**
     * In case the Week found by the `where` argument doesn't exist, create a new Week with this data.
     */
    create: XOR<WeekCreateInput, WeekUncheckedCreateInput>
    /**
     * In case the Week was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeekUpdateInput, WeekUncheckedUpdateInput>
  }

  /**
   * Week delete
   */
  export type WeekDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    /**
     * Filter which Week to delete.
     */
    where: WeekWhereUniqueInput
  }

  /**
   * Week deleteMany
   */
  export type WeekDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weeks to delete
     */
    where?: WeekWhereInput
  }

  /**
   * Week.games
   */
  export type Week$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Week.picks
   */
  export type Week$picksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    where?: PickWhereInput
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    cursor?: PickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }

  /**
   * Week.weeklyResults
   */
  export type Week$weeklyResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    where?: WeeklyResultWhereInput
    orderBy?: WeeklyResultOrderByWithRelationInput | WeeklyResultOrderByWithRelationInput[]
    cursor?: WeeklyResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyResultScalarFieldEnum | WeeklyResultScalarFieldEnum[]
  }

  /**
   * Week.tiebreakerGame
   */
  export type Week$tiebreakerGameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
  }

  /**
   * Week without action
   */
  export type WeekDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    currentWins: number | null
    currentLosses: number | null
    currentTies: number | null
  }

  export type TeamSumAggregateOutputType = {
    currentWins: number | null
    currentLosses: number | null
    currentTies: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    abbreviation: string | null
    city: string | null
    name: string | null
    fullName: string | null
    conference: $Enums.Conference | null
    division: $Enums.Division | null
    logoUrl: string | null
    primaryColor: string | null
    secondaryColor: string | null
    espnId: string | null
    cbsId: string | null
    foxId: string | null
    currentWins: number | null
    currentLosses: number | null
    currentTies: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    abbreviation: string | null
    city: string | null
    name: string | null
    fullName: string | null
    conference: $Enums.Conference | null
    division: $Enums.Division | null
    logoUrl: string | null
    primaryColor: string | null
    secondaryColor: string | null
    espnId: string | null
    cbsId: string | null
    foxId: string | null
    currentWins: number | null
    currentLosses: number | null
    currentTies: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    abbreviation: number
    city: number
    name: number
    fullName: number
    conference: number
    division: number
    logoUrl: number
    primaryColor: number
    secondaryColor: number
    espnId: number
    cbsId: number
    foxId: number
    currentWins: number
    currentLosses: number
    currentTies: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    currentWins?: true
    currentLosses?: true
    currentTies?: true
  }

  export type TeamSumAggregateInputType = {
    currentWins?: true
    currentLosses?: true
    currentTies?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    abbreviation?: true
    city?: true
    name?: true
    fullName?: true
    conference?: true
    division?: true
    logoUrl?: true
    primaryColor?: true
    secondaryColor?: true
    espnId?: true
    cbsId?: true
    foxId?: true
    currentWins?: true
    currentLosses?: true
    currentTies?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    abbreviation?: true
    city?: true
    name?: true
    fullName?: true
    conference?: true
    division?: true
    logoUrl?: true
    primaryColor?: true
    secondaryColor?: true
    espnId?: true
    cbsId?: true
    foxId?: true
    currentWins?: true
    currentLosses?: true
    currentTies?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    abbreviation?: true
    city?: true
    name?: true
    fullName?: true
    conference?: true
    division?: true
    logoUrl?: true
    primaryColor?: true
    secondaryColor?: true
    espnId?: true
    cbsId?: true
    foxId?: true
    currentWins?: true
    currentLosses?: true
    currentTies?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl: string | null
    primaryColor: string | null
    secondaryColor: string | null
    espnId: string | null
    cbsId: string | null
    foxId: string | null
    currentWins: number
    currentLosses: number
    currentTies: number
    createdAt: Date
    updatedAt: Date
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    abbreviation?: boolean
    city?: boolean
    name?: boolean
    fullName?: boolean
    conference?: boolean
    division?: boolean
    logoUrl?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    espnId?: boolean
    cbsId?: boolean
    foxId?: boolean
    currentWins?: boolean
    currentLosses?: boolean
    currentTies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    homeGames?: boolean | Team$homeGamesArgs<ExtArgs>
    awayGames?: boolean | Team$awayGamesArgs<ExtArgs>
    picks?: boolean | Team$picksArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    abbreviation?: boolean
    city?: boolean
    name?: boolean
    fullName?: boolean
    conference?: boolean
    division?: boolean
    logoUrl?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    espnId?: boolean
    cbsId?: boolean
    foxId?: boolean
    currentWins?: boolean
    currentLosses?: boolean
    currentTies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    abbreviation?: boolean
    city?: boolean
    name?: boolean
    fullName?: boolean
    conference?: boolean
    division?: boolean
    logoUrl?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    espnId?: boolean
    cbsId?: boolean
    foxId?: boolean
    currentWins?: boolean
    currentLosses?: boolean
    currentTies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    homeGames?: boolean | Team$homeGamesArgs<ExtArgs>
    awayGames?: boolean | Team$awayGamesArgs<ExtArgs>
    picks?: boolean | Team$picksArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      homeGames: Prisma.$GamePayload<ExtArgs>[]
      awayGames: Prisma.$GamePayload<ExtArgs>[]
      picks: Prisma.$PickPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      abbreviation: string
      city: string
      name: string
      fullName: string
      conference: $Enums.Conference
      division: $Enums.Division
      logoUrl: string | null
      primaryColor: string | null
      secondaryColor: string | null
      espnId: string | null
      cbsId: string | null
      foxId: string | null
      currentWins: number
      currentLosses: number
      currentTies: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    homeGames<T extends Team$homeGamesArgs<ExtArgs> = {}>(args?: Subset<T, Team$homeGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany"> | Null>
    awayGames<T extends Team$awayGamesArgs<ExtArgs> = {}>(args?: Subset<T, Team$awayGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany"> | Null>
    picks<T extends Team$picksArgs<ExtArgs> = {}>(args?: Subset<T, Team$picksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly abbreviation: FieldRef<"Team", 'String'>
    readonly city: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
    readonly fullName: FieldRef<"Team", 'String'>
    readonly conference: FieldRef<"Team", 'Conference'>
    readonly division: FieldRef<"Team", 'Division'>
    readonly logoUrl: FieldRef<"Team", 'String'>
    readonly primaryColor: FieldRef<"Team", 'String'>
    readonly secondaryColor: FieldRef<"Team", 'String'>
    readonly espnId: FieldRef<"Team", 'String'>
    readonly cbsId: FieldRef<"Team", 'String'>
    readonly foxId: FieldRef<"Team", 'String'>
    readonly currentWins: FieldRef<"Team", 'Int'>
    readonly currentLosses: FieldRef<"Team", 'Int'>
    readonly currentTies: FieldRef<"Team", 'Int'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.homeGames
   */
  export type Team$homeGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Team.awayGames
   */
  export type Team$awayGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Team.picks
   */
  export type Team$picksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    where?: PickWhereInput
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    cursor?: PickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    homeScore: number | null
    awayScore: number | null
  }

  export type GameSumAggregateOutputType = {
    homeScore: number | null
    awayScore: number | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    weekId: string | null
    homeTeamId: string | null
    awayTeamId: string | null
    kickoffTime: Date | null
    tvNetwork: string | null
    homeScore: number | null
    awayScore: number | null
    status: $Enums.GameStatus | null
    quarter: string | null
    timeRemaining: string | null
    possession: string | null
    espnGameId: string | null
    cbsGameId: string | null
    foxGameId: string | null
    lastUpdatedFrom: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    weekId: string | null
    homeTeamId: string | null
    awayTeamId: string | null
    kickoffTime: Date | null
    tvNetwork: string | null
    homeScore: number | null
    awayScore: number | null
    status: $Enums.GameStatus | null
    quarter: string | null
    timeRemaining: string | null
    possession: string | null
    espnGameId: string | null
    cbsGameId: string | null
    foxGameId: string | null
    lastUpdatedFrom: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    weekId: number
    homeTeamId: number
    awayTeamId: number
    kickoffTime: number
    tvNetwork: number
    homeScore: number
    awayScore: number
    status: number
    quarter: number
    timeRemaining: number
    possession: number
    espnGameId: number
    cbsGameId: number
    foxGameId: number
    lastUpdatedFrom: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    homeScore?: true
    awayScore?: true
  }

  export type GameSumAggregateInputType = {
    homeScore?: true
    awayScore?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    weekId?: true
    homeTeamId?: true
    awayTeamId?: true
    kickoffTime?: true
    tvNetwork?: true
    homeScore?: true
    awayScore?: true
    status?: true
    quarter?: true
    timeRemaining?: true
    possession?: true
    espnGameId?: true
    cbsGameId?: true
    foxGameId?: true
    lastUpdatedFrom?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    weekId?: true
    homeTeamId?: true
    awayTeamId?: true
    kickoffTime?: true
    tvNetwork?: true
    homeScore?: true
    awayScore?: true
    status?: true
    quarter?: true
    timeRemaining?: true
    possession?: true
    espnGameId?: true
    cbsGameId?: true
    foxGameId?: true
    lastUpdatedFrom?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    weekId?: true
    homeTeamId?: true
    awayTeamId?: true
    kickoffTime?: true
    tvNetwork?: true
    homeScore?: true
    awayScore?: true
    status?: true
    quarter?: true
    timeRemaining?: true
    possession?: true
    espnGameId?: true
    cbsGameId?: true
    foxGameId?: true
    lastUpdatedFrom?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    weekId: string
    homeTeamId: string
    awayTeamId: string
    kickoffTime: Date
    tvNetwork: string | null
    homeScore: number | null
    awayScore: number | null
    status: $Enums.GameStatus
    quarter: string | null
    timeRemaining: string | null
    possession: string | null
    espnGameId: string | null
    cbsGameId: string | null
    foxGameId: string | null
    lastUpdatedFrom: string | null
    createdAt: Date
    updatedAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    weekId?: boolean
    homeTeamId?: boolean
    awayTeamId?: boolean
    kickoffTime?: boolean
    tvNetwork?: boolean
    homeScore?: boolean
    awayScore?: boolean
    status?: boolean
    quarter?: boolean
    timeRemaining?: boolean
    possession?: boolean
    espnGameId?: boolean
    cbsGameId?: boolean
    foxGameId?: boolean
    lastUpdatedFrom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    week?: boolean | WeekDefaultArgs<ExtArgs>
    homeTeam?: boolean | TeamDefaultArgs<ExtArgs>
    awayTeam?: boolean | TeamDefaultArgs<ExtArgs>
    picks?: boolean | Game$picksArgs<ExtArgs>
    tiebreakerForWeek?: boolean | Game$tiebreakerForWeekArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    weekId?: boolean
    homeTeamId?: boolean
    awayTeamId?: boolean
    kickoffTime?: boolean
    tvNetwork?: boolean
    homeScore?: boolean
    awayScore?: boolean
    status?: boolean
    quarter?: boolean
    timeRemaining?: boolean
    possession?: boolean
    espnGameId?: boolean
    cbsGameId?: boolean
    foxGameId?: boolean
    lastUpdatedFrom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    week?: boolean | WeekDefaultArgs<ExtArgs>
    homeTeam?: boolean | TeamDefaultArgs<ExtArgs>
    awayTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    weekId?: boolean
    homeTeamId?: boolean
    awayTeamId?: boolean
    kickoffTime?: boolean
    tvNetwork?: boolean
    homeScore?: boolean
    awayScore?: boolean
    status?: boolean
    quarter?: boolean
    timeRemaining?: boolean
    possession?: boolean
    espnGameId?: boolean
    cbsGameId?: boolean
    foxGameId?: boolean
    lastUpdatedFrom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    week?: boolean | WeekDefaultArgs<ExtArgs>
    homeTeam?: boolean | TeamDefaultArgs<ExtArgs>
    awayTeam?: boolean | TeamDefaultArgs<ExtArgs>
    picks?: boolean | Game$picksArgs<ExtArgs>
    tiebreakerForWeek?: boolean | Game$tiebreakerForWeekArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    week?: boolean | WeekDefaultArgs<ExtArgs>
    homeTeam?: boolean | TeamDefaultArgs<ExtArgs>
    awayTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      week: Prisma.$WeekPayload<ExtArgs>
      homeTeam: Prisma.$TeamPayload<ExtArgs>
      awayTeam: Prisma.$TeamPayload<ExtArgs>
      picks: Prisma.$PickPayload<ExtArgs>[]
      tiebreakerForWeek: Prisma.$WeekPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      weekId: string
      homeTeamId: string
      awayTeamId: string
      kickoffTime: Date
      tvNetwork: string | null
      homeScore: number | null
      awayScore: number | null
      status: $Enums.GameStatus
      quarter: string | null
      timeRemaining: string | null
      possession: string | null
      espnGameId: string | null
      cbsGameId: string | null
      foxGameId: string | null
      lastUpdatedFrom: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    week<T extends WeekDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WeekDefaultArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    homeTeam<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    awayTeam<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    picks<T extends Game$picksArgs<ExtArgs> = {}>(args?: Subset<T, Game$picksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findMany"> | Null>
    tiebreakerForWeek<T extends Game$tiebreakerForWeekArgs<ExtArgs> = {}>(args?: Subset<T, Game$tiebreakerForWeekArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */ 
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'String'>
    readonly weekId: FieldRef<"Game", 'String'>
    readonly homeTeamId: FieldRef<"Game", 'String'>
    readonly awayTeamId: FieldRef<"Game", 'String'>
    readonly kickoffTime: FieldRef<"Game", 'DateTime'>
    readonly tvNetwork: FieldRef<"Game", 'String'>
    readonly homeScore: FieldRef<"Game", 'Int'>
    readonly awayScore: FieldRef<"Game", 'Int'>
    readonly status: FieldRef<"Game", 'GameStatus'>
    readonly quarter: FieldRef<"Game", 'String'>
    readonly timeRemaining: FieldRef<"Game", 'String'>
    readonly possession: FieldRef<"Game", 'String'>
    readonly espnGameId: FieldRef<"Game", 'String'>
    readonly cbsGameId: FieldRef<"Game", 'String'>
    readonly foxGameId: FieldRef<"Game", 'String'>
    readonly lastUpdatedFrom: FieldRef<"Game", 'String'>
    readonly createdAt: FieldRef<"Game", 'DateTime'>
    readonly updatedAt: FieldRef<"Game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }

  /**
   * Game.picks
   */
  export type Game$picksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    where?: PickWhereInput
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    cursor?: PickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }

  /**
   * Game.tiebreakerForWeek
   */
  export type Game$tiebreakerForWeekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week
     */
    select?: WeekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeekInclude<ExtArgs> | null
    where?: WeekWhereInput
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model Pick
   */

  export type AggregatePick = {
    _count: PickCountAggregateOutputType | null
    _avg: PickAvgAggregateOutputType | null
    _sum: PickSumAggregateOutputType | null
    _min: PickMinAggregateOutputType | null
    _max: PickMaxAggregateOutputType | null
  }

  export type PickAvgAggregateOutputType = {
    pointsAwarded: number | null
    tiebreakerScore: number | null
    tiebreakerDiff: number | null
  }

  export type PickSumAggregateOutputType = {
    pointsAwarded: number | null
    tiebreakerScore: number | null
    tiebreakerDiff: number | null
  }

  export type PickMinAggregateOutputType = {
    id: string | null
    userId: string | null
    weekId: string | null
    gameId: string | null
    selectedTeamId: string | null
    isHomeTeamPick: boolean | null
    isCorrect: boolean | null
    pointsAwarded: number | null
    tiebreakerScore: number | null
    tiebreakerDiff: number | null
    submittedAt: Date | null
    updatedAt: Date | null
    lockedAt: Date | null
  }

  export type PickMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    weekId: string | null
    gameId: string | null
    selectedTeamId: string | null
    isHomeTeamPick: boolean | null
    isCorrect: boolean | null
    pointsAwarded: number | null
    tiebreakerScore: number | null
    tiebreakerDiff: number | null
    submittedAt: Date | null
    updatedAt: Date | null
    lockedAt: Date | null
  }

  export type PickCountAggregateOutputType = {
    id: number
    userId: number
    weekId: number
    gameId: number
    selectedTeamId: number
    isHomeTeamPick: number
    isCorrect: number
    pointsAwarded: number
    tiebreakerScore: number
    tiebreakerDiff: number
    submittedAt: number
    updatedAt: number
    lockedAt: number
    _all: number
  }


  export type PickAvgAggregateInputType = {
    pointsAwarded?: true
    tiebreakerScore?: true
    tiebreakerDiff?: true
  }

  export type PickSumAggregateInputType = {
    pointsAwarded?: true
    tiebreakerScore?: true
    tiebreakerDiff?: true
  }

  export type PickMinAggregateInputType = {
    id?: true
    userId?: true
    weekId?: true
    gameId?: true
    selectedTeamId?: true
    isHomeTeamPick?: true
    isCorrect?: true
    pointsAwarded?: true
    tiebreakerScore?: true
    tiebreakerDiff?: true
    submittedAt?: true
    updatedAt?: true
    lockedAt?: true
  }

  export type PickMaxAggregateInputType = {
    id?: true
    userId?: true
    weekId?: true
    gameId?: true
    selectedTeamId?: true
    isHomeTeamPick?: true
    isCorrect?: true
    pointsAwarded?: true
    tiebreakerScore?: true
    tiebreakerDiff?: true
    submittedAt?: true
    updatedAt?: true
    lockedAt?: true
  }

  export type PickCountAggregateInputType = {
    id?: true
    userId?: true
    weekId?: true
    gameId?: true
    selectedTeamId?: true
    isHomeTeamPick?: true
    isCorrect?: true
    pointsAwarded?: true
    tiebreakerScore?: true
    tiebreakerDiff?: true
    submittedAt?: true
    updatedAt?: true
    lockedAt?: true
    _all?: true
  }

  export type PickAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pick to aggregate.
     */
    where?: PickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Picks
    **/
    _count?: true | PickCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PickAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PickSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PickMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PickMaxAggregateInputType
  }

  export type GetPickAggregateType<T extends PickAggregateArgs> = {
        [P in keyof T & keyof AggregatePick]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePick[P]>
      : GetScalarType<T[P], AggregatePick[P]>
  }




  export type PickGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickWhereInput
    orderBy?: PickOrderByWithAggregationInput | PickOrderByWithAggregationInput[]
    by: PickScalarFieldEnum[] | PickScalarFieldEnum
    having?: PickScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PickCountAggregateInputType | true
    _avg?: PickAvgAggregateInputType
    _sum?: PickSumAggregateInputType
    _min?: PickMinAggregateInputType
    _max?: PickMaxAggregateInputType
  }

  export type PickGroupByOutputType = {
    id: string
    userId: string
    weekId: string
    gameId: string
    selectedTeamId: string | null
    isHomeTeamPick: boolean | null
    isCorrect: boolean | null
    pointsAwarded: number
    tiebreakerScore: number | null
    tiebreakerDiff: number | null
    submittedAt: Date
    updatedAt: Date
    lockedAt: Date | null
    _count: PickCountAggregateOutputType | null
    _avg: PickAvgAggregateOutputType | null
    _sum: PickSumAggregateOutputType | null
    _min: PickMinAggregateOutputType | null
    _max: PickMaxAggregateOutputType | null
  }

  type GetPickGroupByPayload<T extends PickGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PickGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PickGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PickGroupByOutputType[P]>
            : GetScalarType<T[P], PickGroupByOutputType[P]>
        }
      >
    >


  export type PickSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weekId?: boolean
    gameId?: boolean
    selectedTeamId?: boolean
    isHomeTeamPick?: boolean
    isCorrect?: boolean
    pointsAwarded?: boolean
    tiebreakerScore?: boolean
    tiebreakerDiff?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    lockedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    week?: boolean | WeekDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    selectedTeam?: boolean | Pick$selectedTeamArgs<ExtArgs>
  }, ExtArgs["result"]["pick"]>

  export type PickSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weekId?: boolean
    gameId?: boolean
    selectedTeamId?: boolean
    isHomeTeamPick?: boolean
    isCorrect?: boolean
    pointsAwarded?: boolean
    tiebreakerScore?: boolean
    tiebreakerDiff?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    lockedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    week?: boolean | WeekDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    selectedTeam?: boolean | Pick$selectedTeamArgs<ExtArgs>
  }, ExtArgs["result"]["pick"]>

  export type PickSelectScalar = {
    id?: boolean
    userId?: boolean
    weekId?: boolean
    gameId?: boolean
    selectedTeamId?: boolean
    isHomeTeamPick?: boolean
    isCorrect?: boolean
    pointsAwarded?: boolean
    tiebreakerScore?: boolean
    tiebreakerDiff?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    lockedAt?: boolean
  }

  export type PickInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    week?: boolean | WeekDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    selectedTeam?: boolean | Pick$selectedTeamArgs<ExtArgs>
  }
  export type PickIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    week?: boolean | WeekDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    selectedTeam?: boolean | Pick$selectedTeamArgs<ExtArgs>
  }

  export type $PickPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pick"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      week: Prisma.$WeekPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
      selectedTeam: Prisma.$TeamPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      weekId: string
      gameId: string
      selectedTeamId: string | null
      isHomeTeamPick: boolean | null
      isCorrect: boolean | null
      pointsAwarded: number
      tiebreakerScore: number | null
      tiebreakerDiff: number | null
      submittedAt: Date
      updatedAt: Date
      lockedAt: Date | null
    }, ExtArgs["result"]["pick"]>
    composites: {}
  }

  type PickGetPayload<S extends boolean | null | undefined | PickDefaultArgs> = $Result.GetResult<Prisma.$PickPayload, S>

  type PickCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PickFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PickCountAggregateInputType | true
    }

  export interface PickDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pick'], meta: { name: 'Pick' } }
    /**
     * Find zero or one Pick that matches the filter.
     * @param {PickFindUniqueArgs} args - Arguments to find a Pick
     * @example
     * // Get one Pick
     * const pick = await prisma.pick.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PickFindUniqueArgs>(args: SelectSubset<T, PickFindUniqueArgs<ExtArgs>>): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pick that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PickFindUniqueOrThrowArgs} args - Arguments to find a Pick
     * @example
     * // Get one Pick
     * const pick = await prisma.pick.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PickFindUniqueOrThrowArgs>(args: SelectSubset<T, PickFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pick that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickFindFirstArgs} args - Arguments to find a Pick
     * @example
     * // Get one Pick
     * const pick = await prisma.pick.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PickFindFirstArgs>(args?: SelectSubset<T, PickFindFirstArgs<ExtArgs>>): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pick that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickFindFirstOrThrowArgs} args - Arguments to find a Pick
     * @example
     * // Get one Pick
     * const pick = await prisma.pick.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PickFindFirstOrThrowArgs>(args?: SelectSubset<T, PickFindFirstOrThrowArgs<ExtArgs>>): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Picks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Picks
     * const picks = await prisma.pick.findMany()
     * 
     * // Get first 10 Picks
     * const picks = await prisma.pick.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pickWithIdOnly = await prisma.pick.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PickFindManyArgs>(args?: SelectSubset<T, PickFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pick.
     * @param {PickCreateArgs} args - Arguments to create a Pick.
     * @example
     * // Create one Pick
     * const Pick = await prisma.pick.create({
     *   data: {
     *     // ... data to create a Pick
     *   }
     * })
     * 
     */
    create<T extends PickCreateArgs>(args: SelectSubset<T, PickCreateArgs<ExtArgs>>): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Picks.
     * @param {PickCreateManyArgs} args - Arguments to create many Picks.
     * @example
     * // Create many Picks
     * const pick = await prisma.pick.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PickCreateManyArgs>(args?: SelectSubset<T, PickCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Picks and returns the data saved in the database.
     * @param {PickCreateManyAndReturnArgs} args - Arguments to create many Picks.
     * @example
     * // Create many Picks
     * const pick = await prisma.pick.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Picks and only return the `id`
     * const pickWithIdOnly = await prisma.pick.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PickCreateManyAndReturnArgs>(args?: SelectSubset<T, PickCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pick.
     * @param {PickDeleteArgs} args - Arguments to delete one Pick.
     * @example
     * // Delete one Pick
     * const Pick = await prisma.pick.delete({
     *   where: {
     *     // ... filter to delete one Pick
     *   }
     * })
     * 
     */
    delete<T extends PickDeleteArgs>(args: SelectSubset<T, PickDeleteArgs<ExtArgs>>): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pick.
     * @param {PickUpdateArgs} args - Arguments to update one Pick.
     * @example
     * // Update one Pick
     * const pick = await prisma.pick.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PickUpdateArgs>(args: SelectSubset<T, PickUpdateArgs<ExtArgs>>): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Picks.
     * @param {PickDeleteManyArgs} args - Arguments to filter Picks to delete.
     * @example
     * // Delete a few Picks
     * const { count } = await prisma.pick.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PickDeleteManyArgs>(args?: SelectSubset<T, PickDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Picks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Picks
     * const pick = await prisma.pick.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PickUpdateManyArgs>(args: SelectSubset<T, PickUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pick.
     * @param {PickUpsertArgs} args - Arguments to update or create a Pick.
     * @example
     * // Update or create a Pick
     * const pick = await prisma.pick.upsert({
     *   create: {
     *     // ... data to create a Pick
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pick we want to update
     *   }
     * })
     */
    upsert<T extends PickUpsertArgs>(args: SelectSubset<T, PickUpsertArgs<ExtArgs>>): Prisma__PickClient<$Result.GetResult<Prisma.$PickPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Picks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickCountArgs} args - Arguments to filter Picks to count.
     * @example
     * // Count the number of Picks
     * const count = await prisma.pick.count({
     *   where: {
     *     // ... the filter for the Picks we want to count
     *   }
     * })
    **/
    count<T extends PickCountArgs>(
      args?: Subset<T, PickCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PickCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pick.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PickAggregateArgs>(args: Subset<T, PickAggregateArgs>): Prisma.PrismaPromise<GetPickAggregateType<T>>

    /**
     * Group by Pick.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PickGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PickGroupByArgs['orderBy'] }
        : { orderBy?: PickGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PickGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPickGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pick model
   */
  readonly fields: PickFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pick.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PickClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    week<T extends WeekDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WeekDefaultArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    selectedTeam<T extends Pick$selectedTeamArgs<ExtArgs> = {}>(args?: Subset<T, Pick$selectedTeamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pick model
   */ 
  interface PickFieldRefs {
    readonly id: FieldRef<"Pick", 'String'>
    readonly userId: FieldRef<"Pick", 'String'>
    readonly weekId: FieldRef<"Pick", 'String'>
    readonly gameId: FieldRef<"Pick", 'String'>
    readonly selectedTeamId: FieldRef<"Pick", 'String'>
    readonly isHomeTeamPick: FieldRef<"Pick", 'Boolean'>
    readonly isCorrect: FieldRef<"Pick", 'Boolean'>
    readonly pointsAwarded: FieldRef<"Pick", 'Int'>
    readonly tiebreakerScore: FieldRef<"Pick", 'Int'>
    readonly tiebreakerDiff: FieldRef<"Pick", 'Int'>
    readonly submittedAt: FieldRef<"Pick", 'DateTime'>
    readonly updatedAt: FieldRef<"Pick", 'DateTime'>
    readonly lockedAt: FieldRef<"Pick", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Pick findUnique
   */
  export type PickFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Pick to fetch.
     */
    where: PickWhereUniqueInput
  }

  /**
   * Pick findUniqueOrThrow
   */
  export type PickFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Pick to fetch.
     */
    where: PickWhereUniqueInput
  }

  /**
   * Pick findFirst
   */
  export type PickFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Pick to fetch.
     */
    where?: PickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Picks.
     */
    cursor?: PickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Picks.
     */
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }

  /**
   * Pick findFirstOrThrow
   */
  export type PickFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Pick to fetch.
     */
    where?: PickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Picks.
     */
    cursor?: PickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Picks.
     */
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }

  /**
   * Pick findMany
   */
  export type PickFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter, which Picks to fetch.
     */
    where?: PickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Picks to fetch.
     */
    orderBy?: PickOrderByWithRelationInput | PickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Picks.
     */
    cursor?: PickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Picks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Picks.
     */
    skip?: number
    distinct?: PickScalarFieldEnum | PickScalarFieldEnum[]
  }

  /**
   * Pick create
   */
  export type PickCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * The data needed to create a Pick.
     */
    data: XOR<PickCreateInput, PickUncheckedCreateInput>
  }

  /**
   * Pick createMany
   */
  export type PickCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Picks.
     */
    data: PickCreateManyInput | PickCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pick createManyAndReturn
   */
  export type PickCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Picks.
     */
    data: PickCreateManyInput | PickCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pick update
   */
  export type PickUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * The data needed to update a Pick.
     */
    data: XOR<PickUpdateInput, PickUncheckedUpdateInput>
    /**
     * Choose, which Pick to update.
     */
    where: PickWhereUniqueInput
  }

  /**
   * Pick updateMany
   */
  export type PickUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Picks.
     */
    data: XOR<PickUpdateManyMutationInput, PickUncheckedUpdateManyInput>
    /**
     * Filter which Picks to update
     */
    where?: PickWhereInput
  }

  /**
   * Pick upsert
   */
  export type PickUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * The filter to search for the Pick to update in case it exists.
     */
    where: PickWhereUniqueInput
    /**
     * In case the Pick found by the `where` argument doesn't exist, create a new Pick with this data.
     */
    create: XOR<PickCreateInput, PickUncheckedCreateInput>
    /**
     * In case the Pick was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PickUpdateInput, PickUncheckedUpdateInput>
  }

  /**
   * Pick delete
   */
  export type PickDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
    /**
     * Filter which Pick to delete.
     */
    where: PickWhereUniqueInput
  }

  /**
   * Pick deleteMany
   */
  export type PickDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Picks to delete
     */
    where?: PickWhereInput
  }

  /**
   * Pick.selectedTeam
   */
  export type Pick$selectedTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Pick without action
   */
  export type PickDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pick
     */
    select?: PickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickInclude<ExtArgs> | null
  }


  /**
   * Model WeeklyResult
   */

  export type AggregateWeeklyResult = {
    _count: WeeklyResultCountAggregateOutputType | null
    _avg: WeeklyResultAvgAggregateOutputType | null
    _sum: WeeklyResultSumAggregateOutputType | null
    _min: WeeklyResultMinAggregateOutputType | null
    _max: WeeklyResultMaxAggregateOutputType | null
  }

  export type WeeklyResultAvgAggregateOutputType = {
    correctPicks: number | null
    totalPicks: number | null
    points: number | null
    weeklyRank: number | null
    accuracy: number | null
    streak: number | null
  }

  export type WeeklyResultSumAggregateOutputType = {
    correctPicks: number | null
    totalPicks: number | null
    points: number | null
    weeklyRank: number | null
    accuracy: number | null
    streak: number | null
  }

  export type WeeklyResultMinAggregateOutputType = {
    id: string | null
    userId: string | null
    weekId: string | null
    correctPicks: number | null
    totalPicks: number | null
    points: number | null
    weeklyRank: number | null
    tiebreakerUsed: boolean | null
    accuracy: number | null
    streak: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeeklyResultMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    weekId: string | null
    correctPicks: number | null
    totalPicks: number | null
    points: number | null
    weeklyRank: number | null
    tiebreakerUsed: boolean | null
    accuracy: number | null
    streak: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeeklyResultCountAggregateOutputType = {
    id: number
    userId: number
    weekId: number
    correctPicks: number
    totalPicks: number
    points: number
    weeklyRank: number
    tiebreakerUsed: number
    accuracy: number
    streak: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WeeklyResultAvgAggregateInputType = {
    correctPicks?: true
    totalPicks?: true
    points?: true
    weeklyRank?: true
    accuracy?: true
    streak?: true
  }

  export type WeeklyResultSumAggregateInputType = {
    correctPicks?: true
    totalPicks?: true
    points?: true
    weeklyRank?: true
    accuracy?: true
    streak?: true
  }

  export type WeeklyResultMinAggregateInputType = {
    id?: true
    userId?: true
    weekId?: true
    correctPicks?: true
    totalPicks?: true
    points?: true
    weeklyRank?: true
    tiebreakerUsed?: true
    accuracy?: true
    streak?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeeklyResultMaxAggregateInputType = {
    id?: true
    userId?: true
    weekId?: true
    correctPicks?: true
    totalPicks?: true
    points?: true
    weeklyRank?: true
    tiebreakerUsed?: true
    accuracy?: true
    streak?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeeklyResultCountAggregateInputType = {
    id?: true
    userId?: true
    weekId?: true
    correctPicks?: true
    totalPicks?: true
    points?: true
    weeklyRank?: true
    tiebreakerUsed?: true
    accuracy?: true
    streak?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WeeklyResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklyResult to aggregate.
     */
    where?: WeeklyResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyResults to fetch.
     */
    orderBy?: WeeklyResultOrderByWithRelationInput | WeeklyResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeeklyResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeeklyResults
    **/
    _count?: true | WeeklyResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeeklyResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeeklyResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeeklyResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeeklyResultMaxAggregateInputType
  }

  export type GetWeeklyResultAggregateType<T extends WeeklyResultAggregateArgs> = {
        [P in keyof T & keyof AggregateWeeklyResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeeklyResult[P]>
      : GetScalarType<T[P], AggregateWeeklyResult[P]>
  }




  export type WeeklyResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyResultWhereInput
    orderBy?: WeeklyResultOrderByWithAggregationInput | WeeklyResultOrderByWithAggregationInput[]
    by: WeeklyResultScalarFieldEnum[] | WeeklyResultScalarFieldEnum
    having?: WeeklyResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeeklyResultCountAggregateInputType | true
    _avg?: WeeklyResultAvgAggregateInputType
    _sum?: WeeklyResultSumAggregateInputType
    _min?: WeeklyResultMinAggregateInputType
    _max?: WeeklyResultMaxAggregateInputType
  }

  export type WeeklyResultGroupByOutputType = {
    id: string
    userId: string
    weekId: string
    correctPicks: number
    totalPicks: number
    points: number
    weeklyRank: number | null
    tiebreakerUsed: boolean
    accuracy: number | null
    streak: number
    createdAt: Date
    updatedAt: Date
    _count: WeeklyResultCountAggregateOutputType | null
    _avg: WeeklyResultAvgAggregateOutputType | null
    _sum: WeeklyResultSumAggregateOutputType | null
    _min: WeeklyResultMinAggregateOutputType | null
    _max: WeeklyResultMaxAggregateOutputType | null
  }

  type GetWeeklyResultGroupByPayload<T extends WeeklyResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeeklyResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeeklyResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeeklyResultGroupByOutputType[P]>
            : GetScalarType<T[P], WeeklyResultGroupByOutputType[P]>
        }
      >
    >


  export type WeeklyResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weekId?: boolean
    correctPicks?: boolean
    totalPicks?: boolean
    points?: boolean
    weeklyRank?: boolean
    tiebreakerUsed?: boolean
    accuracy?: boolean
    streak?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    week?: boolean | WeekDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklyResult"]>

  export type WeeklyResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weekId?: boolean
    correctPicks?: boolean
    totalPicks?: boolean
    points?: boolean
    weeklyRank?: boolean
    tiebreakerUsed?: boolean
    accuracy?: boolean
    streak?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    week?: boolean | WeekDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklyResult"]>

  export type WeeklyResultSelectScalar = {
    id?: boolean
    userId?: boolean
    weekId?: boolean
    correctPicks?: boolean
    totalPicks?: boolean
    points?: boolean
    weeklyRank?: boolean
    tiebreakerUsed?: boolean
    accuracy?: boolean
    streak?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WeeklyResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    week?: boolean | WeekDefaultArgs<ExtArgs>
  }
  export type WeeklyResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    week?: boolean | WeekDefaultArgs<ExtArgs>
  }

  export type $WeeklyResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeeklyResult"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      week: Prisma.$WeekPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      weekId: string
      correctPicks: number
      totalPicks: number
      points: number
      weeklyRank: number | null
      tiebreakerUsed: boolean
      accuracy: number | null
      streak: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["weeklyResult"]>
    composites: {}
  }

  type WeeklyResultGetPayload<S extends boolean | null | undefined | WeeklyResultDefaultArgs> = $Result.GetResult<Prisma.$WeeklyResultPayload, S>

  type WeeklyResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeeklyResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeeklyResultCountAggregateInputType | true
    }

  export interface WeeklyResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeeklyResult'], meta: { name: 'WeeklyResult' } }
    /**
     * Find zero or one WeeklyResult that matches the filter.
     * @param {WeeklyResultFindUniqueArgs} args - Arguments to find a WeeklyResult
     * @example
     * // Get one WeeklyResult
     * const weeklyResult = await prisma.weeklyResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeeklyResultFindUniqueArgs>(args: SelectSubset<T, WeeklyResultFindUniqueArgs<ExtArgs>>): Prisma__WeeklyResultClient<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WeeklyResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WeeklyResultFindUniqueOrThrowArgs} args - Arguments to find a WeeklyResult
     * @example
     * // Get one WeeklyResult
     * const weeklyResult = await prisma.weeklyResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeeklyResultFindUniqueOrThrowArgs>(args: SelectSubset<T, WeeklyResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeeklyResultClient<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WeeklyResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyResultFindFirstArgs} args - Arguments to find a WeeklyResult
     * @example
     * // Get one WeeklyResult
     * const weeklyResult = await prisma.weeklyResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeeklyResultFindFirstArgs>(args?: SelectSubset<T, WeeklyResultFindFirstArgs<ExtArgs>>): Prisma__WeeklyResultClient<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WeeklyResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyResultFindFirstOrThrowArgs} args - Arguments to find a WeeklyResult
     * @example
     * // Get one WeeklyResult
     * const weeklyResult = await prisma.weeklyResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeeklyResultFindFirstOrThrowArgs>(args?: SelectSubset<T, WeeklyResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeeklyResultClient<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WeeklyResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeeklyResults
     * const weeklyResults = await prisma.weeklyResult.findMany()
     * 
     * // Get first 10 WeeklyResults
     * const weeklyResults = await prisma.weeklyResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weeklyResultWithIdOnly = await prisma.weeklyResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeeklyResultFindManyArgs>(args?: SelectSubset<T, WeeklyResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WeeklyResult.
     * @param {WeeklyResultCreateArgs} args - Arguments to create a WeeklyResult.
     * @example
     * // Create one WeeklyResult
     * const WeeklyResult = await prisma.weeklyResult.create({
     *   data: {
     *     // ... data to create a WeeklyResult
     *   }
     * })
     * 
     */
    create<T extends WeeklyResultCreateArgs>(args: SelectSubset<T, WeeklyResultCreateArgs<ExtArgs>>): Prisma__WeeklyResultClient<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WeeklyResults.
     * @param {WeeklyResultCreateManyArgs} args - Arguments to create many WeeklyResults.
     * @example
     * // Create many WeeklyResults
     * const weeklyResult = await prisma.weeklyResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeeklyResultCreateManyArgs>(args?: SelectSubset<T, WeeklyResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeeklyResults and returns the data saved in the database.
     * @param {WeeklyResultCreateManyAndReturnArgs} args - Arguments to create many WeeklyResults.
     * @example
     * // Create many WeeklyResults
     * const weeklyResult = await prisma.weeklyResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeeklyResults and only return the `id`
     * const weeklyResultWithIdOnly = await prisma.weeklyResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeeklyResultCreateManyAndReturnArgs>(args?: SelectSubset<T, WeeklyResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WeeklyResult.
     * @param {WeeklyResultDeleteArgs} args - Arguments to delete one WeeklyResult.
     * @example
     * // Delete one WeeklyResult
     * const WeeklyResult = await prisma.weeklyResult.delete({
     *   where: {
     *     // ... filter to delete one WeeklyResult
     *   }
     * })
     * 
     */
    delete<T extends WeeklyResultDeleteArgs>(args: SelectSubset<T, WeeklyResultDeleteArgs<ExtArgs>>): Prisma__WeeklyResultClient<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WeeklyResult.
     * @param {WeeklyResultUpdateArgs} args - Arguments to update one WeeklyResult.
     * @example
     * // Update one WeeklyResult
     * const weeklyResult = await prisma.weeklyResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeeklyResultUpdateArgs>(args: SelectSubset<T, WeeklyResultUpdateArgs<ExtArgs>>): Prisma__WeeklyResultClient<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WeeklyResults.
     * @param {WeeklyResultDeleteManyArgs} args - Arguments to filter WeeklyResults to delete.
     * @example
     * // Delete a few WeeklyResults
     * const { count } = await prisma.weeklyResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeeklyResultDeleteManyArgs>(args?: SelectSubset<T, WeeklyResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeeklyResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeeklyResults
     * const weeklyResult = await prisma.weeklyResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeeklyResultUpdateManyArgs>(args: SelectSubset<T, WeeklyResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeeklyResult.
     * @param {WeeklyResultUpsertArgs} args - Arguments to update or create a WeeklyResult.
     * @example
     * // Update or create a WeeklyResult
     * const weeklyResult = await prisma.weeklyResult.upsert({
     *   create: {
     *     // ... data to create a WeeklyResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeeklyResult we want to update
     *   }
     * })
     */
    upsert<T extends WeeklyResultUpsertArgs>(args: SelectSubset<T, WeeklyResultUpsertArgs<ExtArgs>>): Prisma__WeeklyResultClient<$Result.GetResult<Prisma.$WeeklyResultPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WeeklyResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyResultCountArgs} args - Arguments to filter WeeklyResults to count.
     * @example
     * // Count the number of WeeklyResults
     * const count = await prisma.weeklyResult.count({
     *   where: {
     *     // ... the filter for the WeeklyResults we want to count
     *   }
     * })
    **/
    count<T extends WeeklyResultCountArgs>(
      args?: Subset<T, WeeklyResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeeklyResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeeklyResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeeklyResultAggregateArgs>(args: Subset<T, WeeklyResultAggregateArgs>): Prisma.PrismaPromise<GetWeeklyResultAggregateType<T>>

    /**
     * Group by WeeklyResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeeklyResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeeklyResultGroupByArgs['orderBy'] }
        : { orderBy?: WeeklyResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeeklyResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeeklyResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeeklyResult model
   */
  readonly fields: WeeklyResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeeklyResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeeklyResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    week<T extends WeekDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WeekDefaultArgs<ExtArgs>>): Prisma__WeekClient<$Result.GetResult<Prisma.$WeekPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WeeklyResult model
   */ 
  interface WeeklyResultFieldRefs {
    readonly id: FieldRef<"WeeklyResult", 'String'>
    readonly userId: FieldRef<"WeeklyResult", 'String'>
    readonly weekId: FieldRef<"WeeklyResult", 'String'>
    readonly correctPicks: FieldRef<"WeeklyResult", 'Int'>
    readonly totalPicks: FieldRef<"WeeklyResult", 'Int'>
    readonly points: FieldRef<"WeeklyResult", 'Int'>
    readonly weeklyRank: FieldRef<"WeeklyResult", 'Int'>
    readonly tiebreakerUsed: FieldRef<"WeeklyResult", 'Boolean'>
    readonly accuracy: FieldRef<"WeeklyResult", 'Float'>
    readonly streak: FieldRef<"WeeklyResult", 'Int'>
    readonly createdAt: FieldRef<"WeeklyResult", 'DateTime'>
    readonly updatedAt: FieldRef<"WeeklyResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WeeklyResult findUnique
   */
  export type WeeklyResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyResult to fetch.
     */
    where: WeeklyResultWhereUniqueInput
  }

  /**
   * WeeklyResult findUniqueOrThrow
   */
  export type WeeklyResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyResult to fetch.
     */
    where: WeeklyResultWhereUniqueInput
  }

  /**
   * WeeklyResult findFirst
   */
  export type WeeklyResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyResult to fetch.
     */
    where?: WeeklyResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyResults to fetch.
     */
    orderBy?: WeeklyResultOrderByWithRelationInput | WeeklyResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklyResults.
     */
    cursor?: WeeklyResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklyResults.
     */
    distinct?: WeeklyResultScalarFieldEnum | WeeklyResultScalarFieldEnum[]
  }

  /**
   * WeeklyResult findFirstOrThrow
   */
  export type WeeklyResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyResult to fetch.
     */
    where?: WeeklyResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyResults to fetch.
     */
    orderBy?: WeeklyResultOrderByWithRelationInput | WeeklyResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklyResults.
     */
    cursor?: WeeklyResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklyResults.
     */
    distinct?: WeeklyResultScalarFieldEnum | WeeklyResultScalarFieldEnum[]
  }

  /**
   * WeeklyResult findMany
   */
  export type WeeklyResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyResults to fetch.
     */
    where?: WeeklyResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyResults to fetch.
     */
    orderBy?: WeeklyResultOrderByWithRelationInput | WeeklyResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeeklyResults.
     */
    cursor?: WeeklyResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyResults.
     */
    skip?: number
    distinct?: WeeklyResultScalarFieldEnum | WeeklyResultScalarFieldEnum[]
  }

  /**
   * WeeklyResult create
   */
  export type WeeklyResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * The data needed to create a WeeklyResult.
     */
    data: XOR<WeeklyResultCreateInput, WeeklyResultUncheckedCreateInput>
  }

  /**
   * WeeklyResult createMany
   */
  export type WeeklyResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeeklyResults.
     */
    data: WeeklyResultCreateManyInput | WeeklyResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeeklyResult createManyAndReturn
   */
  export type WeeklyResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WeeklyResults.
     */
    data: WeeklyResultCreateManyInput | WeeklyResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeeklyResult update
   */
  export type WeeklyResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * The data needed to update a WeeklyResult.
     */
    data: XOR<WeeklyResultUpdateInput, WeeklyResultUncheckedUpdateInput>
    /**
     * Choose, which WeeklyResult to update.
     */
    where: WeeklyResultWhereUniqueInput
  }

  /**
   * WeeklyResult updateMany
   */
  export type WeeklyResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeeklyResults.
     */
    data: XOR<WeeklyResultUpdateManyMutationInput, WeeklyResultUncheckedUpdateManyInput>
    /**
     * Filter which WeeklyResults to update
     */
    where?: WeeklyResultWhereInput
  }

  /**
   * WeeklyResult upsert
   */
  export type WeeklyResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * The filter to search for the WeeklyResult to update in case it exists.
     */
    where: WeeklyResultWhereUniqueInput
    /**
     * In case the WeeklyResult found by the `where` argument doesn't exist, create a new WeeklyResult with this data.
     */
    create: XOR<WeeklyResultCreateInput, WeeklyResultUncheckedCreateInput>
    /**
     * In case the WeeklyResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeeklyResultUpdateInput, WeeklyResultUncheckedUpdateInput>
  }

  /**
   * WeeklyResult delete
   */
  export type WeeklyResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
    /**
     * Filter which WeeklyResult to delete.
     */
    where: WeeklyResultWhereUniqueInput
  }

  /**
   * WeeklyResult deleteMany
   */
  export type WeeklyResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklyResults to delete
     */
    where?: WeeklyResultWhereInput
  }

  /**
   * WeeklyResult without action
   */
  export type WeeklyResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyResult
     */
    select?: WeeklyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyResultInclude<ExtArgs> | null
  }


  /**
   * Model League
   */

  export type AggregateLeague = {
    _count: LeagueCountAggregateOutputType | null
    _avg: LeagueAvgAggregateOutputType | null
    _sum: LeagueSumAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  export type LeagueAvgAggregateOutputType = {
    maxMembers: number | null
  }

  export type LeagueSumAggregateOutputType = {
    maxMembers: number | null
  }

  export type LeagueMinAggregateOutputType = {
    id: string | null
    seasonId: string | null
    name: string | null
    description: string | null
    code: string | null
    isPrivate: boolean | null
    maxMembers: number | null
    allowLateJoin: boolean | null
    scoringSystem: $Enums.ScoringSystem | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LeagueMaxAggregateOutputType = {
    id: string | null
    seasonId: string | null
    name: string | null
    description: string | null
    code: string | null
    isPrivate: boolean | null
    maxMembers: number | null
    allowLateJoin: boolean | null
    scoringSystem: $Enums.ScoringSystem | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LeagueCountAggregateOutputType = {
    id: number
    seasonId: number
    name: number
    description: number
    code: number
    isPrivate: number
    maxMembers: number
    allowLateJoin: number
    scoringSystem: number
    createdById: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type LeagueAvgAggregateInputType = {
    maxMembers?: true
  }

  export type LeagueSumAggregateInputType = {
    maxMembers?: true
  }

  export type LeagueMinAggregateInputType = {
    id?: true
    seasonId?: true
    name?: true
    description?: true
    code?: true
    isPrivate?: true
    maxMembers?: true
    allowLateJoin?: true
    scoringSystem?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeagueMaxAggregateInputType = {
    id?: true
    seasonId?: true
    name?: true
    description?: true
    code?: true
    isPrivate?: true
    maxMembers?: true
    allowLateJoin?: true
    scoringSystem?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeagueCountAggregateInputType = {
    id?: true
    seasonId?: true
    name?: true
    description?: true
    code?: true
    isPrivate?: true
    maxMembers?: true
    allowLateJoin?: true
    scoringSystem?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type LeagueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which League to aggregate.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leagues
    **/
    _count?: true | LeagueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeagueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeagueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeagueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeagueMaxAggregateInputType
  }

  export type GetLeagueAggregateType<T extends LeagueAggregateArgs> = {
        [P in keyof T & keyof AggregateLeague]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeague[P]>
      : GetScalarType<T[P], AggregateLeague[P]>
  }




  export type LeagueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithAggregationInput | LeagueOrderByWithAggregationInput[]
    by: LeagueScalarFieldEnum[] | LeagueScalarFieldEnum
    having?: LeagueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeagueCountAggregateInputType | true
    _avg?: LeagueAvgAggregateInputType
    _sum?: LeagueSumAggregateInputType
    _min?: LeagueMinAggregateInputType
    _max?: LeagueMaxAggregateInputType
  }

  export type LeagueGroupByOutputType = {
    id: string
    seasonId: string
    name: string
    description: string | null
    code: string
    isPrivate: boolean
    maxMembers: number | null
    allowLateJoin: boolean
    scoringSystem: $Enums.ScoringSystem
    createdById: string
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: LeagueCountAggregateOutputType | null
    _avg: LeagueAvgAggregateOutputType | null
    _sum: LeagueSumAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  type GetLeagueGroupByPayload<T extends LeagueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeagueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeagueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeagueGroupByOutputType[P]>
            : GetScalarType<T[P], LeagueGroupByOutputType[P]>
        }
      >
    >


  export type LeagueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seasonId?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    isPrivate?: boolean
    maxMembers?: boolean
    allowLateJoin?: boolean
    scoringSystem?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | League$membersArgs<ExtArgs>
    messages?: boolean | League$messagesArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seasonId?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    isPrivate?: boolean
    maxMembers?: boolean
    allowLateJoin?: boolean
    scoringSystem?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectScalar = {
    id?: boolean
    seasonId?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    isPrivate?: boolean
    maxMembers?: boolean
    allowLateJoin?: boolean
    scoringSystem?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type LeagueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | League$membersArgs<ExtArgs>
    messages?: boolean | League$messagesArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeagueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LeaguePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "League"
    objects: {
      season: Prisma.$SeasonPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      members: Prisma.$UserLeaguePayload<ExtArgs>[]
      messages: Prisma.$LeagueMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      seasonId: string
      name: string
      description: string | null
      code: string
      isPrivate: boolean
      maxMembers: number | null
      allowLateJoin: boolean
      scoringSystem: $Enums.ScoringSystem
      createdById: string
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["league"]>
    composites: {}
  }

  type LeagueGetPayload<S extends boolean | null | undefined | LeagueDefaultArgs> = $Result.GetResult<Prisma.$LeaguePayload, S>

  type LeagueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeagueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeagueCountAggregateInputType | true
    }

  export interface LeagueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['League'], meta: { name: 'League' } }
    /**
     * Find zero or one League that matches the filter.
     * @param {LeagueFindUniqueArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeagueFindUniqueArgs>(args: SelectSubset<T, LeagueFindUniqueArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one League that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeagueFindUniqueOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeagueFindUniqueOrThrowArgs>(args: SelectSubset<T, LeagueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first League that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeagueFindFirstArgs>(args?: SelectSubset<T, LeagueFindFirstArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first League that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeagueFindFirstOrThrowArgs>(args?: SelectSubset<T, LeagueFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Leagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leagues
     * const leagues = await prisma.league.findMany()
     * 
     * // Get first 10 Leagues
     * const leagues = await prisma.league.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leagueWithIdOnly = await prisma.league.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeagueFindManyArgs>(args?: SelectSubset<T, LeagueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a League.
     * @param {LeagueCreateArgs} args - Arguments to create a League.
     * @example
     * // Create one League
     * const League = await prisma.league.create({
     *   data: {
     *     // ... data to create a League
     *   }
     * })
     * 
     */
    create<T extends LeagueCreateArgs>(args: SelectSubset<T, LeagueCreateArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Leagues.
     * @param {LeagueCreateManyArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeagueCreateManyArgs>(args?: SelectSubset<T, LeagueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leagues and returns the data saved in the database.
     * @param {LeagueCreateManyAndReturnArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leagues and only return the `id`
     * const leagueWithIdOnly = await prisma.league.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeagueCreateManyAndReturnArgs>(args?: SelectSubset<T, LeagueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a League.
     * @param {LeagueDeleteArgs} args - Arguments to delete one League.
     * @example
     * // Delete one League
     * const League = await prisma.league.delete({
     *   where: {
     *     // ... filter to delete one League
     *   }
     * })
     * 
     */
    delete<T extends LeagueDeleteArgs>(args: SelectSubset<T, LeagueDeleteArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one League.
     * @param {LeagueUpdateArgs} args - Arguments to update one League.
     * @example
     * // Update one League
     * const league = await prisma.league.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeagueUpdateArgs>(args: SelectSubset<T, LeagueUpdateArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Leagues.
     * @param {LeagueDeleteManyArgs} args - Arguments to filter Leagues to delete.
     * @example
     * // Delete a few Leagues
     * const { count } = await prisma.league.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeagueDeleteManyArgs>(args?: SelectSubset<T, LeagueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leagues
     * const league = await prisma.league.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeagueUpdateManyArgs>(args: SelectSubset<T, LeagueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one League.
     * @param {LeagueUpsertArgs} args - Arguments to update or create a League.
     * @example
     * // Update or create a League
     * const league = await prisma.league.upsert({
     *   create: {
     *     // ... data to create a League
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the League we want to update
     *   }
     * })
     */
    upsert<T extends LeagueUpsertArgs>(args: SelectSubset<T, LeagueUpsertArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueCountArgs} args - Arguments to filter Leagues to count.
     * @example
     * // Count the number of Leagues
     * const count = await prisma.league.count({
     *   where: {
     *     // ... the filter for the Leagues we want to count
     *   }
     * })
    **/
    count<T extends LeagueCountArgs>(
      args?: Subset<T, LeagueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeagueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeagueAggregateArgs>(args: Subset<T, LeagueAggregateArgs>): Prisma.PrismaPromise<GetLeagueAggregateType<T>>

    /**
     * Group by League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeagueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeagueGroupByArgs['orderBy'] }
        : { orderBy?: LeagueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeagueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeagueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the League model
   */
  readonly fields: LeagueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for League.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeagueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    season<T extends SeasonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeasonDefaultArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    members<T extends League$membersArgs<ExtArgs> = {}>(args?: Subset<T, League$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends League$messagesArgs<ExtArgs> = {}>(args?: Subset<T, League$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the League model
   */ 
  interface LeagueFieldRefs {
    readonly id: FieldRef<"League", 'String'>
    readonly seasonId: FieldRef<"League", 'String'>
    readonly name: FieldRef<"League", 'String'>
    readonly description: FieldRef<"League", 'String'>
    readonly code: FieldRef<"League", 'String'>
    readonly isPrivate: FieldRef<"League", 'Boolean'>
    readonly maxMembers: FieldRef<"League", 'Int'>
    readonly allowLateJoin: FieldRef<"League", 'Boolean'>
    readonly scoringSystem: FieldRef<"League", 'ScoringSystem'>
    readonly createdById: FieldRef<"League", 'String'>
    readonly createdAt: FieldRef<"League", 'DateTime'>
    readonly updatedAt: FieldRef<"League", 'DateTime'>
    readonly deletedAt: FieldRef<"League", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * League findUnique
   */
  export type LeagueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findUniqueOrThrow
   */
  export type LeagueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findFirst
   */
  export type LeagueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findFirstOrThrow
   */
  export type LeagueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findMany
   */
  export type LeagueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League create
   */
  export type LeagueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to create a League.
     */
    data: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
  }

  /**
   * League createMany
   */
  export type LeagueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * League createManyAndReturn
   */
  export type LeagueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * League update
   */
  export type LeagueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to update a League.
     */
    data: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
    /**
     * Choose, which League to update.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League updateMany
   */
  export type LeagueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leagues.
     */
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyInput>
    /**
     * Filter which Leagues to update
     */
    where?: LeagueWhereInput
  }

  /**
   * League upsert
   */
  export type LeagueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The filter to search for the League to update in case it exists.
     */
    where: LeagueWhereUniqueInput
    /**
     * In case the League found by the `where` argument doesn't exist, create a new League with this data.
     */
    create: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
    /**
     * In case the League was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
  }

  /**
   * League delete
   */
  export type LeagueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter which League to delete.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League deleteMany
   */
  export type LeagueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leagues to delete
     */
    where?: LeagueWhereInput
  }

  /**
   * League.members
   */
  export type League$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    where?: UserLeagueWhereInput
    orderBy?: UserLeagueOrderByWithRelationInput | UserLeagueOrderByWithRelationInput[]
    cursor?: UserLeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLeagueScalarFieldEnum | UserLeagueScalarFieldEnum[]
  }

  /**
   * League.messages
   */
  export type League$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    where?: LeagueMessageWhereInput
    orderBy?: LeagueMessageOrderByWithRelationInput | LeagueMessageOrderByWithRelationInput[]
    cursor?: LeagueMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueMessageScalarFieldEnum | LeagueMessageScalarFieldEnum[]
  }

  /**
   * League without action
   */
  export type LeagueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
  }


  /**
   * Model UserLeague
   */

  export type AggregateUserLeague = {
    _count: UserLeagueCountAggregateOutputType | null
    _avg: UserLeagueAvgAggregateOutputType | null
    _sum: UserLeagueSumAggregateOutputType | null
    _min: UserLeagueMinAggregateOutputType | null
    _max: UserLeagueMaxAggregateOutputType | null
  }

  export type UserLeagueAvgAggregateOutputType = {
    totalPoints: number | null
    totalCorrectPicks: number | null
    currentRank: number | null
  }

  export type UserLeagueSumAggregateOutputType = {
    totalPoints: number | null
    totalCorrectPicks: number | null
    currentRank: number | null
  }

  export type UserLeagueMinAggregateOutputType = {
    id: string | null
    userId: string | null
    leagueId: string | null
    role: $Enums.LeagueRole | null
    status: $Enums.MemberStatus | null
    totalPoints: number | null
    totalCorrectPicks: number | null
    currentRank: number | null
    joinedAt: Date | null
    lastActiveAt: Date | null
  }

  export type UserLeagueMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    leagueId: string | null
    role: $Enums.LeagueRole | null
    status: $Enums.MemberStatus | null
    totalPoints: number | null
    totalCorrectPicks: number | null
    currentRank: number | null
    joinedAt: Date | null
    lastActiveAt: Date | null
  }

  export type UserLeagueCountAggregateOutputType = {
    id: number
    userId: number
    leagueId: number
    role: number
    status: number
    totalPoints: number
    totalCorrectPicks: number
    currentRank: number
    joinedAt: number
    lastActiveAt: number
    _all: number
  }


  export type UserLeagueAvgAggregateInputType = {
    totalPoints?: true
    totalCorrectPicks?: true
    currentRank?: true
  }

  export type UserLeagueSumAggregateInputType = {
    totalPoints?: true
    totalCorrectPicks?: true
    currentRank?: true
  }

  export type UserLeagueMinAggregateInputType = {
    id?: true
    userId?: true
    leagueId?: true
    role?: true
    status?: true
    totalPoints?: true
    totalCorrectPicks?: true
    currentRank?: true
    joinedAt?: true
    lastActiveAt?: true
  }

  export type UserLeagueMaxAggregateInputType = {
    id?: true
    userId?: true
    leagueId?: true
    role?: true
    status?: true
    totalPoints?: true
    totalCorrectPicks?: true
    currentRank?: true
    joinedAt?: true
    lastActiveAt?: true
  }

  export type UserLeagueCountAggregateInputType = {
    id?: true
    userId?: true
    leagueId?: true
    role?: true
    status?: true
    totalPoints?: true
    totalCorrectPicks?: true
    currentRank?: true
    joinedAt?: true
    lastActiveAt?: true
    _all?: true
  }

  export type UserLeagueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLeague to aggregate.
     */
    where?: UserLeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeagues to fetch.
     */
    orderBy?: UserLeagueOrderByWithRelationInput | UserLeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLeagues
    **/
    _count?: true | UserLeagueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLeagueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLeagueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLeagueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLeagueMaxAggregateInputType
  }

  export type GetUserLeagueAggregateType<T extends UserLeagueAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLeague]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLeague[P]>
      : GetScalarType<T[P], AggregateUserLeague[P]>
  }




  export type UserLeagueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLeagueWhereInput
    orderBy?: UserLeagueOrderByWithAggregationInput | UserLeagueOrderByWithAggregationInput[]
    by: UserLeagueScalarFieldEnum[] | UserLeagueScalarFieldEnum
    having?: UserLeagueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLeagueCountAggregateInputType | true
    _avg?: UserLeagueAvgAggregateInputType
    _sum?: UserLeagueSumAggregateInputType
    _min?: UserLeagueMinAggregateInputType
    _max?: UserLeagueMaxAggregateInputType
  }

  export type UserLeagueGroupByOutputType = {
    id: string
    userId: string
    leagueId: string
    role: $Enums.LeagueRole
    status: $Enums.MemberStatus
    totalPoints: number
    totalCorrectPicks: number
    currentRank: number | null
    joinedAt: Date
    lastActiveAt: Date
    _count: UserLeagueCountAggregateOutputType | null
    _avg: UserLeagueAvgAggregateOutputType | null
    _sum: UserLeagueSumAggregateOutputType | null
    _min: UserLeagueMinAggregateOutputType | null
    _max: UserLeagueMaxAggregateOutputType | null
  }

  type GetUserLeagueGroupByPayload<T extends UserLeagueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLeagueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLeagueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLeagueGroupByOutputType[P]>
            : GetScalarType<T[P], UserLeagueGroupByOutputType[P]>
        }
      >
    >


  export type UserLeagueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    leagueId?: boolean
    role?: boolean
    status?: boolean
    totalPoints?: boolean
    totalCorrectPicks?: boolean
    currentRank?: boolean
    joinedAt?: boolean
    lastActiveAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLeague"]>

  export type UserLeagueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    leagueId?: boolean
    role?: boolean
    status?: boolean
    totalPoints?: boolean
    totalCorrectPicks?: boolean
    currentRank?: boolean
    joinedAt?: boolean
    lastActiveAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLeague"]>

  export type UserLeagueSelectScalar = {
    id?: boolean
    userId?: boolean
    leagueId?: boolean
    role?: boolean
    status?: boolean
    totalPoints?: boolean
    totalCorrectPicks?: boolean
    currentRank?: boolean
    joinedAt?: boolean
    lastActiveAt?: boolean
  }

  export type UserLeagueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }
  export type UserLeagueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }

  export type $UserLeaguePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLeague"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      league: Prisma.$LeaguePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      leagueId: string
      role: $Enums.LeagueRole
      status: $Enums.MemberStatus
      totalPoints: number
      totalCorrectPicks: number
      currentRank: number | null
      joinedAt: Date
      lastActiveAt: Date
    }, ExtArgs["result"]["userLeague"]>
    composites: {}
  }

  type UserLeagueGetPayload<S extends boolean | null | undefined | UserLeagueDefaultArgs> = $Result.GetResult<Prisma.$UserLeaguePayload, S>

  type UserLeagueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserLeagueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserLeagueCountAggregateInputType | true
    }

  export interface UserLeagueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLeague'], meta: { name: 'UserLeague' } }
    /**
     * Find zero or one UserLeague that matches the filter.
     * @param {UserLeagueFindUniqueArgs} args - Arguments to find a UserLeague
     * @example
     * // Get one UserLeague
     * const userLeague = await prisma.userLeague.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLeagueFindUniqueArgs>(args: SelectSubset<T, UserLeagueFindUniqueArgs<ExtArgs>>): Prisma__UserLeagueClient<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserLeague that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserLeagueFindUniqueOrThrowArgs} args - Arguments to find a UserLeague
     * @example
     * // Get one UserLeague
     * const userLeague = await prisma.userLeague.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLeagueFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLeagueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLeagueClient<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserLeague that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeagueFindFirstArgs} args - Arguments to find a UserLeague
     * @example
     * // Get one UserLeague
     * const userLeague = await prisma.userLeague.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLeagueFindFirstArgs>(args?: SelectSubset<T, UserLeagueFindFirstArgs<ExtArgs>>): Prisma__UserLeagueClient<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserLeague that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeagueFindFirstOrThrowArgs} args - Arguments to find a UserLeague
     * @example
     * // Get one UserLeague
     * const userLeague = await prisma.userLeague.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLeagueFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLeagueFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLeagueClient<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserLeagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeagueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLeagues
     * const userLeagues = await prisma.userLeague.findMany()
     * 
     * // Get first 10 UserLeagues
     * const userLeagues = await prisma.userLeague.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLeagueWithIdOnly = await prisma.userLeague.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserLeagueFindManyArgs>(args?: SelectSubset<T, UserLeagueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserLeague.
     * @param {UserLeagueCreateArgs} args - Arguments to create a UserLeague.
     * @example
     * // Create one UserLeague
     * const UserLeague = await prisma.userLeague.create({
     *   data: {
     *     // ... data to create a UserLeague
     *   }
     * })
     * 
     */
    create<T extends UserLeagueCreateArgs>(args: SelectSubset<T, UserLeagueCreateArgs<ExtArgs>>): Prisma__UserLeagueClient<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserLeagues.
     * @param {UserLeagueCreateManyArgs} args - Arguments to create many UserLeagues.
     * @example
     * // Create many UserLeagues
     * const userLeague = await prisma.userLeague.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLeagueCreateManyArgs>(args?: SelectSubset<T, UserLeagueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserLeagues and returns the data saved in the database.
     * @param {UserLeagueCreateManyAndReturnArgs} args - Arguments to create many UserLeagues.
     * @example
     * // Create many UserLeagues
     * const userLeague = await prisma.userLeague.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserLeagues and only return the `id`
     * const userLeagueWithIdOnly = await prisma.userLeague.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserLeagueCreateManyAndReturnArgs>(args?: SelectSubset<T, UserLeagueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserLeague.
     * @param {UserLeagueDeleteArgs} args - Arguments to delete one UserLeague.
     * @example
     * // Delete one UserLeague
     * const UserLeague = await prisma.userLeague.delete({
     *   where: {
     *     // ... filter to delete one UserLeague
     *   }
     * })
     * 
     */
    delete<T extends UserLeagueDeleteArgs>(args: SelectSubset<T, UserLeagueDeleteArgs<ExtArgs>>): Prisma__UserLeagueClient<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserLeague.
     * @param {UserLeagueUpdateArgs} args - Arguments to update one UserLeague.
     * @example
     * // Update one UserLeague
     * const userLeague = await prisma.userLeague.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLeagueUpdateArgs>(args: SelectSubset<T, UserLeagueUpdateArgs<ExtArgs>>): Prisma__UserLeagueClient<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserLeagues.
     * @param {UserLeagueDeleteManyArgs} args - Arguments to filter UserLeagues to delete.
     * @example
     * // Delete a few UserLeagues
     * const { count } = await prisma.userLeague.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLeagueDeleteManyArgs>(args?: SelectSubset<T, UserLeagueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLeagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeagueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLeagues
     * const userLeague = await prisma.userLeague.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLeagueUpdateManyArgs>(args: SelectSubset<T, UserLeagueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLeague.
     * @param {UserLeagueUpsertArgs} args - Arguments to update or create a UserLeague.
     * @example
     * // Update or create a UserLeague
     * const userLeague = await prisma.userLeague.upsert({
     *   create: {
     *     // ... data to create a UserLeague
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLeague we want to update
     *   }
     * })
     */
    upsert<T extends UserLeagueUpsertArgs>(args: SelectSubset<T, UserLeagueUpsertArgs<ExtArgs>>): Prisma__UserLeagueClient<$Result.GetResult<Prisma.$UserLeaguePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserLeagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeagueCountArgs} args - Arguments to filter UserLeagues to count.
     * @example
     * // Count the number of UserLeagues
     * const count = await prisma.userLeague.count({
     *   where: {
     *     // ... the filter for the UserLeagues we want to count
     *   }
     * })
    **/
    count<T extends UserLeagueCountArgs>(
      args?: Subset<T, UserLeagueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLeagueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLeague.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeagueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLeagueAggregateArgs>(args: Subset<T, UserLeagueAggregateArgs>): Prisma.PrismaPromise<GetUserLeagueAggregateType<T>>

    /**
     * Group by UserLeague.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeagueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLeagueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLeagueGroupByArgs['orderBy'] }
        : { orderBy?: UserLeagueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLeagueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLeagueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLeague model
   */
  readonly fields: UserLeagueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLeague.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLeagueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLeague model
   */ 
  interface UserLeagueFieldRefs {
    readonly id: FieldRef<"UserLeague", 'String'>
    readonly userId: FieldRef<"UserLeague", 'String'>
    readonly leagueId: FieldRef<"UserLeague", 'String'>
    readonly role: FieldRef<"UserLeague", 'LeagueRole'>
    readonly status: FieldRef<"UserLeague", 'MemberStatus'>
    readonly totalPoints: FieldRef<"UserLeague", 'Int'>
    readonly totalCorrectPicks: FieldRef<"UserLeague", 'Int'>
    readonly currentRank: FieldRef<"UserLeague", 'Int'>
    readonly joinedAt: FieldRef<"UserLeague", 'DateTime'>
    readonly lastActiveAt: FieldRef<"UserLeague", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserLeague findUnique
   */
  export type UserLeagueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * Filter, which UserLeague to fetch.
     */
    where: UserLeagueWhereUniqueInput
  }

  /**
   * UserLeague findUniqueOrThrow
   */
  export type UserLeagueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * Filter, which UserLeague to fetch.
     */
    where: UserLeagueWhereUniqueInput
  }

  /**
   * UserLeague findFirst
   */
  export type UserLeagueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * Filter, which UserLeague to fetch.
     */
    where?: UserLeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeagues to fetch.
     */
    orderBy?: UserLeagueOrderByWithRelationInput | UserLeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLeagues.
     */
    cursor?: UserLeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLeagues.
     */
    distinct?: UserLeagueScalarFieldEnum | UserLeagueScalarFieldEnum[]
  }

  /**
   * UserLeague findFirstOrThrow
   */
  export type UserLeagueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * Filter, which UserLeague to fetch.
     */
    where?: UserLeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeagues to fetch.
     */
    orderBy?: UserLeagueOrderByWithRelationInput | UserLeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLeagues.
     */
    cursor?: UserLeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLeagues.
     */
    distinct?: UserLeagueScalarFieldEnum | UserLeagueScalarFieldEnum[]
  }

  /**
   * UserLeague findMany
   */
  export type UserLeagueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * Filter, which UserLeagues to fetch.
     */
    where?: UserLeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeagues to fetch.
     */
    orderBy?: UserLeagueOrderByWithRelationInput | UserLeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLeagues.
     */
    cursor?: UserLeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeagues.
     */
    skip?: number
    distinct?: UserLeagueScalarFieldEnum | UserLeagueScalarFieldEnum[]
  }

  /**
   * UserLeague create
   */
  export type UserLeagueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLeague.
     */
    data: XOR<UserLeagueCreateInput, UserLeagueUncheckedCreateInput>
  }

  /**
   * UserLeague createMany
   */
  export type UserLeagueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLeagues.
     */
    data: UserLeagueCreateManyInput | UserLeagueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLeague createManyAndReturn
   */
  export type UserLeagueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserLeagues.
     */
    data: UserLeagueCreateManyInput | UserLeagueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLeague update
   */
  export type UserLeagueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLeague.
     */
    data: XOR<UserLeagueUpdateInput, UserLeagueUncheckedUpdateInput>
    /**
     * Choose, which UserLeague to update.
     */
    where: UserLeagueWhereUniqueInput
  }

  /**
   * UserLeague updateMany
   */
  export type UserLeagueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLeagues.
     */
    data: XOR<UserLeagueUpdateManyMutationInput, UserLeagueUncheckedUpdateManyInput>
    /**
     * Filter which UserLeagues to update
     */
    where?: UserLeagueWhereInput
  }

  /**
   * UserLeague upsert
   */
  export type UserLeagueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLeague to update in case it exists.
     */
    where: UserLeagueWhereUniqueInput
    /**
     * In case the UserLeague found by the `where` argument doesn't exist, create a new UserLeague with this data.
     */
    create: XOR<UserLeagueCreateInput, UserLeagueUncheckedCreateInput>
    /**
     * In case the UserLeague was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLeagueUpdateInput, UserLeagueUncheckedUpdateInput>
  }

  /**
   * UserLeague delete
   */
  export type UserLeagueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
    /**
     * Filter which UserLeague to delete.
     */
    where: UserLeagueWhereUniqueInput
  }

  /**
   * UserLeague deleteMany
   */
  export type UserLeagueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLeagues to delete
     */
    where?: UserLeagueWhereInput
  }

  /**
   * UserLeague without action
   */
  export type UserLeagueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeague
     */
    select?: UserLeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeagueInclude<ExtArgs> | null
  }


  /**
   * Model LeagueMessage
   */

  export type AggregateLeagueMessage = {
    _count: LeagueMessageCountAggregateOutputType | null
    _min: LeagueMessageMinAggregateOutputType | null
    _max: LeagueMessageMaxAggregateOutputType | null
  }

  export type LeagueMessageMinAggregateOutputType = {
    id: string | null
    leagueId: string | null
    userId: string | null
    message: string | null
    isAnnouncement: boolean | null
    isPinned: boolean | null
    createdAt: Date | null
    editedAt: Date | null
    deletedAt: Date | null
  }

  export type LeagueMessageMaxAggregateOutputType = {
    id: string | null
    leagueId: string | null
    userId: string | null
    message: string | null
    isAnnouncement: boolean | null
    isPinned: boolean | null
    createdAt: Date | null
    editedAt: Date | null
    deletedAt: Date | null
  }

  export type LeagueMessageCountAggregateOutputType = {
    id: number
    leagueId: number
    userId: number
    message: number
    isAnnouncement: number
    isPinned: number
    createdAt: number
    editedAt: number
    deletedAt: number
    _all: number
  }


  export type LeagueMessageMinAggregateInputType = {
    id?: true
    leagueId?: true
    userId?: true
    message?: true
    isAnnouncement?: true
    isPinned?: true
    createdAt?: true
    editedAt?: true
    deletedAt?: true
  }

  export type LeagueMessageMaxAggregateInputType = {
    id?: true
    leagueId?: true
    userId?: true
    message?: true
    isAnnouncement?: true
    isPinned?: true
    createdAt?: true
    editedAt?: true
    deletedAt?: true
  }

  export type LeagueMessageCountAggregateInputType = {
    id?: true
    leagueId?: true
    userId?: true
    message?: true
    isAnnouncement?: true
    isPinned?: true
    createdAt?: true
    editedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type LeagueMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeagueMessage to aggregate.
     */
    where?: LeagueMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeagueMessages to fetch.
     */
    orderBy?: LeagueMessageOrderByWithRelationInput | LeagueMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeagueMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeagueMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeagueMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeagueMessages
    **/
    _count?: true | LeagueMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeagueMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeagueMessageMaxAggregateInputType
  }

  export type GetLeagueMessageAggregateType<T extends LeagueMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateLeagueMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeagueMessage[P]>
      : GetScalarType<T[P], AggregateLeagueMessage[P]>
  }




  export type LeagueMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueMessageWhereInput
    orderBy?: LeagueMessageOrderByWithAggregationInput | LeagueMessageOrderByWithAggregationInput[]
    by: LeagueMessageScalarFieldEnum[] | LeagueMessageScalarFieldEnum
    having?: LeagueMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeagueMessageCountAggregateInputType | true
    _min?: LeagueMessageMinAggregateInputType
    _max?: LeagueMessageMaxAggregateInputType
  }

  export type LeagueMessageGroupByOutputType = {
    id: string
    leagueId: string
    userId: string
    message: string
    isAnnouncement: boolean
    isPinned: boolean
    createdAt: Date
    editedAt: Date | null
    deletedAt: Date | null
    _count: LeagueMessageCountAggregateOutputType | null
    _min: LeagueMessageMinAggregateOutputType | null
    _max: LeagueMessageMaxAggregateOutputType | null
  }

  type GetLeagueMessageGroupByPayload<T extends LeagueMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeagueMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeagueMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeagueMessageGroupByOutputType[P]>
            : GetScalarType<T[P], LeagueMessageGroupByOutputType[P]>
        }
      >
    >


  export type LeagueMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leagueId?: boolean
    userId?: boolean
    message?: boolean
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: boolean
    editedAt?: boolean
    deletedAt?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leagueMessage"]>

  export type LeagueMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leagueId?: boolean
    userId?: boolean
    message?: boolean
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: boolean
    editedAt?: boolean
    deletedAt?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leagueMessage"]>

  export type LeagueMessageSelectScalar = {
    id?: boolean
    leagueId?: boolean
    userId?: boolean
    message?: boolean
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: boolean
    editedAt?: boolean
    deletedAt?: boolean
  }

  export type LeagueMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LeagueMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LeagueMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeagueMessage"
    objects: {
      league: Prisma.$LeaguePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leagueId: string
      userId: string
      message: string
      isAnnouncement: boolean
      isPinned: boolean
      createdAt: Date
      editedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["leagueMessage"]>
    composites: {}
  }

  type LeagueMessageGetPayload<S extends boolean | null | undefined | LeagueMessageDefaultArgs> = $Result.GetResult<Prisma.$LeagueMessagePayload, S>

  type LeagueMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeagueMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeagueMessageCountAggregateInputType | true
    }

  export interface LeagueMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeagueMessage'], meta: { name: 'LeagueMessage' } }
    /**
     * Find zero or one LeagueMessage that matches the filter.
     * @param {LeagueMessageFindUniqueArgs} args - Arguments to find a LeagueMessage
     * @example
     * // Get one LeagueMessage
     * const leagueMessage = await prisma.leagueMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeagueMessageFindUniqueArgs>(args: SelectSubset<T, LeagueMessageFindUniqueArgs<ExtArgs>>): Prisma__LeagueMessageClient<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeagueMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeagueMessageFindUniqueOrThrowArgs} args - Arguments to find a LeagueMessage
     * @example
     * // Get one LeagueMessage
     * const leagueMessage = await prisma.leagueMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeagueMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, LeagueMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeagueMessageClient<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeagueMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueMessageFindFirstArgs} args - Arguments to find a LeagueMessage
     * @example
     * // Get one LeagueMessage
     * const leagueMessage = await prisma.leagueMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeagueMessageFindFirstArgs>(args?: SelectSubset<T, LeagueMessageFindFirstArgs<ExtArgs>>): Prisma__LeagueMessageClient<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeagueMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueMessageFindFirstOrThrowArgs} args - Arguments to find a LeagueMessage
     * @example
     * // Get one LeagueMessage
     * const leagueMessage = await prisma.leagueMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeagueMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, LeagueMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeagueMessageClient<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeagueMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeagueMessages
     * const leagueMessages = await prisma.leagueMessage.findMany()
     * 
     * // Get first 10 LeagueMessages
     * const leagueMessages = await prisma.leagueMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leagueMessageWithIdOnly = await prisma.leagueMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeagueMessageFindManyArgs>(args?: SelectSubset<T, LeagueMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeagueMessage.
     * @param {LeagueMessageCreateArgs} args - Arguments to create a LeagueMessage.
     * @example
     * // Create one LeagueMessage
     * const LeagueMessage = await prisma.leagueMessage.create({
     *   data: {
     *     // ... data to create a LeagueMessage
     *   }
     * })
     * 
     */
    create<T extends LeagueMessageCreateArgs>(args: SelectSubset<T, LeagueMessageCreateArgs<ExtArgs>>): Prisma__LeagueMessageClient<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeagueMessages.
     * @param {LeagueMessageCreateManyArgs} args - Arguments to create many LeagueMessages.
     * @example
     * // Create many LeagueMessages
     * const leagueMessage = await prisma.leagueMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeagueMessageCreateManyArgs>(args?: SelectSubset<T, LeagueMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeagueMessages and returns the data saved in the database.
     * @param {LeagueMessageCreateManyAndReturnArgs} args - Arguments to create many LeagueMessages.
     * @example
     * // Create many LeagueMessages
     * const leagueMessage = await prisma.leagueMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeagueMessages and only return the `id`
     * const leagueMessageWithIdOnly = await prisma.leagueMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeagueMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, LeagueMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeagueMessage.
     * @param {LeagueMessageDeleteArgs} args - Arguments to delete one LeagueMessage.
     * @example
     * // Delete one LeagueMessage
     * const LeagueMessage = await prisma.leagueMessage.delete({
     *   where: {
     *     // ... filter to delete one LeagueMessage
     *   }
     * })
     * 
     */
    delete<T extends LeagueMessageDeleteArgs>(args: SelectSubset<T, LeagueMessageDeleteArgs<ExtArgs>>): Prisma__LeagueMessageClient<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeagueMessage.
     * @param {LeagueMessageUpdateArgs} args - Arguments to update one LeagueMessage.
     * @example
     * // Update one LeagueMessage
     * const leagueMessage = await prisma.leagueMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeagueMessageUpdateArgs>(args: SelectSubset<T, LeagueMessageUpdateArgs<ExtArgs>>): Prisma__LeagueMessageClient<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeagueMessages.
     * @param {LeagueMessageDeleteManyArgs} args - Arguments to filter LeagueMessages to delete.
     * @example
     * // Delete a few LeagueMessages
     * const { count } = await prisma.leagueMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeagueMessageDeleteManyArgs>(args?: SelectSubset<T, LeagueMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeagueMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeagueMessages
     * const leagueMessage = await prisma.leagueMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeagueMessageUpdateManyArgs>(args: SelectSubset<T, LeagueMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeagueMessage.
     * @param {LeagueMessageUpsertArgs} args - Arguments to update or create a LeagueMessage.
     * @example
     * // Update or create a LeagueMessage
     * const leagueMessage = await prisma.leagueMessage.upsert({
     *   create: {
     *     // ... data to create a LeagueMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeagueMessage we want to update
     *   }
     * })
     */
    upsert<T extends LeagueMessageUpsertArgs>(args: SelectSubset<T, LeagueMessageUpsertArgs<ExtArgs>>): Prisma__LeagueMessageClient<$Result.GetResult<Prisma.$LeagueMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeagueMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueMessageCountArgs} args - Arguments to filter LeagueMessages to count.
     * @example
     * // Count the number of LeagueMessages
     * const count = await prisma.leagueMessage.count({
     *   where: {
     *     // ... the filter for the LeagueMessages we want to count
     *   }
     * })
    **/
    count<T extends LeagueMessageCountArgs>(
      args?: Subset<T, LeagueMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeagueMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeagueMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeagueMessageAggregateArgs>(args: Subset<T, LeagueMessageAggregateArgs>): Prisma.PrismaPromise<GetLeagueMessageAggregateType<T>>

    /**
     * Group by LeagueMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeagueMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeagueMessageGroupByArgs['orderBy'] }
        : { orderBy?: LeagueMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeagueMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeagueMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeagueMessage model
   */
  readonly fields: LeagueMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeagueMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeagueMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeagueMessage model
   */ 
  interface LeagueMessageFieldRefs {
    readonly id: FieldRef<"LeagueMessage", 'String'>
    readonly leagueId: FieldRef<"LeagueMessage", 'String'>
    readonly userId: FieldRef<"LeagueMessage", 'String'>
    readonly message: FieldRef<"LeagueMessage", 'String'>
    readonly isAnnouncement: FieldRef<"LeagueMessage", 'Boolean'>
    readonly isPinned: FieldRef<"LeagueMessage", 'Boolean'>
    readonly createdAt: FieldRef<"LeagueMessage", 'DateTime'>
    readonly editedAt: FieldRef<"LeagueMessage", 'DateTime'>
    readonly deletedAt: FieldRef<"LeagueMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeagueMessage findUnique
   */
  export type LeagueMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * Filter, which LeagueMessage to fetch.
     */
    where: LeagueMessageWhereUniqueInput
  }

  /**
   * LeagueMessage findUniqueOrThrow
   */
  export type LeagueMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * Filter, which LeagueMessage to fetch.
     */
    where: LeagueMessageWhereUniqueInput
  }

  /**
   * LeagueMessage findFirst
   */
  export type LeagueMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * Filter, which LeagueMessage to fetch.
     */
    where?: LeagueMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeagueMessages to fetch.
     */
    orderBy?: LeagueMessageOrderByWithRelationInput | LeagueMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeagueMessages.
     */
    cursor?: LeagueMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeagueMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeagueMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeagueMessages.
     */
    distinct?: LeagueMessageScalarFieldEnum | LeagueMessageScalarFieldEnum[]
  }

  /**
   * LeagueMessage findFirstOrThrow
   */
  export type LeagueMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * Filter, which LeagueMessage to fetch.
     */
    where?: LeagueMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeagueMessages to fetch.
     */
    orderBy?: LeagueMessageOrderByWithRelationInput | LeagueMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeagueMessages.
     */
    cursor?: LeagueMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeagueMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeagueMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeagueMessages.
     */
    distinct?: LeagueMessageScalarFieldEnum | LeagueMessageScalarFieldEnum[]
  }

  /**
   * LeagueMessage findMany
   */
  export type LeagueMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * Filter, which LeagueMessages to fetch.
     */
    where?: LeagueMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeagueMessages to fetch.
     */
    orderBy?: LeagueMessageOrderByWithRelationInput | LeagueMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeagueMessages.
     */
    cursor?: LeagueMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeagueMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeagueMessages.
     */
    skip?: number
    distinct?: LeagueMessageScalarFieldEnum | LeagueMessageScalarFieldEnum[]
  }

  /**
   * LeagueMessage create
   */
  export type LeagueMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a LeagueMessage.
     */
    data: XOR<LeagueMessageCreateInput, LeagueMessageUncheckedCreateInput>
  }

  /**
   * LeagueMessage createMany
   */
  export type LeagueMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeagueMessages.
     */
    data: LeagueMessageCreateManyInput | LeagueMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeagueMessage createManyAndReturn
   */
  export type LeagueMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeagueMessages.
     */
    data: LeagueMessageCreateManyInput | LeagueMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeagueMessage update
   */
  export type LeagueMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a LeagueMessage.
     */
    data: XOR<LeagueMessageUpdateInput, LeagueMessageUncheckedUpdateInput>
    /**
     * Choose, which LeagueMessage to update.
     */
    where: LeagueMessageWhereUniqueInput
  }

  /**
   * LeagueMessage updateMany
   */
  export type LeagueMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeagueMessages.
     */
    data: XOR<LeagueMessageUpdateManyMutationInput, LeagueMessageUncheckedUpdateManyInput>
    /**
     * Filter which LeagueMessages to update
     */
    where?: LeagueMessageWhereInput
  }

  /**
   * LeagueMessage upsert
   */
  export type LeagueMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the LeagueMessage to update in case it exists.
     */
    where: LeagueMessageWhereUniqueInput
    /**
     * In case the LeagueMessage found by the `where` argument doesn't exist, create a new LeagueMessage with this data.
     */
    create: XOR<LeagueMessageCreateInput, LeagueMessageUncheckedCreateInput>
    /**
     * In case the LeagueMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeagueMessageUpdateInput, LeagueMessageUncheckedUpdateInput>
  }

  /**
   * LeagueMessage delete
   */
  export type LeagueMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
    /**
     * Filter which LeagueMessage to delete.
     */
    where: LeagueMessageWhereUniqueInput
  }

  /**
   * LeagueMessage deleteMany
   */
  export type LeagueMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeagueMessages to delete
     */
    where?: LeagueMessageWhereInput
  }

  /**
   * LeagueMessage without action
   */
  export type LeagueMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueMessage
     */
    select?: LeagueMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueMessageInclude<ExtArgs> | null
  }


  /**
   * Model Achievement
   */

  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementAvgAggregateOutputType = {
    points: number | null
  }

  export type AchievementSumAggregateOutputType = {
    points: number | null
  }

  export type AchievementMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: $Enums.AchievementCategory | null
    iconUrl: string | null
    badgeColor: string | null
    points: number | null
    rarity: $Enums.Rarity | null
    isActive: boolean | null
    isSecret: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AchievementMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: $Enums.AchievementCategory | null
    iconUrl: string | null
    badgeColor: string | null
    points: number | null
    rarity: $Enums.Rarity | null
    isActive: boolean | null
    isSecret: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AchievementCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    iconUrl: number
    badgeColor: number
    points: number
    rarity: number
    criteria: number
    isActive: number
    isSecret: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AchievementAvgAggregateInputType = {
    points?: true
  }

  export type AchievementSumAggregateInputType = {
    points?: true
  }

  export type AchievementMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    iconUrl?: true
    badgeColor?: true
    points?: true
    rarity?: true
    isActive?: true
    isSecret?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AchievementMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    iconUrl?: true
    badgeColor?: true
    points?: true
    rarity?: true
    isActive?: true
    isSecret?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AchievementCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    iconUrl?: true
    badgeColor?: true
    points?: true
    rarity?: true
    criteria?: true
    isActive?: true
    isSecret?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievement to aggregate.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithAggregationInput | AchievementOrderByWithAggregationInput[]
    by: AchievementScalarFieldEnum[] | AchievementScalarFieldEnum
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _avg?: AchievementAvgAggregateInputType
    _sum?: AchievementSumAggregateInputType
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }

  export type AchievementGroupByOutputType = {
    id: string
    name: string
    description: string
    category: $Enums.AchievementCategory
    iconUrl: string | null
    badgeColor: string | null
    points: number
    rarity: $Enums.Rarity
    criteria: JsonValue
    isActive: boolean
    isSecret: boolean
    createdAt: Date
    updatedAt: Date
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    iconUrl?: boolean
    badgeColor?: boolean
    points?: boolean
    rarity?: boolean
    criteria?: boolean
    isActive?: boolean
    isSecret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Achievement$usersArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    iconUrl?: boolean
    badgeColor?: boolean
    points?: boolean
    rarity?: boolean
    criteria?: boolean
    isActive?: boolean
    isSecret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    iconUrl?: boolean
    badgeColor?: boolean
    points?: boolean
    rarity?: boolean
    criteria?: boolean
    isActive?: boolean
    isSecret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Achievement$usersArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievement"
    objects: {
      users: Prisma.$UserAchievementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      category: $Enums.AchievementCategory
      iconUrl: string | null
      badgeColor: string | null
      points: number
      rarity: $Enums.Rarity
      criteria: Prisma.JsonValue
      isActive: boolean
      isSecret: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["achievement"]>
    composites: {}
  }

  type AchievementGetPayload<S extends boolean | null | undefined | AchievementDefaultArgs> = $Result.GetResult<Prisma.$AchievementPayload, S>

  type AchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AchievementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AchievementCountAggregateInputType | true
    }

  export interface AchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievement'], meta: { name: 'Achievement' } }
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchievementFindUniqueArgs>(args: SelectSubset<T, AchievementFindUniqueArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Achievement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, AchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchievementFindFirstArgs>(args?: SelectSubset<T, AchievementFindFirstArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Achievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, AchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const achievementWithIdOnly = await prisma.achievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AchievementFindManyArgs>(args?: SelectSubset<T, AchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
     */
    create<T extends AchievementCreateArgs>(args: SelectSubset<T, AchievementCreateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Achievements.
     * @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchievementCreateManyArgs>(args?: SelectSubset<T, AchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achievements and returns the data saved in the database.
     * @param {AchievementCreateManyAndReturnArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, AchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
     */
    delete<T extends AchievementDeleteArgs>(args: SelectSubset<T, AchievementDeleteArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchievementUpdateArgs>(args: SelectSubset<T, AchievementUpdateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchievementDeleteManyArgs>(args?: SelectSubset<T, AchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchievementUpdateManyArgs>(args: SelectSubset<T, AchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
     */
    upsert<T extends AchievementUpsertArgs>(args: SelectSubset<T, AchievementUpsertArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): Prisma.PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievement model
   */
  readonly fields: AchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Achievement$usersArgs<ExtArgs> = {}>(args?: Subset<T, Achievement$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achievement model
   */ 
  interface AchievementFieldRefs {
    readonly id: FieldRef<"Achievement", 'String'>
    readonly name: FieldRef<"Achievement", 'String'>
    readonly description: FieldRef<"Achievement", 'String'>
    readonly category: FieldRef<"Achievement", 'AchievementCategory'>
    readonly iconUrl: FieldRef<"Achievement", 'String'>
    readonly badgeColor: FieldRef<"Achievement", 'String'>
    readonly points: FieldRef<"Achievement", 'Int'>
    readonly rarity: FieldRef<"Achievement", 'Rarity'>
    readonly criteria: FieldRef<"Achievement", 'Json'>
    readonly isActive: FieldRef<"Achievement", 'Boolean'>
    readonly isSecret: FieldRef<"Achievement", 'Boolean'>
    readonly createdAt: FieldRef<"Achievement", 'DateTime'>
    readonly updatedAt: FieldRef<"Achievement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Achievement findUnique
   */
  export type AchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findFirst
   */
  export type AchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement create
   */
  export type AchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievement.
     */
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
  }

  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement createManyAndReturn
   */
  export type AchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement update
   */
  export type AchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievement.
     */
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
  }

  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     */
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     */
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
  }

  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter which Achievement to delete.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementWhereInput
  }

  /**
   * Achievement.users
   */
  export type Achievement$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * Achievement without action
   */
  export type AchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
  }


  /**
   * Model UserAchievement
   */

  export type AggregateUserAchievement = {
    _count: UserAchievementCountAggregateOutputType | null
    _avg: UserAchievementAvgAggregateOutputType | null
    _sum: UserAchievementSumAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  export type UserAchievementAvgAggregateOutputType = {
    progress: number | null
  }

  export type UserAchievementSumAggregateOutputType = {
    progress: number | null
  }

  export type UserAchievementMinAggregateOutputType = {
    id: string | null
    userId: string | null
    achievementId: string | null
    unlockedAt: Date | null
    progress: number | null
  }

  export type UserAchievementMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    achievementId: string | null
    unlockedAt: Date | null
    progress: number | null
  }

  export type UserAchievementCountAggregateOutputType = {
    id: number
    userId: number
    achievementId: number
    unlockedAt: number
    progress: number
    metadata: number
    _all: number
  }


  export type UserAchievementAvgAggregateInputType = {
    progress?: true
  }

  export type UserAchievementSumAggregateInputType = {
    progress?: true
  }

  export type UserAchievementMinAggregateInputType = {
    id?: true
    userId?: true
    achievementId?: true
    unlockedAt?: true
    progress?: true
  }

  export type UserAchievementMaxAggregateInputType = {
    id?: true
    userId?: true
    achievementId?: true
    unlockedAt?: true
    progress?: true
  }

  export type UserAchievementCountAggregateInputType = {
    id?: true
    userId?: true
    achievementId?: true
    unlockedAt?: true
    progress?: true
    metadata?: true
    _all?: true
  }

  export type UserAchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievement to aggregate.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAchievements
    **/
    _count?: true | UserAchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAchievementMaxAggregateInputType
  }

  export type GetUserAchievementAggregateType<T extends UserAchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAchievement[P]>
      : GetScalarType<T[P], AggregateUserAchievement[P]>
  }




  export type UserAchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithAggregationInput | UserAchievementOrderByWithAggregationInput[]
    by: UserAchievementScalarFieldEnum[] | UserAchievementScalarFieldEnum
    having?: UserAchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAchievementCountAggregateInputType | true
    _avg?: UserAchievementAvgAggregateInputType
    _sum?: UserAchievementSumAggregateInputType
    _min?: UserAchievementMinAggregateInputType
    _max?: UserAchievementMaxAggregateInputType
  }

  export type UserAchievementGroupByOutputType = {
    id: string
    userId: string
    achievementId: string
    unlockedAt: Date
    progress: number
    metadata: JsonValue | null
    _count: UserAchievementCountAggregateOutputType | null
    _avg: UserAchievementAvgAggregateOutputType | null
    _sum: UserAchievementSumAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  type GetUserAchievementGroupByPayload<T extends UserAchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
            : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
        }
      >
    >


  export type UserAchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    achievementId?: boolean
    unlockedAt?: boolean
    progress?: boolean
    metadata?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    achievementId?: boolean
    unlockedAt?: boolean
    progress?: boolean
    metadata?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectScalar = {
    id?: boolean
    userId?: boolean
    achievementId?: boolean
    unlockedAt?: boolean
    progress?: boolean
    metadata?: boolean
  }

  export type UserAchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }

  export type $UserAchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAchievement"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      achievement: Prisma.$AchievementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      achievementId: string
      unlockedAt: Date
      progress: number
      metadata: Prisma.JsonValue | null
    }, ExtArgs["result"]["userAchievement"]>
    composites: {}
  }

  type UserAchievementGetPayload<S extends boolean | null | undefined | UserAchievementDefaultArgs> = $Result.GetResult<Prisma.$UserAchievementPayload, S>

  type UserAchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserAchievementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserAchievementCountAggregateInputType | true
    }

  export interface UserAchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAchievement'], meta: { name: 'UserAchievement' } }
    /**
     * Find zero or one UserAchievement that matches the filter.
     * @param {UserAchievementFindUniqueArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAchievementFindUniqueArgs>(args: SelectSubset<T, UserAchievementFindUniqueArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserAchievement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserAchievementFindUniqueOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserAchievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAchievementFindFirstArgs>(args?: SelectSubset<T, UserAchievementFindFirstArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserAchievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserAchievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany()
     * 
     * // Get first 10 UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAchievementFindManyArgs>(args?: SelectSubset<T, UserAchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserAchievement.
     * @param {UserAchievementCreateArgs} args - Arguments to create a UserAchievement.
     * @example
     * // Create one UserAchievement
     * const UserAchievement = await prisma.userAchievement.create({
     *   data: {
     *     // ... data to create a UserAchievement
     *   }
     * })
     * 
     */
    create<T extends UserAchievementCreateArgs>(args: SelectSubset<T, UserAchievementCreateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserAchievements.
     * @param {UserAchievementCreateManyArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAchievementCreateManyArgs>(args?: SelectSubset<T, UserAchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAchievements and returns the data saved in the database.
     * @param {UserAchievementCreateManyAndReturnArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserAchievement.
     * @param {UserAchievementDeleteArgs} args - Arguments to delete one UserAchievement.
     * @example
     * // Delete one UserAchievement
     * const UserAchievement = await prisma.userAchievement.delete({
     *   where: {
     *     // ... filter to delete one UserAchievement
     *   }
     * })
     * 
     */
    delete<T extends UserAchievementDeleteArgs>(args: SelectSubset<T, UserAchievementDeleteArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserAchievement.
     * @param {UserAchievementUpdateArgs} args - Arguments to update one UserAchievement.
     * @example
     * // Update one UserAchievement
     * const userAchievement = await prisma.userAchievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAchievementUpdateArgs>(args: SelectSubset<T, UserAchievementUpdateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserAchievements.
     * @param {UserAchievementDeleteManyArgs} args - Arguments to filter UserAchievements to delete.
     * @example
     * // Delete a few UserAchievements
     * const { count } = await prisma.userAchievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAchievementDeleteManyArgs>(args?: SelectSubset<T, UserAchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAchievementUpdateManyArgs>(args: SelectSubset<T, UserAchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAchievement.
     * @param {UserAchievementUpsertArgs} args - Arguments to update or create a UserAchievement.
     * @example
     * // Update or create a UserAchievement
     * const userAchievement = await prisma.userAchievement.upsert({
     *   create: {
     *     // ... data to create a UserAchievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAchievement we want to update
     *   }
     * })
     */
    upsert<T extends UserAchievementUpsertArgs>(args: SelectSubset<T, UserAchievementUpsertArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementCountArgs} args - Arguments to filter UserAchievements to count.
     * @example
     * // Count the number of UserAchievements
     * const count = await prisma.userAchievement.count({
     *   where: {
     *     // ... the filter for the UserAchievements we want to count
     *   }
     * })
    **/
    count<T extends UserAchievementCountArgs>(
      args?: Subset<T, UserAchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAchievementAggregateArgs>(args: Subset<T, UserAchievementAggregateArgs>): Prisma.PrismaPromise<GetUserAchievementAggregateType<T>>

    /**
     * Group by UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAchievementGroupByArgs['orderBy'] }
        : { orderBy?: UserAchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAchievement model
   */
  readonly fields: UserAchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAchievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    achievement<T extends AchievementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AchievementDefaultArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAchievement model
   */ 
  interface UserAchievementFieldRefs {
    readonly id: FieldRef<"UserAchievement", 'String'>
    readonly userId: FieldRef<"UserAchievement", 'String'>
    readonly achievementId: FieldRef<"UserAchievement", 'String'>
    readonly unlockedAt: FieldRef<"UserAchievement", 'DateTime'>
    readonly progress: FieldRef<"UserAchievement", 'Int'>
    readonly metadata: FieldRef<"UserAchievement", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * UserAchievement findUnique
   */
  export type UserAchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findUniqueOrThrow
   */
  export type UserAchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findFirst
   */
  export type UserAchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findFirstOrThrow
   */
  export type UserAchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findMany
   */
  export type UserAchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievements to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement create
   */
  export type UserAchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAchievement.
     */
    data: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
  }

  /**
   * UserAchievement createMany
   */
  export type UserAchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAchievement createManyAndReturn
   */
  export type UserAchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement update
   */
  export type UserAchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAchievement.
     */
    data: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
    /**
     * Choose, which UserAchievement to update.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement updateMany
   */
  export type UserAchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
  }

  /**
   * UserAchievement upsert
   */
  export type UserAchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAchievement to update in case it exists.
     */
    where: UserAchievementWhereUniqueInput
    /**
     * In case the UserAchievement found by the `where` argument doesn't exist, create a new UserAchievement with this data.
     */
    create: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
    /**
     * In case the UserAchievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
  }

  /**
   * UserAchievement delete
   */
  export type UserAchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter which UserAchievement to delete.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement deleteMany
   */
  export type UserAchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievements to delete
     */
    where?: UserAchievementWhereInput
  }

  /**
   * UserAchievement without action
   */
  export type UserAchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    actionUrl: string | null
    isRead: boolean | null
    readAt: Date | null
    priority: $Enums.Priority | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    actionUrl: string | null
    isRead: boolean | null
    readAt: Date | null
    priority: $Enums.Priority | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    actionUrl: number
    isRead: number
    readAt: number
    metadata: number
    priority: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    actionUrl?: true
    isRead?: true
    readAt?: true
    priority?: true
    expiresAt?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    actionUrl?: true
    isRead?: true
    readAt?: true
    priority?: true
    expiresAt?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    actionUrl?: true
    isRead?: true
    readAt?: true
    metadata?: true
    priority?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl: string | null
    isRead: boolean
    readAt: Date | null
    metadata: JsonValue | null
    priority: $Enums.Priority
    expiresAt: Date | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    actionUrl?: boolean
    isRead?: boolean
    readAt?: boolean
    metadata?: boolean
    priority?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    actionUrl?: boolean
    isRead?: boolean
    readAt?: boolean
    metadata?: boolean
    priority?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    actionUrl?: boolean
    isRead?: boolean
    readAt?: boolean
    metadata?: boolean
    priority?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.NotificationType
      title: string
      message: string
      actionUrl: string | null
      isRead: boolean
      readAt: Date | null
      metadata: Prisma.JsonValue | null
      priority: $Enums.Priority
      expiresAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly metadata: FieldRef<"Notification", 'Json'>
    readonly priority: FieldRef<"Notification", 'Priority'>
    readonly expiresAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    requestId: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    requestId: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entity: number
    entityId: number
    oldValues: number
    newValues: number
    ipAddress: number
    userAgent: number
    requestId: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    requestId?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    requestId?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    userAgent?: true
    requestId?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string | null
    action: string
    entity: string
    entityId: string | null
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    requestId: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestId?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestId?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestId?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      action: string
      entity: string
      entityId: string | null
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      requestId: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly requestId: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model RssFeedLog
   */

  export type AggregateRssFeedLog = {
    _count: RssFeedLogCountAggregateOutputType | null
    _avg: RssFeedLogAvgAggregateOutputType | null
    _sum: RssFeedLogSumAggregateOutputType | null
    _min: RssFeedLogMinAggregateOutputType | null
    _max: RssFeedLogMaxAggregateOutputType | null
  }

  export type RssFeedLogAvgAggregateOutputType = {
    itemsProcessed: number | null
    itemsUpdated: number | null
    duration: number | null
    responseStatus: number | null
  }

  export type RssFeedLogSumAggregateOutputType = {
    itemsProcessed: number | null
    itemsUpdated: number | null
    duration: number | null
    responseStatus: number | null
  }

  export type RssFeedLogMinAggregateOutputType = {
    id: string | null
    source: string | null
    feedUrl: string | null
    feedType: string | null
    success: boolean | null
    errorMessage: string | null
    itemsProcessed: number | null
    itemsUpdated: number | null
    fetchStartedAt: Date | null
    fetchCompletedAt: Date | null
    duration: number | null
    responseStatus: number | null
    createdAt: Date | null
  }

  export type RssFeedLogMaxAggregateOutputType = {
    id: string | null
    source: string | null
    feedUrl: string | null
    feedType: string | null
    success: boolean | null
    errorMessage: string | null
    itemsProcessed: number | null
    itemsUpdated: number | null
    fetchStartedAt: Date | null
    fetchCompletedAt: Date | null
    duration: number | null
    responseStatus: number | null
    createdAt: Date | null
  }

  export type RssFeedLogCountAggregateOutputType = {
    id: number
    source: number
    feedUrl: number
    feedType: number
    success: number
    errorMessage: number
    itemsProcessed: number
    itemsUpdated: number
    fetchStartedAt: number
    fetchCompletedAt: number
    duration: number
    responseStatus: number
    responseHeaders: number
    createdAt: number
    _all: number
  }


  export type RssFeedLogAvgAggregateInputType = {
    itemsProcessed?: true
    itemsUpdated?: true
    duration?: true
    responseStatus?: true
  }

  export type RssFeedLogSumAggregateInputType = {
    itemsProcessed?: true
    itemsUpdated?: true
    duration?: true
    responseStatus?: true
  }

  export type RssFeedLogMinAggregateInputType = {
    id?: true
    source?: true
    feedUrl?: true
    feedType?: true
    success?: true
    errorMessage?: true
    itemsProcessed?: true
    itemsUpdated?: true
    fetchStartedAt?: true
    fetchCompletedAt?: true
    duration?: true
    responseStatus?: true
    createdAt?: true
  }

  export type RssFeedLogMaxAggregateInputType = {
    id?: true
    source?: true
    feedUrl?: true
    feedType?: true
    success?: true
    errorMessage?: true
    itemsProcessed?: true
    itemsUpdated?: true
    fetchStartedAt?: true
    fetchCompletedAt?: true
    duration?: true
    responseStatus?: true
    createdAt?: true
  }

  export type RssFeedLogCountAggregateInputType = {
    id?: true
    source?: true
    feedUrl?: true
    feedType?: true
    success?: true
    errorMessage?: true
    itemsProcessed?: true
    itemsUpdated?: true
    fetchStartedAt?: true
    fetchCompletedAt?: true
    duration?: true
    responseStatus?: true
    responseHeaders?: true
    createdAt?: true
    _all?: true
  }

  export type RssFeedLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RssFeedLog to aggregate.
     */
    where?: RssFeedLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RssFeedLogs to fetch.
     */
    orderBy?: RssFeedLogOrderByWithRelationInput | RssFeedLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RssFeedLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RssFeedLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RssFeedLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RssFeedLogs
    **/
    _count?: true | RssFeedLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RssFeedLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RssFeedLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RssFeedLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RssFeedLogMaxAggregateInputType
  }

  export type GetRssFeedLogAggregateType<T extends RssFeedLogAggregateArgs> = {
        [P in keyof T & keyof AggregateRssFeedLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRssFeedLog[P]>
      : GetScalarType<T[P], AggregateRssFeedLog[P]>
  }




  export type RssFeedLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RssFeedLogWhereInput
    orderBy?: RssFeedLogOrderByWithAggregationInput | RssFeedLogOrderByWithAggregationInput[]
    by: RssFeedLogScalarFieldEnum[] | RssFeedLogScalarFieldEnum
    having?: RssFeedLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RssFeedLogCountAggregateInputType | true
    _avg?: RssFeedLogAvgAggregateInputType
    _sum?: RssFeedLogSumAggregateInputType
    _min?: RssFeedLogMinAggregateInputType
    _max?: RssFeedLogMaxAggregateInputType
  }

  export type RssFeedLogGroupByOutputType = {
    id: string
    source: string
    feedUrl: string
    feedType: string
    success: boolean
    errorMessage: string | null
    itemsProcessed: number
    itemsUpdated: number
    fetchStartedAt: Date
    fetchCompletedAt: Date | null
    duration: number | null
    responseStatus: number | null
    responseHeaders: JsonValue | null
    createdAt: Date
    _count: RssFeedLogCountAggregateOutputType | null
    _avg: RssFeedLogAvgAggregateOutputType | null
    _sum: RssFeedLogSumAggregateOutputType | null
    _min: RssFeedLogMinAggregateOutputType | null
    _max: RssFeedLogMaxAggregateOutputType | null
  }

  type GetRssFeedLogGroupByPayload<T extends RssFeedLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RssFeedLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RssFeedLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RssFeedLogGroupByOutputType[P]>
            : GetScalarType<T[P], RssFeedLogGroupByOutputType[P]>
        }
      >
    >


  export type RssFeedLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    feedUrl?: boolean
    feedType?: boolean
    success?: boolean
    errorMessage?: boolean
    itemsProcessed?: boolean
    itemsUpdated?: boolean
    fetchStartedAt?: boolean
    fetchCompletedAt?: boolean
    duration?: boolean
    responseStatus?: boolean
    responseHeaders?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["rssFeedLog"]>

  export type RssFeedLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    feedUrl?: boolean
    feedType?: boolean
    success?: boolean
    errorMessage?: boolean
    itemsProcessed?: boolean
    itemsUpdated?: boolean
    fetchStartedAt?: boolean
    fetchCompletedAt?: boolean
    duration?: boolean
    responseStatus?: boolean
    responseHeaders?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["rssFeedLog"]>

  export type RssFeedLogSelectScalar = {
    id?: boolean
    source?: boolean
    feedUrl?: boolean
    feedType?: boolean
    success?: boolean
    errorMessage?: boolean
    itemsProcessed?: boolean
    itemsUpdated?: boolean
    fetchStartedAt?: boolean
    fetchCompletedAt?: boolean
    duration?: boolean
    responseStatus?: boolean
    responseHeaders?: boolean
    createdAt?: boolean
  }


  export type $RssFeedLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RssFeedLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      source: string
      feedUrl: string
      feedType: string
      success: boolean
      errorMessage: string | null
      itemsProcessed: number
      itemsUpdated: number
      fetchStartedAt: Date
      fetchCompletedAt: Date | null
      duration: number | null
      responseStatus: number | null
      responseHeaders: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["rssFeedLog"]>
    composites: {}
  }

  type RssFeedLogGetPayload<S extends boolean | null | undefined | RssFeedLogDefaultArgs> = $Result.GetResult<Prisma.$RssFeedLogPayload, S>

  type RssFeedLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RssFeedLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RssFeedLogCountAggregateInputType | true
    }

  export interface RssFeedLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RssFeedLog'], meta: { name: 'RssFeedLog' } }
    /**
     * Find zero or one RssFeedLog that matches the filter.
     * @param {RssFeedLogFindUniqueArgs} args - Arguments to find a RssFeedLog
     * @example
     * // Get one RssFeedLog
     * const rssFeedLog = await prisma.rssFeedLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RssFeedLogFindUniqueArgs>(args: SelectSubset<T, RssFeedLogFindUniqueArgs<ExtArgs>>): Prisma__RssFeedLogClient<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RssFeedLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RssFeedLogFindUniqueOrThrowArgs} args - Arguments to find a RssFeedLog
     * @example
     * // Get one RssFeedLog
     * const rssFeedLog = await prisma.rssFeedLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RssFeedLogFindUniqueOrThrowArgs>(args: SelectSubset<T, RssFeedLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RssFeedLogClient<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RssFeedLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RssFeedLogFindFirstArgs} args - Arguments to find a RssFeedLog
     * @example
     * // Get one RssFeedLog
     * const rssFeedLog = await prisma.rssFeedLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RssFeedLogFindFirstArgs>(args?: SelectSubset<T, RssFeedLogFindFirstArgs<ExtArgs>>): Prisma__RssFeedLogClient<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RssFeedLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RssFeedLogFindFirstOrThrowArgs} args - Arguments to find a RssFeedLog
     * @example
     * // Get one RssFeedLog
     * const rssFeedLog = await prisma.rssFeedLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RssFeedLogFindFirstOrThrowArgs>(args?: SelectSubset<T, RssFeedLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__RssFeedLogClient<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RssFeedLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RssFeedLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RssFeedLogs
     * const rssFeedLogs = await prisma.rssFeedLog.findMany()
     * 
     * // Get first 10 RssFeedLogs
     * const rssFeedLogs = await prisma.rssFeedLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rssFeedLogWithIdOnly = await prisma.rssFeedLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RssFeedLogFindManyArgs>(args?: SelectSubset<T, RssFeedLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RssFeedLog.
     * @param {RssFeedLogCreateArgs} args - Arguments to create a RssFeedLog.
     * @example
     * // Create one RssFeedLog
     * const RssFeedLog = await prisma.rssFeedLog.create({
     *   data: {
     *     // ... data to create a RssFeedLog
     *   }
     * })
     * 
     */
    create<T extends RssFeedLogCreateArgs>(args: SelectSubset<T, RssFeedLogCreateArgs<ExtArgs>>): Prisma__RssFeedLogClient<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RssFeedLogs.
     * @param {RssFeedLogCreateManyArgs} args - Arguments to create many RssFeedLogs.
     * @example
     * // Create many RssFeedLogs
     * const rssFeedLog = await prisma.rssFeedLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RssFeedLogCreateManyArgs>(args?: SelectSubset<T, RssFeedLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RssFeedLogs and returns the data saved in the database.
     * @param {RssFeedLogCreateManyAndReturnArgs} args - Arguments to create many RssFeedLogs.
     * @example
     * // Create many RssFeedLogs
     * const rssFeedLog = await prisma.rssFeedLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RssFeedLogs and only return the `id`
     * const rssFeedLogWithIdOnly = await prisma.rssFeedLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RssFeedLogCreateManyAndReturnArgs>(args?: SelectSubset<T, RssFeedLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RssFeedLog.
     * @param {RssFeedLogDeleteArgs} args - Arguments to delete one RssFeedLog.
     * @example
     * // Delete one RssFeedLog
     * const RssFeedLog = await prisma.rssFeedLog.delete({
     *   where: {
     *     // ... filter to delete one RssFeedLog
     *   }
     * })
     * 
     */
    delete<T extends RssFeedLogDeleteArgs>(args: SelectSubset<T, RssFeedLogDeleteArgs<ExtArgs>>): Prisma__RssFeedLogClient<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RssFeedLog.
     * @param {RssFeedLogUpdateArgs} args - Arguments to update one RssFeedLog.
     * @example
     * // Update one RssFeedLog
     * const rssFeedLog = await prisma.rssFeedLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RssFeedLogUpdateArgs>(args: SelectSubset<T, RssFeedLogUpdateArgs<ExtArgs>>): Prisma__RssFeedLogClient<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RssFeedLogs.
     * @param {RssFeedLogDeleteManyArgs} args - Arguments to filter RssFeedLogs to delete.
     * @example
     * // Delete a few RssFeedLogs
     * const { count } = await prisma.rssFeedLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RssFeedLogDeleteManyArgs>(args?: SelectSubset<T, RssFeedLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RssFeedLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RssFeedLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RssFeedLogs
     * const rssFeedLog = await prisma.rssFeedLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RssFeedLogUpdateManyArgs>(args: SelectSubset<T, RssFeedLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RssFeedLog.
     * @param {RssFeedLogUpsertArgs} args - Arguments to update or create a RssFeedLog.
     * @example
     * // Update or create a RssFeedLog
     * const rssFeedLog = await prisma.rssFeedLog.upsert({
     *   create: {
     *     // ... data to create a RssFeedLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RssFeedLog we want to update
     *   }
     * })
     */
    upsert<T extends RssFeedLogUpsertArgs>(args: SelectSubset<T, RssFeedLogUpsertArgs<ExtArgs>>): Prisma__RssFeedLogClient<$Result.GetResult<Prisma.$RssFeedLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RssFeedLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RssFeedLogCountArgs} args - Arguments to filter RssFeedLogs to count.
     * @example
     * // Count the number of RssFeedLogs
     * const count = await prisma.rssFeedLog.count({
     *   where: {
     *     // ... the filter for the RssFeedLogs we want to count
     *   }
     * })
    **/
    count<T extends RssFeedLogCountArgs>(
      args?: Subset<T, RssFeedLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RssFeedLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RssFeedLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RssFeedLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RssFeedLogAggregateArgs>(args: Subset<T, RssFeedLogAggregateArgs>): Prisma.PrismaPromise<GetRssFeedLogAggregateType<T>>

    /**
     * Group by RssFeedLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RssFeedLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RssFeedLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RssFeedLogGroupByArgs['orderBy'] }
        : { orderBy?: RssFeedLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RssFeedLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRssFeedLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RssFeedLog model
   */
  readonly fields: RssFeedLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RssFeedLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RssFeedLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RssFeedLog model
   */ 
  interface RssFeedLogFieldRefs {
    readonly id: FieldRef<"RssFeedLog", 'String'>
    readonly source: FieldRef<"RssFeedLog", 'String'>
    readonly feedUrl: FieldRef<"RssFeedLog", 'String'>
    readonly feedType: FieldRef<"RssFeedLog", 'String'>
    readonly success: FieldRef<"RssFeedLog", 'Boolean'>
    readonly errorMessage: FieldRef<"RssFeedLog", 'String'>
    readonly itemsProcessed: FieldRef<"RssFeedLog", 'Int'>
    readonly itemsUpdated: FieldRef<"RssFeedLog", 'Int'>
    readonly fetchStartedAt: FieldRef<"RssFeedLog", 'DateTime'>
    readonly fetchCompletedAt: FieldRef<"RssFeedLog", 'DateTime'>
    readonly duration: FieldRef<"RssFeedLog", 'Int'>
    readonly responseStatus: FieldRef<"RssFeedLog", 'Int'>
    readonly responseHeaders: FieldRef<"RssFeedLog", 'Json'>
    readonly createdAt: FieldRef<"RssFeedLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RssFeedLog findUnique
   */
  export type RssFeedLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * Filter, which RssFeedLog to fetch.
     */
    where: RssFeedLogWhereUniqueInput
  }

  /**
   * RssFeedLog findUniqueOrThrow
   */
  export type RssFeedLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * Filter, which RssFeedLog to fetch.
     */
    where: RssFeedLogWhereUniqueInput
  }

  /**
   * RssFeedLog findFirst
   */
  export type RssFeedLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * Filter, which RssFeedLog to fetch.
     */
    where?: RssFeedLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RssFeedLogs to fetch.
     */
    orderBy?: RssFeedLogOrderByWithRelationInput | RssFeedLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RssFeedLogs.
     */
    cursor?: RssFeedLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RssFeedLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RssFeedLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RssFeedLogs.
     */
    distinct?: RssFeedLogScalarFieldEnum | RssFeedLogScalarFieldEnum[]
  }

  /**
   * RssFeedLog findFirstOrThrow
   */
  export type RssFeedLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * Filter, which RssFeedLog to fetch.
     */
    where?: RssFeedLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RssFeedLogs to fetch.
     */
    orderBy?: RssFeedLogOrderByWithRelationInput | RssFeedLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RssFeedLogs.
     */
    cursor?: RssFeedLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RssFeedLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RssFeedLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RssFeedLogs.
     */
    distinct?: RssFeedLogScalarFieldEnum | RssFeedLogScalarFieldEnum[]
  }

  /**
   * RssFeedLog findMany
   */
  export type RssFeedLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * Filter, which RssFeedLogs to fetch.
     */
    where?: RssFeedLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RssFeedLogs to fetch.
     */
    orderBy?: RssFeedLogOrderByWithRelationInput | RssFeedLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RssFeedLogs.
     */
    cursor?: RssFeedLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RssFeedLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RssFeedLogs.
     */
    skip?: number
    distinct?: RssFeedLogScalarFieldEnum | RssFeedLogScalarFieldEnum[]
  }

  /**
   * RssFeedLog create
   */
  export type RssFeedLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * The data needed to create a RssFeedLog.
     */
    data: XOR<RssFeedLogCreateInput, RssFeedLogUncheckedCreateInput>
  }

  /**
   * RssFeedLog createMany
   */
  export type RssFeedLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RssFeedLogs.
     */
    data: RssFeedLogCreateManyInput | RssFeedLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RssFeedLog createManyAndReturn
   */
  export type RssFeedLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RssFeedLogs.
     */
    data: RssFeedLogCreateManyInput | RssFeedLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RssFeedLog update
   */
  export type RssFeedLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * The data needed to update a RssFeedLog.
     */
    data: XOR<RssFeedLogUpdateInput, RssFeedLogUncheckedUpdateInput>
    /**
     * Choose, which RssFeedLog to update.
     */
    where: RssFeedLogWhereUniqueInput
  }

  /**
   * RssFeedLog updateMany
   */
  export type RssFeedLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RssFeedLogs.
     */
    data: XOR<RssFeedLogUpdateManyMutationInput, RssFeedLogUncheckedUpdateManyInput>
    /**
     * Filter which RssFeedLogs to update
     */
    where?: RssFeedLogWhereInput
  }

  /**
   * RssFeedLog upsert
   */
  export type RssFeedLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * The filter to search for the RssFeedLog to update in case it exists.
     */
    where: RssFeedLogWhereUniqueInput
    /**
     * In case the RssFeedLog found by the `where` argument doesn't exist, create a new RssFeedLog with this data.
     */
    create: XOR<RssFeedLogCreateInput, RssFeedLogUncheckedCreateInput>
    /**
     * In case the RssFeedLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RssFeedLogUpdateInput, RssFeedLogUncheckedUpdateInput>
  }

  /**
   * RssFeedLog delete
   */
  export type RssFeedLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
    /**
     * Filter which RssFeedLog to delete.
     */
    where: RssFeedLogWhereUniqueInput
  }

  /**
   * RssFeedLog deleteMany
   */
  export type RssFeedLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RssFeedLogs to delete
     */
    where?: RssFeedLogWhereInput
  }

  /**
   * RssFeedLog without action
   */
  export type RssFeedLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RssFeedLog
     */
    select?: RssFeedLogSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    displayName: 'displayName',
    avatarUrl: 'avatarUrl',
    bio: 'bio',
    isActive: 'isActive',
    emailVerified: 'emailVerified',
    emailVerifiedAt: 'emailVerifiedAt',
    lastLoginAt: 'lastLoginAt',
    loginCount: 'loginCount',
    loginAttempts: 'loginAttempts',
    lockedAt: 'lockedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    family: 'family',
    expiresAt: 'expiresAt',
    isRevoked: 'isRevoked',
    createdAt: 'createdAt',
    lastUsedAt: 'lastUsedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const LoginAttemptScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    identifier: 'identifier',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    success: 'success',
    createdAt: 'createdAt'
  };

  export type LoginAttemptScalarFieldEnum = (typeof LoginAttemptScalarFieldEnum)[keyof typeof LoginAttemptScalarFieldEnum]


  export const SeasonScalarFieldEnum: {
    id: 'id',
    year: 'year',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    isCurrent: 'isCurrent',
    weeksCount: 'weeksCount',
    playoffWeeks: 'playoffWeeks',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SeasonScalarFieldEnum = (typeof SeasonScalarFieldEnum)[keyof typeof SeasonScalarFieldEnum]


  export const WeekScalarFieldEnum: {
    id: 'id',
    seasonId: 'seasonId',
    weekNumber: 'weekNumber',
    weekType: 'weekType',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    pickDeadline: 'pickDeadline',
    tiebreakerGameId: 'tiebreakerGameId',
    isActive: 'isActive',
    isComplete: 'isComplete',
    isScored: 'isScored',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WeekScalarFieldEnum = (typeof WeekScalarFieldEnum)[keyof typeof WeekScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    abbreviation: 'abbreviation',
    city: 'city',
    name: 'name',
    fullName: 'fullName',
    conference: 'conference',
    division: 'division',
    logoUrl: 'logoUrl',
    primaryColor: 'primaryColor',
    secondaryColor: 'secondaryColor',
    espnId: 'espnId',
    cbsId: 'cbsId',
    foxId: 'foxId',
    currentWins: 'currentWins',
    currentLosses: 'currentLosses',
    currentTies: 'currentTies',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    weekId: 'weekId',
    homeTeamId: 'homeTeamId',
    awayTeamId: 'awayTeamId',
    kickoffTime: 'kickoffTime',
    tvNetwork: 'tvNetwork',
    homeScore: 'homeScore',
    awayScore: 'awayScore',
    status: 'status',
    quarter: 'quarter',
    timeRemaining: 'timeRemaining',
    possession: 'possession',
    espnGameId: 'espnGameId',
    cbsGameId: 'cbsGameId',
    foxGameId: 'foxGameId',
    lastUpdatedFrom: 'lastUpdatedFrom',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const PickScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    weekId: 'weekId',
    gameId: 'gameId',
    selectedTeamId: 'selectedTeamId',
    isHomeTeamPick: 'isHomeTeamPick',
    isCorrect: 'isCorrect',
    pointsAwarded: 'pointsAwarded',
    tiebreakerScore: 'tiebreakerScore',
    tiebreakerDiff: 'tiebreakerDiff',
    submittedAt: 'submittedAt',
    updatedAt: 'updatedAt',
    lockedAt: 'lockedAt'
  };

  export type PickScalarFieldEnum = (typeof PickScalarFieldEnum)[keyof typeof PickScalarFieldEnum]


  export const WeeklyResultScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    weekId: 'weekId',
    correctPicks: 'correctPicks',
    totalPicks: 'totalPicks',
    points: 'points',
    weeklyRank: 'weeklyRank',
    tiebreakerUsed: 'tiebreakerUsed',
    accuracy: 'accuracy',
    streak: 'streak',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WeeklyResultScalarFieldEnum = (typeof WeeklyResultScalarFieldEnum)[keyof typeof WeeklyResultScalarFieldEnum]


  export const LeagueScalarFieldEnum: {
    id: 'id',
    seasonId: 'seasonId',
    name: 'name',
    description: 'description',
    code: 'code',
    isPrivate: 'isPrivate',
    maxMembers: 'maxMembers',
    allowLateJoin: 'allowLateJoin',
    scoringSystem: 'scoringSystem',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type LeagueScalarFieldEnum = (typeof LeagueScalarFieldEnum)[keyof typeof LeagueScalarFieldEnum]


  export const UserLeagueScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    leagueId: 'leagueId',
    role: 'role',
    status: 'status',
    totalPoints: 'totalPoints',
    totalCorrectPicks: 'totalCorrectPicks',
    currentRank: 'currentRank',
    joinedAt: 'joinedAt',
    lastActiveAt: 'lastActiveAt'
  };

  export type UserLeagueScalarFieldEnum = (typeof UserLeagueScalarFieldEnum)[keyof typeof UserLeagueScalarFieldEnum]


  export const LeagueMessageScalarFieldEnum: {
    id: 'id',
    leagueId: 'leagueId',
    userId: 'userId',
    message: 'message',
    isAnnouncement: 'isAnnouncement',
    isPinned: 'isPinned',
    createdAt: 'createdAt',
    editedAt: 'editedAt',
    deletedAt: 'deletedAt'
  };

  export type LeagueMessageScalarFieldEnum = (typeof LeagueMessageScalarFieldEnum)[keyof typeof LeagueMessageScalarFieldEnum]


  export const AchievementScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    iconUrl: 'iconUrl',
    badgeColor: 'badgeColor',
    points: 'points',
    rarity: 'rarity',
    criteria: 'criteria',
    isActive: 'isActive',
    isSecret: 'isSecret',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const UserAchievementScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    achievementId: 'achievementId',
    unlockedAt: 'unlockedAt',
    progress: 'progress',
    metadata: 'metadata'
  };

  export type UserAchievementScalarFieldEnum = (typeof UserAchievementScalarFieldEnum)[keyof typeof UserAchievementScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    actionUrl: 'actionUrl',
    isRead: 'isRead',
    readAt: 'readAt',
    metadata: 'metadata',
    priority: 'priority',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    requestId: 'requestId',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const RssFeedLogScalarFieldEnum: {
    id: 'id',
    source: 'source',
    feedUrl: 'feedUrl',
    feedType: 'feedType',
    success: 'success',
    errorMessage: 'errorMessage',
    itemsProcessed: 'itemsProcessed',
    itemsUpdated: 'itemsUpdated',
    fetchStartedAt: 'fetchStartedAt',
    fetchCompletedAt: 'fetchCompletedAt',
    duration: 'duration',
    responseStatus: 'responseStatus',
    responseHeaders: 'responseHeaders',
    createdAt: 'createdAt'
  };

  export type RssFeedLogScalarFieldEnum = (typeof RssFeedLogScalarFieldEnum)[keyof typeof RssFeedLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    displayName: 'displayName',
    avatarUrl: 'avatarUrl',
    bio: 'bio'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const RefreshTokenOrderByRelevanceFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    family: 'family',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type RefreshTokenOrderByRelevanceFieldEnum = (typeof RefreshTokenOrderByRelevanceFieldEnum)[keyof typeof RefreshTokenOrderByRelevanceFieldEnum]


  export const LoginAttemptOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    identifier: 'identifier',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type LoginAttemptOrderByRelevanceFieldEnum = (typeof LoginAttemptOrderByRelevanceFieldEnum)[keyof typeof LoginAttemptOrderByRelevanceFieldEnum]


  export const SeasonOrderByRelevanceFieldEnum: {
    id: 'id'
  };

  export type SeasonOrderByRelevanceFieldEnum = (typeof SeasonOrderByRelevanceFieldEnum)[keyof typeof SeasonOrderByRelevanceFieldEnum]


  export const WeekOrderByRelevanceFieldEnum: {
    id: 'id',
    seasonId: 'seasonId',
    name: 'name',
    tiebreakerGameId: 'tiebreakerGameId'
  };

  export type WeekOrderByRelevanceFieldEnum = (typeof WeekOrderByRelevanceFieldEnum)[keyof typeof WeekOrderByRelevanceFieldEnum]


  export const TeamOrderByRelevanceFieldEnum: {
    id: 'id',
    abbreviation: 'abbreviation',
    city: 'city',
    name: 'name',
    fullName: 'fullName',
    logoUrl: 'logoUrl',
    primaryColor: 'primaryColor',
    secondaryColor: 'secondaryColor',
    espnId: 'espnId',
    cbsId: 'cbsId',
    foxId: 'foxId'
  };

  export type TeamOrderByRelevanceFieldEnum = (typeof TeamOrderByRelevanceFieldEnum)[keyof typeof TeamOrderByRelevanceFieldEnum]


  export const GameOrderByRelevanceFieldEnum: {
    id: 'id',
    weekId: 'weekId',
    homeTeamId: 'homeTeamId',
    awayTeamId: 'awayTeamId',
    tvNetwork: 'tvNetwork',
    quarter: 'quarter',
    timeRemaining: 'timeRemaining',
    possession: 'possession',
    espnGameId: 'espnGameId',
    cbsGameId: 'cbsGameId',
    foxGameId: 'foxGameId',
    lastUpdatedFrom: 'lastUpdatedFrom'
  };

  export type GameOrderByRelevanceFieldEnum = (typeof GameOrderByRelevanceFieldEnum)[keyof typeof GameOrderByRelevanceFieldEnum]


  export const PickOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    weekId: 'weekId',
    gameId: 'gameId',
    selectedTeamId: 'selectedTeamId'
  };

  export type PickOrderByRelevanceFieldEnum = (typeof PickOrderByRelevanceFieldEnum)[keyof typeof PickOrderByRelevanceFieldEnum]


  export const WeeklyResultOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    weekId: 'weekId'
  };

  export type WeeklyResultOrderByRelevanceFieldEnum = (typeof WeeklyResultOrderByRelevanceFieldEnum)[keyof typeof WeeklyResultOrderByRelevanceFieldEnum]


  export const LeagueOrderByRelevanceFieldEnum: {
    id: 'id',
    seasonId: 'seasonId',
    name: 'name',
    description: 'description',
    code: 'code',
    createdById: 'createdById'
  };

  export type LeagueOrderByRelevanceFieldEnum = (typeof LeagueOrderByRelevanceFieldEnum)[keyof typeof LeagueOrderByRelevanceFieldEnum]


  export const UserLeagueOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    leagueId: 'leagueId'
  };

  export type UserLeagueOrderByRelevanceFieldEnum = (typeof UserLeagueOrderByRelevanceFieldEnum)[keyof typeof UserLeagueOrderByRelevanceFieldEnum]


  export const LeagueMessageOrderByRelevanceFieldEnum: {
    id: 'id',
    leagueId: 'leagueId',
    userId: 'userId',
    message: 'message'
  };

  export type LeagueMessageOrderByRelevanceFieldEnum = (typeof LeagueMessageOrderByRelevanceFieldEnum)[keyof typeof LeagueMessageOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const AchievementOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    iconUrl: 'iconUrl',
    badgeColor: 'badgeColor'
  };

  export type AchievementOrderByRelevanceFieldEnum = (typeof AchievementOrderByRelevanceFieldEnum)[keyof typeof AchievementOrderByRelevanceFieldEnum]


  export const UserAchievementOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    achievementId: 'achievementId'
  };

  export type UserAchievementOrderByRelevanceFieldEnum = (typeof UserAchievementOrderByRelevanceFieldEnum)[keyof typeof UserAchievementOrderByRelevanceFieldEnum]


  export const NotificationOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    actionUrl: 'actionUrl'
  };

  export type NotificationOrderByRelevanceFieldEnum = (typeof NotificationOrderByRelevanceFieldEnum)[keyof typeof NotificationOrderByRelevanceFieldEnum]


  export const AuditLogOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    requestId: 'requestId'
  };

  export type AuditLogOrderByRelevanceFieldEnum = (typeof AuditLogOrderByRelevanceFieldEnum)[keyof typeof AuditLogOrderByRelevanceFieldEnum]


  export const RssFeedLogOrderByRelevanceFieldEnum: {
    id: 'id',
    source: 'source',
    feedUrl: 'feedUrl',
    feedType: 'feedType',
    errorMessage: 'errorMessage'
  };

  export type RssFeedLogOrderByRelevanceFieldEnum = (typeof RssFeedLogOrderByRelevanceFieldEnum)[keyof typeof RssFeedLogOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'WeekType'
   */
  export type EnumWeekTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WeekType'>
    


  /**
   * Reference to a field of type 'WeekType[]'
   */
  export type ListEnumWeekTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WeekType[]'>
    


  /**
   * Reference to a field of type 'Conference'
   */
  export type EnumConferenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Conference'>
    


  /**
   * Reference to a field of type 'Conference[]'
   */
  export type ListEnumConferenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Conference[]'>
    


  /**
   * Reference to a field of type 'Division'
   */
  export type EnumDivisionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Division'>
    


  /**
   * Reference to a field of type 'Division[]'
   */
  export type ListEnumDivisionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Division[]'>
    


  /**
   * Reference to a field of type 'GameStatus'
   */
  export type EnumGameStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameStatus'>
    


  /**
   * Reference to a field of type 'GameStatus[]'
   */
  export type ListEnumGameStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ScoringSystem'
   */
  export type EnumScoringSystemFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScoringSystem'>
    


  /**
   * Reference to a field of type 'ScoringSystem[]'
   */
  export type ListEnumScoringSystemFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScoringSystem[]'>
    


  /**
   * Reference to a field of type 'LeagueRole'
   */
  export type EnumLeagueRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeagueRole'>
    


  /**
   * Reference to a field of type 'LeagueRole[]'
   */
  export type ListEnumLeagueRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeagueRole[]'>
    


  /**
   * Reference to a field of type 'MemberStatus'
   */
  export type EnumMemberStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberStatus'>
    


  /**
   * Reference to a field of type 'MemberStatus[]'
   */
  export type ListEnumMemberStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberStatus[]'>
    


  /**
   * Reference to a field of type 'AchievementCategory'
   */
  export type EnumAchievementCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementCategory'>
    


  /**
   * Reference to a field of type 'AchievementCategory[]'
   */
  export type ListEnumAchievementCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementCategory[]'>
    


  /**
   * Reference to a field of type 'Rarity'
   */
  export type EnumRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rarity'>
    


  /**
   * Reference to a field of type 'Rarity[]'
   */
  export type ListEnumRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rarity[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    displayName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    loginCount?: IntFilter<"User"> | number
    loginAttempts?: IntFilter<"User"> | number
    lockedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    picks?: PickListRelationFilter
    weeklyResults?: WeeklyResultListRelationFilter
    userLeagues?: UserLeagueListRelationFilter
    createdLeagues?: LeagueListRelationFilter
    achievements?: UserAchievementListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    loginHistory?: LoginAttemptListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    messages?: LeagueMessageListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    displayName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    loginCount?: SortOrder
    loginAttempts?: SortOrder
    lockedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    picks?: PickOrderByRelationAggregateInput
    weeklyResults?: WeeklyResultOrderByRelationAggregateInput
    userLeagues?: UserLeagueOrderByRelationAggregateInput
    createdLeagues?: LeagueOrderByRelationAggregateInput
    achievements?: UserAchievementOrderByRelationAggregateInput
    refreshTokens?: RefreshTokenOrderByRelationAggregateInput
    loginHistory?: LoginAttemptOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    messages?: LeagueMessageOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    displayName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    loginCount?: IntFilter<"User"> | number
    loginAttempts?: IntFilter<"User"> | number
    lockedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    picks?: PickListRelationFilter
    weeklyResults?: WeeklyResultListRelationFilter
    userLeagues?: UserLeagueListRelationFilter
    createdLeagues?: LeagueListRelationFilter
    achievements?: UserAchievementListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    loginHistory?: LoginAttemptListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    messages?: LeagueMessageListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    displayName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    loginCount?: SortOrder
    loginAttempts?: SortOrder
    lockedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    displayName?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    loginCount?: IntWithAggregatesFilter<"User"> | number
    loginAttempts?: IntWithAggregatesFilter<"User"> | number
    lockedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: UuidFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: UuidFilter<"RefreshToken"> | string
    family?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"RefreshToken"> | Date | string | null
    ipAddress?: StringNullableFilter<"RefreshToken"> | string | null
    userAgent?: StringNullableFilter<"RefreshToken"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    family?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: RefreshTokenOrderByRelevanceInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: UuidFilter<"RefreshToken"> | string
    family?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"RefreshToken"> | Date | string | null
    ipAddress?: StringNullableFilter<"RefreshToken"> | string | null
    userAgent?: StringNullableFilter<"RefreshToken"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    family?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RefreshToken"> | string
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: UuidWithAggregatesFilter<"RefreshToken"> | string
    family?: StringWithAggregatesFilter<"RefreshToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    isRevoked?: BoolWithAggregatesFilter<"RefreshToken"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"RefreshToken"> | Date | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"RefreshToken"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"RefreshToken"> | string | null
  }

  export type LoginAttemptWhereInput = {
    AND?: LoginAttemptWhereInput | LoginAttemptWhereInput[]
    OR?: LoginAttemptWhereInput[]
    NOT?: LoginAttemptWhereInput | LoginAttemptWhereInput[]
    id?: UuidFilter<"LoginAttempt"> | string
    userId?: UuidNullableFilter<"LoginAttempt"> | string | null
    identifier?: StringFilter<"LoginAttempt"> | string
    ipAddress?: StringFilter<"LoginAttempt"> | string
    userAgent?: StringNullableFilter<"LoginAttempt"> | string | null
    success?: BoolFilter<"LoginAttempt"> | boolean
    createdAt?: DateTimeFilter<"LoginAttempt"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type LoginAttemptOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    identifier?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: LoginAttemptOrderByRelevanceInput
  }

  export type LoginAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoginAttemptWhereInput | LoginAttemptWhereInput[]
    OR?: LoginAttemptWhereInput[]
    NOT?: LoginAttemptWhereInput | LoginAttemptWhereInput[]
    userId?: UuidNullableFilter<"LoginAttempt"> | string | null
    identifier?: StringFilter<"LoginAttempt"> | string
    ipAddress?: StringFilter<"LoginAttempt"> | string
    userAgent?: StringNullableFilter<"LoginAttempt"> | string | null
    success?: BoolFilter<"LoginAttempt"> | boolean
    createdAt?: DateTimeFilter<"LoginAttempt"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type LoginAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    identifier?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    _count?: LoginAttemptCountOrderByAggregateInput
    _max?: LoginAttemptMaxOrderByAggregateInput
    _min?: LoginAttemptMinOrderByAggregateInput
  }

  export type LoginAttemptScalarWhereWithAggregatesInput = {
    AND?: LoginAttemptScalarWhereWithAggregatesInput | LoginAttemptScalarWhereWithAggregatesInput[]
    OR?: LoginAttemptScalarWhereWithAggregatesInput[]
    NOT?: LoginAttemptScalarWhereWithAggregatesInput | LoginAttemptScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"LoginAttempt"> | string
    userId?: UuidNullableWithAggregatesFilter<"LoginAttempt"> | string | null
    identifier?: StringWithAggregatesFilter<"LoginAttempt"> | string
    ipAddress?: StringWithAggregatesFilter<"LoginAttempt"> | string
    userAgent?: StringNullableWithAggregatesFilter<"LoginAttempt"> | string | null
    success?: BoolWithAggregatesFilter<"LoginAttempt"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"LoginAttempt"> | Date | string
  }

  export type SeasonWhereInput = {
    AND?: SeasonWhereInput | SeasonWhereInput[]
    OR?: SeasonWhereInput[]
    NOT?: SeasonWhereInput | SeasonWhereInput[]
    id?: UuidFilter<"Season"> | string
    year?: IntFilter<"Season"> | number
    startDate?: DateTimeFilter<"Season"> | Date | string
    endDate?: DateTimeFilter<"Season"> | Date | string
    isActive?: BoolFilter<"Season"> | boolean
    isCurrent?: BoolFilter<"Season"> | boolean
    weeksCount?: IntFilter<"Season"> | number
    playoffWeeks?: IntFilter<"Season"> | number
    createdAt?: DateTimeFilter<"Season"> | Date | string
    updatedAt?: DateTimeFilter<"Season"> | Date | string
    weeks?: WeekListRelationFilter
    leagues?: LeagueListRelationFilter
  }

  export type SeasonOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    isCurrent?: SortOrder
    weeksCount?: SortOrder
    playoffWeeks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    weeks?: WeekOrderByRelationAggregateInput
    leagues?: LeagueOrderByRelationAggregateInput
    _relevance?: SeasonOrderByRelevanceInput
  }

  export type SeasonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    year?: number
    AND?: SeasonWhereInput | SeasonWhereInput[]
    OR?: SeasonWhereInput[]
    NOT?: SeasonWhereInput | SeasonWhereInput[]
    startDate?: DateTimeFilter<"Season"> | Date | string
    endDate?: DateTimeFilter<"Season"> | Date | string
    isActive?: BoolFilter<"Season"> | boolean
    isCurrent?: BoolFilter<"Season"> | boolean
    weeksCount?: IntFilter<"Season"> | number
    playoffWeeks?: IntFilter<"Season"> | number
    createdAt?: DateTimeFilter<"Season"> | Date | string
    updatedAt?: DateTimeFilter<"Season"> | Date | string
    weeks?: WeekListRelationFilter
    leagues?: LeagueListRelationFilter
  }, "id" | "year">

  export type SeasonOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    isCurrent?: SortOrder
    weeksCount?: SortOrder
    playoffWeeks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SeasonCountOrderByAggregateInput
    _avg?: SeasonAvgOrderByAggregateInput
    _max?: SeasonMaxOrderByAggregateInput
    _min?: SeasonMinOrderByAggregateInput
    _sum?: SeasonSumOrderByAggregateInput
  }

  export type SeasonScalarWhereWithAggregatesInput = {
    AND?: SeasonScalarWhereWithAggregatesInput | SeasonScalarWhereWithAggregatesInput[]
    OR?: SeasonScalarWhereWithAggregatesInput[]
    NOT?: SeasonScalarWhereWithAggregatesInput | SeasonScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Season"> | string
    year?: IntWithAggregatesFilter<"Season"> | number
    startDate?: DateTimeWithAggregatesFilter<"Season"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Season"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Season"> | boolean
    isCurrent?: BoolWithAggregatesFilter<"Season"> | boolean
    weeksCount?: IntWithAggregatesFilter<"Season"> | number
    playoffWeeks?: IntWithAggregatesFilter<"Season"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Season"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Season"> | Date | string
  }

  export type WeekWhereInput = {
    AND?: WeekWhereInput | WeekWhereInput[]
    OR?: WeekWhereInput[]
    NOT?: WeekWhereInput | WeekWhereInput[]
    id?: UuidFilter<"Week"> | string
    seasonId?: UuidFilter<"Week"> | string
    weekNumber?: IntFilter<"Week"> | number
    weekType?: EnumWeekTypeFilter<"Week"> | $Enums.WeekType
    name?: StringNullableFilter<"Week"> | string | null
    startDate?: DateTimeFilter<"Week"> | Date | string
    endDate?: DateTimeFilter<"Week"> | Date | string
    pickDeadline?: DateTimeFilter<"Week"> | Date | string
    tiebreakerGameId?: UuidNullableFilter<"Week"> | string | null
    isActive?: BoolFilter<"Week"> | boolean
    isComplete?: BoolFilter<"Week"> | boolean
    isScored?: BoolFilter<"Week"> | boolean
    createdAt?: DateTimeFilter<"Week"> | Date | string
    updatedAt?: DateTimeFilter<"Week"> | Date | string
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
    games?: GameListRelationFilter
    picks?: PickListRelationFilter
    weeklyResults?: WeeklyResultListRelationFilter
    tiebreakerGame?: XOR<GameNullableRelationFilter, GameWhereInput> | null
  }

  export type WeekOrderByWithRelationInput = {
    id?: SortOrder
    seasonId?: SortOrder
    weekNumber?: SortOrder
    weekType?: SortOrder
    name?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    pickDeadline?: SortOrder
    tiebreakerGameId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isComplete?: SortOrder
    isScored?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    season?: SeasonOrderByWithRelationInput
    games?: GameOrderByRelationAggregateInput
    picks?: PickOrderByRelationAggregateInput
    weeklyResults?: WeeklyResultOrderByRelationAggregateInput
    tiebreakerGame?: GameOrderByWithRelationInput
    _relevance?: WeekOrderByRelevanceInput
  }

  export type WeekWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tiebreakerGameId?: string
    seasonId_weekNumber?: WeekSeasonIdWeekNumberCompoundUniqueInput
    AND?: WeekWhereInput | WeekWhereInput[]
    OR?: WeekWhereInput[]
    NOT?: WeekWhereInput | WeekWhereInput[]
    seasonId?: UuidFilter<"Week"> | string
    weekNumber?: IntFilter<"Week"> | number
    weekType?: EnumWeekTypeFilter<"Week"> | $Enums.WeekType
    name?: StringNullableFilter<"Week"> | string | null
    startDate?: DateTimeFilter<"Week"> | Date | string
    endDate?: DateTimeFilter<"Week"> | Date | string
    pickDeadline?: DateTimeFilter<"Week"> | Date | string
    isActive?: BoolFilter<"Week"> | boolean
    isComplete?: BoolFilter<"Week"> | boolean
    isScored?: BoolFilter<"Week"> | boolean
    createdAt?: DateTimeFilter<"Week"> | Date | string
    updatedAt?: DateTimeFilter<"Week"> | Date | string
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
    games?: GameListRelationFilter
    picks?: PickListRelationFilter
    weeklyResults?: WeeklyResultListRelationFilter
    tiebreakerGame?: XOR<GameNullableRelationFilter, GameWhereInput> | null
  }, "id" | "tiebreakerGameId" | "seasonId_weekNumber">

  export type WeekOrderByWithAggregationInput = {
    id?: SortOrder
    seasonId?: SortOrder
    weekNumber?: SortOrder
    weekType?: SortOrder
    name?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    pickDeadline?: SortOrder
    tiebreakerGameId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isComplete?: SortOrder
    isScored?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WeekCountOrderByAggregateInput
    _avg?: WeekAvgOrderByAggregateInput
    _max?: WeekMaxOrderByAggregateInput
    _min?: WeekMinOrderByAggregateInput
    _sum?: WeekSumOrderByAggregateInput
  }

  export type WeekScalarWhereWithAggregatesInput = {
    AND?: WeekScalarWhereWithAggregatesInput | WeekScalarWhereWithAggregatesInput[]
    OR?: WeekScalarWhereWithAggregatesInput[]
    NOT?: WeekScalarWhereWithAggregatesInput | WeekScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Week"> | string
    seasonId?: UuidWithAggregatesFilter<"Week"> | string
    weekNumber?: IntWithAggregatesFilter<"Week"> | number
    weekType?: EnumWeekTypeWithAggregatesFilter<"Week"> | $Enums.WeekType
    name?: StringNullableWithAggregatesFilter<"Week"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Week"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Week"> | Date | string
    pickDeadline?: DateTimeWithAggregatesFilter<"Week"> | Date | string
    tiebreakerGameId?: UuidNullableWithAggregatesFilter<"Week"> | string | null
    isActive?: BoolWithAggregatesFilter<"Week"> | boolean
    isComplete?: BoolWithAggregatesFilter<"Week"> | boolean
    isScored?: BoolWithAggregatesFilter<"Week"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Week"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Week"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: UuidFilter<"Team"> | string
    abbreviation?: StringFilter<"Team"> | string
    city?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    fullName?: StringFilter<"Team"> | string
    conference?: EnumConferenceFilter<"Team"> | $Enums.Conference
    division?: EnumDivisionFilter<"Team"> | $Enums.Division
    logoUrl?: StringNullableFilter<"Team"> | string | null
    primaryColor?: StringNullableFilter<"Team"> | string | null
    secondaryColor?: StringNullableFilter<"Team"> | string | null
    espnId?: StringNullableFilter<"Team"> | string | null
    cbsId?: StringNullableFilter<"Team"> | string | null
    foxId?: StringNullableFilter<"Team"> | string | null
    currentWins?: IntFilter<"Team"> | number
    currentLosses?: IntFilter<"Team"> | number
    currentTies?: IntFilter<"Team"> | number
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    homeGames?: GameListRelationFilter
    awayGames?: GameListRelationFilter
    picks?: PickListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    abbreviation?: SortOrder
    city?: SortOrder
    name?: SortOrder
    fullName?: SortOrder
    conference?: SortOrder
    division?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    primaryColor?: SortOrderInput | SortOrder
    secondaryColor?: SortOrderInput | SortOrder
    espnId?: SortOrderInput | SortOrder
    cbsId?: SortOrderInput | SortOrder
    foxId?: SortOrderInput | SortOrder
    currentWins?: SortOrder
    currentLosses?: SortOrder
    currentTies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    homeGames?: GameOrderByRelationAggregateInput
    awayGames?: GameOrderByRelationAggregateInput
    picks?: PickOrderByRelationAggregateInput
    _relevance?: TeamOrderByRelevanceInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    abbreviation?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    city?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    fullName?: StringFilter<"Team"> | string
    conference?: EnumConferenceFilter<"Team"> | $Enums.Conference
    division?: EnumDivisionFilter<"Team"> | $Enums.Division
    logoUrl?: StringNullableFilter<"Team"> | string | null
    primaryColor?: StringNullableFilter<"Team"> | string | null
    secondaryColor?: StringNullableFilter<"Team"> | string | null
    espnId?: StringNullableFilter<"Team"> | string | null
    cbsId?: StringNullableFilter<"Team"> | string | null
    foxId?: StringNullableFilter<"Team"> | string | null
    currentWins?: IntFilter<"Team"> | number
    currentLosses?: IntFilter<"Team"> | number
    currentTies?: IntFilter<"Team"> | number
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    homeGames?: GameListRelationFilter
    awayGames?: GameListRelationFilter
    picks?: PickListRelationFilter
  }, "id" | "abbreviation">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    abbreviation?: SortOrder
    city?: SortOrder
    name?: SortOrder
    fullName?: SortOrder
    conference?: SortOrder
    division?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    primaryColor?: SortOrderInput | SortOrder
    secondaryColor?: SortOrderInput | SortOrder
    espnId?: SortOrderInput | SortOrder
    cbsId?: SortOrderInput | SortOrder
    foxId?: SortOrderInput | SortOrder
    currentWins?: SortOrder
    currentLosses?: SortOrder
    currentTies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Team"> | string
    abbreviation?: StringWithAggregatesFilter<"Team"> | string
    city?: StringWithAggregatesFilter<"Team"> | string
    name?: StringWithAggregatesFilter<"Team"> | string
    fullName?: StringWithAggregatesFilter<"Team"> | string
    conference?: EnumConferenceWithAggregatesFilter<"Team"> | $Enums.Conference
    division?: EnumDivisionWithAggregatesFilter<"Team"> | $Enums.Division
    logoUrl?: StringNullableWithAggregatesFilter<"Team"> | string | null
    primaryColor?: StringNullableWithAggregatesFilter<"Team"> | string | null
    secondaryColor?: StringNullableWithAggregatesFilter<"Team"> | string | null
    espnId?: StringNullableWithAggregatesFilter<"Team"> | string | null
    cbsId?: StringNullableWithAggregatesFilter<"Team"> | string | null
    foxId?: StringNullableWithAggregatesFilter<"Team"> | string | null
    currentWins?: IntWithAggregatesFilter<"Team"> | number
    currentLosses?: IntWithAggregatesFilter<"Team"> | number
    currentTies?: IntWithAggregatesFilter<"Team"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: UuidFilter<"Game"> | string
    weekId?: UuidFilter<"Game"> | string
    homeTeamId?: UuidFilter<"Game"> | string
    awayTeamId?: UuidFilter<"Game"> | string
    kickoffTime?: DateTimeFilter<"Game"> | Date | string
    tvNetwork?: StringNullableFilter<"Game"> | string | null
    homeScore?: IntNullableFilter<"Game"> | number | null
    awayScore?: IntNullableFilter<"Game"> | number | null
    status?: EnumGameStatusFilter<"Game"> | $Enums.GameStatus
    quarter?: StringNullableFilter<"Game"> | string | null
    timeRemaining?: StringNullableFilter<"Game"> | string | null
    possession?: StringNullableFilter<"Game"> | string | null
    espnGameId?: StringNullableFilter<"Game"> | string | null
    cbsGameId?: StringNullableFilter<"Game"> | string | null
    foxGameId?: StringNullableFilter<"Game"> | string | null
    lastUpdatedFrom?: StringNullableFilter<"Game"> | string | null
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    week?: XOR<WeekRelationFilter, WeekWhereInput>
    homeTeam?: XOR<TeamRelationFilter, TeamWhereInput>
    awayTeam?: XOR<TeamRelationFilter, TeamWhereInput>
    picks?: PickListRelationFilter
    tiebreakerForWeek?: XOR<WeekNullableRelationFilter, WeekWhereInput> | null
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    weekId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    kickoffTime?: SortOrder
    tvNetwork?: SortOrderInput | SortOrder
    homeScore?: SortOrderInput | SortOrder
    awayScore?: SortOrderInput | SortOrder
    status?: SortOrder
    quarter?: SortOrderInput | SortOrder
    timeRemaining?: SortOrderInput | SortOrder
    possession?: SortOrderInput | SortOrder
    espnGameId?: SortOrderInput | SortOrder
    cbsGameId?: SortOrderInput | SortOrder
    foxGameId?: SortOrderInput | SortOrder
    lastUpdatedFrom?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    week?: WeekOrderByWithRelationInput
    homeTeam?: TeamOrderByWithRelationInput
    awayTeam?: TeamOrderByWithRelationInput
    picks?: PickOrderByRelationAggregateInput
    tiebreakerForWeek?: WeekOrderByWithRelationInput
    _relevance?: GameOrderByRelevanceInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    weekId_espnGameId?: GameWeekIdEspnGameIdCompoundUniqueInput
    weekId_cbsGameId?: GameWeekIdCbsGameIdCompoundUniqueInput
    weekId_foxGameId?: GameWeekIdFoxGameIdCompoundUniqueInput
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    weekId?: UuidFilter<"Game"> | string
    homeTeamId?: UuidFilter<"Game"> | string
    awayTeamId?: UuidFilter<"Game"> | string
    kickoffTime?: DateTimeFilter<"Game"> | Date | string
    tvNetwork?: StringNullableFilter<"Game"> | string | null
    homeScore?: IntNullableFilter<"Game"> | number | null
    awayScore?: IntNullableFilter<"Game"> | number | null
    status?: EnumGameStatusFilter<"Game"> | $Enums.GameStatus
    quarter?: StringNullableFilter<"Game"> | string | null
    timeRemaining?: StringNullableFilter<"Game"> | string | null
    possession?: StringNullableFilter<"Game"> | string | null
    espnGameId?: StringNullableFilter<"Game"> | string | null
    cbsGameId?: StringNullableFilter<"Game"> | string | null
    foxGameId?: StringNullableFilter<"Game"> | string | null
    lastUpdatedFrom?: StringNullableFilter<"Game"> | string | null
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    week?: XOR<WeekRelationFilter, WeekWhereInput>
    homeTeam?: XOR<TeamRelationFilter, TeamWhereInput>
    awayTeam?: XOR<TeamRelationFilter, TeamWhereInput>
    picks?: PickListRelationFilter
    tiebreakerForWeek?: XOR<WeekNullableRelationFilter, WeekWhereInput> | null
  }, "id" | "weekId_espnGameId" | "weekId_cbsGameId" | "weekId_foxGameId">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    weekId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    kickoffTime?: SortOrder
    tvNetwork?: SortOrderInput | SortOrder
    homeScore?: SortOrderInput | SortOrder
    awayScore?: SortOrderInput | SortOrder
    status?: SortOrder
    quarter?: SortOrderInput | SortOrder
    timeRemaining?: SortOrderInput | SortOrder
    possession?: SortOrderInput | SortOrder
    espnGameId?: SortOrderInput | SortOrder
    cbsGameId?: SortOrderInput | SortOrder
    foxGameId?: SortOrderInput | SortOrder
    lastUpdatedFrom?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Game"> | string
    weekId?: UuidWithAggregatesFilter<"Game"> | string
    homeTeamId?: UuidWithAggregatesFilter<"Game"> | string
    awayTeamId?: UuidWithAggregatesFilter<"Game"> | string
    kickoffTime?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    tvNetwork?: StringNullableWithAggregatesFilter<"Game"> | string | null
    homeScore?: IntNullableWithAggregatesFilter<"Game"> | number | null
    awayScore?: IntNullableWithAggregatesFilter<"Game"> | number | null
    status?: EnumGameStatusWithAggregatesFilter<"Game"> | $Enums.GameStatus
    quarter?: StringNullableWithAggregatesFilter<"Game"> | string | null
    timeRemaining?: StringNullableWithAggregatesFilter<"Game"> | string | null
    possession?: StringNullableWithAggregatesFilter<"Game"> | string | null
    espnGameId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    cbsGameId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    foxGameId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    lastUpdatedFrom?: StringNullableWithAggregatesFilter<"Game"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
  }

  export type PickWhereInput = {
    AND?: PickWhereInput | PickWhereInput[]
    OR?: PickWhereInput[]
    NOT?: PickWhereInput | PickWhereInput[]
    id?: UuidFilter<"Pick"> | string
    userId?: UuidFilter<"Pick"> | string
    weekId?: UuidFilter<"Pick"> | string
    gameId?: UuidFilter<"Pick"> | string
    selectedTeamId?: UuidNullableFilter<"Pick"> | string | null
    isHomeTeamPick?: BoolNullableFilter<"Pick"> | boolean | null
    isCorrect?: BoolNullableFilter<"Pick"> | boolean | null
    pointsAwarded?: IntFilter<"Pick"> | number
    tiebreakerScore?: IntNullableFilter<"Pick"> | number | null
    tiebreakerDiff?: IntNullableFilter<"Pick"> | number | null
    submittedAt?: DateTimeFilter<"Pick"> | Date | string
    updatedAt?: DateTimeFilter<"Pick"> | Date | string
    lockedAt?: DateTimeNullableFilter<"Pick"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    week?: XOR<WeekRelationFilter, WeekWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
    selectedTeam?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }

  export type PickOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    gameId?: SortOrder
    selectedTeamId?: SortOrderInput | SortOrder
    isHomeTeamPick?: SortOrderInput | SortOrder
    isCorrect?: SortOrderInput | SortOrder
    pointsAwarded?: SortOrder
    tiebreakerScore?: SortOrderInput | SortOrder
    tiebreakerDiff?: SortOrderInput | SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    week?: WeekOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
    selectedTeam?: TeamOrderByWithRelationInput
    _relevance?: PickOrderByRelevanceInput
  }

  export type PickWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_gameId?: PickUserIdGameIdCompoundUniqueInput
    AND?: PickWhereInput | PickWhereInput[]
    OR?: PickWhereInput[]
    NOT?: PickWhereInput | PickWhereInput[]
    userId?: UuidFilter<"Pick"> | string
    weekId?: UuidFilter<"Pick"> | string
    gameId?: UuidFilter<"Pick"> | string
    selectedTeamId?: UuidNullableFilter<"Pick"> | string | null
    isHomeTeamPick?: BoolNullableFilter<"Pick"> | boolean | null
    isCorrect?: BoolNullableFilter<"Pick"> | boolean | null
    pointsAwarded?: IntFilter<"Pick"> | number
    tiebreakerScore?: IntNullableFilter<"Pick"> | number | null
    tiebreakerDiff?: IntNullableFilter<"Pick"> | number | null
    submittedAt?: DateTimeFilter<"Pick"> | Date | string
    updatedAt?: DateTimeFilter<"Pick"> | Date | string
    lockedAt?: DateTimeNullableFilter<"Pick"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    week?: XOR<WeekRelationFilter, WeekWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
    selectedTeam?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }, "id" | "userId_gameId">

  export type PickOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    gameId?: SortOrder
    selectedTeamId?: SortOrderInput | SortOrder
    isHomeTeamPick?: SortOrderInput | SortOrder
    isCorrect?: SortOrderInput | SortOrder
    pointsAwarded?: SortOrder
    tiebreakerScore?: SortOrderInput | SortOrder
    tiebreakerDiff?: SortOrderInput | SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrderInput | SortOrder
    _count?: PickCountOrderByAggregateInput
    _avg?: PickAvgOrderByAggregateInput
    _max?: PickMaxOrderByAggregateInput
    _min?: PickMinOrderByAggregateInput
    _sum?: PickSumOrderByAggregateInput
  }

  export type PickScalarWhereWithAggregatesInput = {
    AND?: PickScalarWhereWithAggregatesInput | PickScalarWhereWithAggregatesInput[]
    OR?: PickScalarWhereWithAggregatesInput[]
    NOT?: PickScalarWhereWithAggregatesInput | PickScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Pick"> | string
    userId?: UuidWithAggregatesFilter<"Pick"> | string
    weekId?: UuidWithAggregatesFilter<"Pick"> | string
    gameId?: UuidWithAggregatesFilter<"Pick"> | string
    selectedTeamId?: UuidNullableWithAggregatesFilter<"Pick"> | string | null
    isHomeTeamPick?: BoolNullableWithAggregatesFilter<"Pick"> | boolean | null
    isCorrect?: BoolNullableWithAggregatesFilter<"Pick"> | boolean | null
    pointsAwarded?: IntWithAggregatesFilter<"Pick"> | number
    tiebreakerScore?: IntNullableWithAggregatesFilter<"Pick"> | number | null
    tiebreakerDiff?: IntNullableWithAggregatesFilter<"Pick"> | number | null
    submittedAt?: DateTimeWithAggregatesFilter<"Pick"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pick"> | Date | string
    lockedAt?: DateTimeNullableWithAggregatesFilter<"Pick"> | Date | string | null
  }

  export type WeeklyResultWhereInput = {
    AND?: WeeklyResultWhereInput | WeeklyResultWhereInput[]
    OR?: WeeklyResultWhereInput[]
    NOT?: WeeklyResultWhereInput | WeeklyResultWhereInput[]
    id?: UuidFilter<"WeeklyResult"> | string
    userId?: UuidFilter<"WeeklyResult"> | string
    weekId?: UuidFilter<"WeeklyResult"> | string
    correctPicks?: IntFilter<"WeeklyResult"> | number
    totalPicks?: IntFilter<"WeeklyResult"> | number
    points?: IntFilter<"WeeklyResult"> | number
    weeklyRank?: IntNullableFilter<"WeeklyResult"> | number | null
    tiebreakerUsed?: BoolFilter<"WeeklyResult"> | boolean
    accuracy?: FloatNullableFilter<"WeeklyResult"> | number | null
    streak?: IntFilter<"WeeklyResult"> | number
    createdAt?: DateTimeFilter<"WeeklyResult"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklyResult"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    week?: XOR<WeekRelationFilter, WeekWhereInput>
  }

  export type WeeklyResultOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    correctPicks?: SortOrder
    totalPicks?: SortOrder
    points?: SortOrder
    weeklyRank?: SortOrderInput | SortOrder
    tiebreakerUsed?: SortOrder
    accuracy?: SortOrderInput | SortOrder
    streak?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    week?: WeekOrderByWithRelationInput
    _relevance?: WeeklyResultOrderByRelevanceInput
  }

  export type WeeklyResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_weekId?: WeeklyResultUserIdWeekIdCompoundUniqueInput
    AND?: WeeklyResultWhereInput | WeeklyResultWhereInput[]
    OR?: WeeklyResultWhereInput[]
    NOT?: WeeklyResultWhereInput | WeeklyResultWhereInput[]
    userId?: UuidFilter<"WeeklyResult"> | string
    weekId?: UuidFilter<"WeeklyResult"> | string
    correctPicks?: IntFilter<"WeeklyResult"> | number
    totalPicks?: IntFilter<"WeeklyResult"> | number
    points?: IntFilter<"WeeklyResult"> | number
    weeklyRank?: IntNullableFilter<"WeeklyResult"> | number | null
    tiebreakerUsed?: BoolFilter<"WeeklyResult"> | boolean
    accuracy?: FloatNullableFilter<"WeeklyResult"> | number | null
    streak?: IntFilter<"WeeklyResult"> | number
    createdAt?: DateTimeFilter<"WeeklyResult"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklyResult"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    week?: XOR<WeekRelationFilter, WeekWhereInput>
  }, "id" | "userId_weekId">

  export type WeeklyResultOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    correctPicks?: SortOrder
    totalPicks?: SortOrder
    points?: SortOrder
    weeklyRank?: SortOrderInput | SortOrder
    tiebreakerUsed?: SortOrder
    accuracy?: SortOrderInput | SortOrder
    streak?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WeeklyResultCountOrderByAggregateInput
    _avg?: WeeklyResultAvgOrderByAggregateInput
    _max?: WeeklyResultMaxOrderByAggregateInput
    _min?: WeeklyResultMinOrderByAggregateInput
    _sum?: WeeklyResultSumOrderByAggregateInput
  }

  export type WeeklyResultScalarWhereWithAggregatesInput = {
    AND?: WeeklyResultScalarWhereWithAggregatesInput | WeeklyResultScalarWhereWithAggregatesInput[]
    OR?: WeeklyResultScalarWhereWithAggregatesInput[]
    NOT?: WeeklyResultScalarWhereWithAggregatesInput | WeeklyResultScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"WeeklyResult"> | string
    userId?: UuidWithAggregatesFilter<"WeeklyResult"> | string
    weekId?: UuidWithAggregatesFilter<"WeeklyResult"> | string
    correctPicks?: IntWithAggregatesFilter<"WeeklyResult"> | number
    totalPicks?: IntWithAggregatesFilter<"WeeklyResult"> | number
    points?: IntWithAggregatesFilter<"WeeklyResult"> | number
    weeklyRank?: IntNullableWithAggregatesFilter<"WeeklyResult"> | number | null
    tiebreakerUsed?: BoolWithAggregatesFilter<"WeeklyResult"> | boolean
    accuracy?: FloatNullableWithAggregatesFilter<"WeeklyResult"> | number | null
    streak?: IntWithAggregatesFilter<"WeeklyResult"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WeeklyResult"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WeeklyResult"> | Date | string
  }

  export type LeagueWhereInput = {
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    id?: UuidFilter<"League"> | string
    seasonId?: UuidFilter<"League"> | string
    name?: StringFilter<"League"> | string
    description?: StringNullableFilter<"League"> | string | null
    code?: StringFilter<"League"> | string
    isPrivate?: BoolFilter<"League"> | boolean
    maxMembers?: IntNullableFilter<"League"> | number | null
    allowLateJoin?: BoolFilter<"League"> | boolean
    scoringSystem?: EnumScoringSystemFilter<"League"> | $Enums.ScoringSystem
    createdById?: UuidFilter<"League"> | string
    createdAt?: DateTimeFilter<"League"> | Date | string
    updatedAt?: DateTimeFilter<"League"> | Date | string
    deletedAt?: DateTimeNullableFilter<"League"> | Date | string | null
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    members?: UserLeagueListRelationFilter
    messages?: LeagueMessageListRelationFilter
  }

  export type LeagueOrderByWithRelationInput = {
    id?: SortOrder
    seasonId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    isPrivate?: SortOrder
    maxMembers?: SortOrderInput | SortOrder
    allowLateJoin?: SortOrder
    scoringSystem?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    season?: SeasonOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    members?: UserLeagueOrderByRelationAggregateInput
    messages?: LeagueMessageOrderByRelationAggregateInput
    _relevance?: LeagueOrderByRelevanceInput
  }

  export type LeagueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    seasonId?: UuidFilter<"League"> | string
    name?: StringFilter<"League"> | string
    description?: StringNullableFilter<"League"> | string | null
    isPrivate?: BoolFilter<"League"> | boolean
    maxMembers?: IntNullableFilter<"League"> | number | null
    allowLateJoin?: BoolFilter<"League"> | boolean
    scoringSystem?: EnumScoringSystemFilter<"League"> | $Enums.ScoringSystem
    createdById?: UuidFilter<"League"> | string
    createdAt?: DateTimeFilter<"League"> | Date | string
    updatedAt?: DateTimeFilter<"League"> | Date | string
    deletedAt?: DateTimeNullableFilter<"League"> | Date | string | null
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    members?: UserLeagueListRelationFilter
    messages?: LeagueMessageListRelationFilter
  }, "id" | "code">

  export type LeagueOrderByWithAggregationInput = {
    id?: SortOrder
    seasonId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    isPrivate?: SortOrder
    maxMembers?: SortOrderInput | SortOrder
    allowLateJoin?: SortOrder
    scoringSystem?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: LeagueCountOrderByAggregateInput
    _avg?: LeagueAvgOrderByAggregateInput
    _max?: LeagueMaxOrderByAggregateInput
    _min?: LeagueMinOrderByAggregateInput
    _sum?: LeagueSumOrderByAggregateInput
  }

  export type LeagueScalarWhereWithAggregatesInput = {
    AND?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    OR?: LeagueScalarWhereWithAggregatesInput[]
    NOT?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"League"> | string
    seasonId?: UuidWithAggregatesFilter<"League"> | string
    name?: StringWithAggregatesFilter<"League"> | string
    description?: StringNullableWithAggregatesFilter<"League"> | string | null
    code?: StringWithAggregatesFilter<"League"> | string
    isPrivate?: BoolWithAggregatesFilter<"League"> | boolean
    maxMembers?: IntNullableWithAggregatesFilter<"League"> | number | null
    allowLateJoin?: BoolWithAggregatesFilter<"League"> | boolean
    scoringSystem?: EnumScoringSystemWithAggregatesFilter<"League"> | $Enums.ScoringSystem
    createdById?: UuidWithAggregatesFilter<"League"> | string
    createdAt?: DateTimeWithAggregatesFilter<"League"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"League"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"League"> | Date | string | null
  }

  export type UserLeagueWhereInput = {
    AND?: UserLeagueWhereInput | UserLeagueWhereInput[]
    OR?: UserLeagueWhereInput[]
    NOT?: UserLeagueWhereInput | UserLeagueWhereInput[]
    id?: UuidFilter<"UserLeague"> | string
    userId?: UuidFilter<"UserLeague"> | string
    leagueId?: UuidFilter<"UserLeague"> | string
    role?: EnumLeagueRoleFilter<"UserLeague"> | $Enums.LeagueRole
    status?: EnumMemberStatusFilter<"UserLeague"> | $Enums.MemberStatus
    totalPoints?: IntFilter<"UserLeague"> | number
    totalCorrectPicks?: IntFilter<"UserLeague"> | number
    currentRank?: IntNullableFilter<"UserLeague"> | number | null
    joinedAt?: DateTimeFilter<"UserLeague"> | Date | string
    lastActiveAt?: DateTimeFilter<"UserLeague"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
  }

  export type UserLeagueOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    leagueId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    totalPoints?: SortOrder
    totalCorrectPicks?: SortOrder
    currentRank?: SortOrderInput | SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
    user?: UserOrderByWithRelationInput
    league?: LeagueOrderByWithRelationInput
    _relevance?: UserLeagueOrderByRelevanceInput
  }

  export type UserLeagueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_leagueId?: UserLeagueUserIdLeagueIdCompoundUniqueInput
    AND?: UserLeagueWhereInput | UserLeagueWhereInput[]
    OR?: UserLeagueWhereInput[]
    NOT?: UserLeagueWhereInput | UserLeagueWhereInput[]
    userId?: UuidFilter<"UserLeague"> | string
    leagueId?: UuidFilter<"UserLeague"> | string
    role?: EnumLeagueRoleFilter<"UserLeague"> | $Enums.LeagueRole
    status?: EnumMemberStatusFilter<"UserLeague"> | $Enums.MemberStatus
    totalPoints?: IntFilter<"UserLeague"> | number
    totalCorrectPicks?: IntFilter<"UserLeague"> | number
    currentRank?: IntNullableFilter<"UserLeague"> | number | null
    joinedAt?: DateTimeFilter<"UserLeague"> | Date | string
    lastActiveAt?: DateTimeFilter<"UserLeague"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
  }, "id" | "userId_leagueId">

  export type UserLeagueOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    leagueId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    totalPoints?: SortOrder
    totalCorrectPicks?: SortOrder
    currentRank?: SortOrderInput | SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
    _count?: UserLeagueCountOrderByAggregateInput
    _avg?: UserLeagueAvgOrderByAggregateInput
    _max?: UserLeagueMaxOrderByAggregateInput
    _min?: UserLeagueMinOrderByAggregateInput
    _sum?: UserLeagueSumOrderByAggregateInput
  }

  export type UserLeagueScalarWhereWithAggregatesInput = {
    AND?: UserLeagueScalarWhereWithAggregatesInput | UserLeagueScalarWhereWithAggregatesInput[]
    OR?: UserLeagueScalarWhereWithAggregatesInput[]
    NOT?: UserLeagueScalarWhereWithAggregatesInput | UserLeagueScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"UserLeague"> | string
    userId?: UuidWithAggregatesFilter<"UserLeague"> | string
    leagueId?: UuidWithAggregatesFilter<"UserLeague"> | string
    role?: EnumLeagueRoleWithAggregatesFilter<"UserLeague"> | $Enums.LeagueRole
    status?: EnumMemberStatusWithAggregatesFilter<"UserLeague"> | $Enums.MemberStatus
    totalPoints?: IntWithAggregatesFilter<"UserLeague"> | number
    totalCorrectPicks?: IntWithAggregatesFilter<"UserLeague"> | number
    currentRank?: IntNullableWithAggregatesFilter<"UserLeague"> | number | null
    joinedAt?: DateTimeWithAggregatesFilter<"UserLeague"> | Date | string
    lastActiveAt?: DateTimeWithAggregatesFilter<"UserLeague"> | Date | string
  }

  export type LeagueMessageWhereInput = {
    AND?: LeagueMessageWhereInput | LeagueMessageWhereInput[]
    OR?: LeagueMessageWhereInput[]
    NOT?: LeagueMessageWhereInput | LeagueMessageWhereInput[]
    id?: UuidFilter<"LeagueMessage"> | string
    leagueId?: UuidFilter<"LeagueMessage"> | string
    userId?: UuidFilter<"LeagueMessage"> | string
    message?: StringFilter<"LeagueMessage"> | string
    isAnnouncement?: BoolFilter<"LeagueMessage"> | boolean
    isPinned?: BoolFilter<"LeagueMessage"> | boolean
    createdAt?: DateTimeFilter<"LeagueMessage"> | Date | string
    editedAt?: DateTimeNullableFilter<"LeagueMessage"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"LeagueMessage"> | Date | string | null
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LeagueMessageOrderByWithRelationInput = {
    id?: SortOrder
    leagueId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    isAnnouncement?: SortOrder
    isPinned?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    league?: LeagueOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: LeagueMessageOrderByRelevanceInput
  }

  export type LeagueMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeagueMessageWhereInput | LeagueMessageWhereInput[]
    OR?: LeagueMessageWhereInput[]
    NOT?: LeagueMessageWhereInput | LeagueMessageWhereInput[]
    leagueId?: UuidFilter<"LeagueMessage"> | string
    userId?: UuidFilter<"LeagueMessage"> | string
    message?: StringFilter<"LeagueMessage"> | string
    isAnnouncement?: BoolFilter<"LeagueMessage"> | boolean
    isPinned?: BoolFilter<"LeagueMessage"> | boolean
    createdAt?: DateTimeFilter<"LeagueMessage"> | Date | string
    editedAt?: DateTimeNullableFilter<"LeagueMessage"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"LeagueMessage"> | Date | string | null
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type LeagueMessageOrderByWithAggregationInput = {
    id?: SortOrder
    leagueId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    isAnnouncement?: SortOrder
    isPinned?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: LeagueMessageCountOrderByAggregateInput
    _max?: LeagueMessageMaxOrderByAggregateInput
    _min?: LeagueMessageMinOrderByAggregateInput
  }

  export type LeagueMessageScalarWhereWithAggregatesInput = {
    AND?: LeagueMessageScalarWhereWithAggregatesInput | LeagueMessageScalarWhereWithAggregatesInput[]
    OR?: LeagueMessageScalarWhereWithAggregatesInput[]
    NOT?: LeagueMessageScalarWhereWithAggregatesInput | LeagueMessageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"LeagueMessage"> | string
    leagueId?: UuidWithAggregatesFilter<"LeagueMessage"> | string
    userId?: UuidWithAggregatesFilter<"LeagueMessage"> | string
    message?: StringWithAggregatesFilter<"LeagueMessage"> | string
    isAnnouncement?: BoolWithAggregatesFilter<"LeagueMessage"> | boolean
    isPinned?: BoolWithAggregatesFilter<"LeagueMessage"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"LeagueMessage"> | Date | string
    editedAt?: DateTimeNullableWithAggregatesFilter<"LeagueMessage"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"LeagueMessage"> | Date | string | null
  }

  export type AchievementWhereInput = {
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    id?: UuidFilter<"Achievement"> | string
    name?: StringFilter<"Achievement"> | string
    description?: StringFilter<"Achievement"> | string
    category?: EnumAchievementCategoryFilter<"Achievement"> | $Enums.AchievementCategory
    iconUrl?: StringNullableFilter<"Achievement"> | string | null
    badgeColor?: StringNullableFilter<"Achievement"> | string | null
    points?: IntFilter<"Achievement"> | number
    rarity?: EnumRarityFilter<"Achievement"> | $Enums.Rarity
    criteria?: JsonFilter<"Achievement">
    isActive?: BoolFilter<"Achievement"> | boolean
    isSecret?: BoolFilter<"Achievement"> | boolean
    createdAt?: DateTimeFilter<"Achievement"> | Date | string
    updatedAt?: DateTimeFilter<"Achievement"> | Date | string
    users?: UserAchievementListRelationFilter
  }

  export type AchievementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    badgeColor?: SortOrderInput | SortOrder
    points?: SortOrder
    rarity?: SortOrder
    criteria?: SortOrder
    isActive?: SortOrder
    isSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserAchievementOrderByRelationAggregateInput
    _relevance?: AchievementOrderByRelevanceInput
  }

  export type AchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    description?: StringFilter<"Achievement"> | string
    category?: EnumAchievementCategoryFilter<"Achievement"> | $Enums.AchievementCategory
    iconUrl?: StringNullableFilter<"Achievement"> | string | null
    badgeColor?: StringNullableFilter<"Achievement"> | string | null
    points?: IntFilter<"Achievement"> | number
    rarity?: EnumRarityFilter<"Achievement"> | $Enums.Rarity
    criteria?: JsonFilter<"Achievement">
    isActive?: BoolFilter<"Achievement"> | boolean
    isSecret?: BoolFilter<"Achievement"> | boolean
    createdAt?: DateTimeFilter<"Achievement"> | Date | string
    updatedAt?: DateTimeFilter<"Achievement"> | Date | string
    users?: UserAchievementListRelationFilter
  }, "id" | "name">

  export type AchievementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    badgeColor?: SortOrderInput | SortOrder
    points?: SortOrder
    rarity?: SortOrder
    criteria?: SortOrder
    isActive?: SortOrder
    isSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _avg?: AchievementAvgOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
    _sum?: AchievementSumOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    OR?: AchievementScalarWhereWithAggregatesInput[]
    NOT?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Achievement"> | string
    name?: StringWithAggregatesFilter<"Achievement"> | string
    description?: StringWithAggregatesFilter<"Achievement"> | string
    category?: EnumAchievementCategoryWithAggregatesFilter<"Achievement"> | $Enums.AchievementCategory
    iconUrl?: StringNullableWithAggregatesFilter<"Achievement"> | string | null
    badgeColor?: StringNullableWithAggregatesFilter<"Achievement"> | string | null
    points?: IntWithAggregatesFilter<"Achievement"> | number
    rarity?: EnumRarityWithAggregatesFilter<"Achievement"> | $Enums.Rarity
    criteria?: JsonWithAggregatesFilter<"Achievement">
    isActive?: BoolWithAggregatesFilter<"Achievement"> | boolean
    isSecret?: BoolWithAggregatesFilter<"Achievement"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Achievement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Achievement"> | Date | string
  }

  export type UserAchievementWhereInput = {
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    id?: UuidFilter<"UserAchievement"> | string
    userId?: UuidFilter<"UserAchievement"> | string
    achievementId?: UuidFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    progress?: IntFilter<"UserAchievement"> | number
    metadata?: JsonNullableFilter<"UserAchievement">
    user?: XOR<UserRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementRelationFilter, AchievementWhereInput>
  }

  export type UserAchievementOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
    metadata?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    achievement?: AchievementOrderByWithRelationInput
    _relevance?: UserAchievementOrderByRelevanceInput
  }

  export type UserAchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_achievementId?: UserAchievementUserIdAchievementIdCompoundUniqueInput
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    userId?: UuidFilter<"UserAchievement"> | string
    achievementId?: UuidFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    progress?: IntFilter<"UserAchievement"> | number
    metadata?: JsonNullableFilter<"UserAchievement">
    user?: XOR<UserRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementRelationFilter, AchievementWhereInput>
  }, "id" | "userId_achievementId">

  export type UserAchievementOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: UserAchievementCountOrderByAggregateInput
    _avg?: UserAchievementAvgOrderByAggregateInput
    _max?: UserAchievementMaxOrderByAggregateInput
    _min?: UserAchievementMinOrderByAggregateInput
    _sum?: UserAchievementSumOrderByAggregateInput
  }

  export type UserAchievementScalarWhereWithAggregatesInput = {
    AND?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    OR?: UserAchievementScalarWhereWithAggregatesInput[]
    NOT?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"UserAchievement"> | string
    userId?: UuidWithAggregatesFilter<"UserAchievement"> | string
    achievementId?: UuidWithAggregatesFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
    progress?: IntWithAggregatesFilter<"UserAchievement"> | number
    metadata?: JsonNullableWithAggregatesFilter<"UserAchievement">
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: UuidFilter<"Notification"> | string
    userId?: UuidFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    metadata?: JsonNullableFilter<"Notification">
    priority?: EnumPriorityFilter<"Notification"> | $Enums.Priority
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    priority?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: NotificationOrderByRelevanceInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: UuidFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    metadata?: JsonNullableFilter<"Notification">
    priority?: EnumPriorityFilter<"Notification"> | $Enums.Priority
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    priority?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Notification"> | string
    userId?: UuidWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Notification">
    priority?: EnumPriorityWithAggregatesFilter<"Notification"> | $Enums.Priority
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: UuidFilter<"AuditLog"> | string
    userId?: UuidNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: UuidNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    requestId?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    requestId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AuditLogOrderByRelevanceInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: UuidNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: UuidNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    requestId?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    requestId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AuditLog"> | string
    userId?: UuidNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: UuidNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    requestId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type RssFeedLogWhereInput = {
    AND?: RssFeedLogWhereInput | RssFeedLogWhereInput[]
    OR?: RssFeedLogWhereInput[]
    NOT?: RssFeedLogWhereInput | RssFeedLogWhereInput[]
    id?: UuidFilter<"RssFeedLog"> | string
    source?: StringFilter<"RssFeedLog"> | string
    feedUrl?: StringFilter<"RssFeedLog"> | string
    feedType?: StringFilter<"RssFeedLog"> | string
    success?: BoolFilter<"RssFeedLog"> | boolean
    errorMessage?: StringNullableFilter<"RssFeedLog"> | string | null
    itemsProcessed?: IntFilter<"RssFeedLog"> | number
    itemsUpdated?: IntFilter<"RssFeedLog"> | number
    fetchStartedAt?: DateTimeFilter<"RssFeedLog"> | Date | string
    fetchCompletedAt?: DateTimeNullableFilter<"RssFeedLog"> | Date | string | null
    duration?: IntNullableFilter<"RssFeedLog"> | number | null
    responseStatus?: IntNullableFilter<"RssFeedLog"> | number | null
    responseHeaders?: JsonNullableFilter<"RssFeedLog">
    createdAt?: DateTimeFilter<"RssFeedLog"> | Date | string
  }

  export type RssFeedLogOrderByWithRelationInput = {
    id?: SortOrder
    source?: SortOrder
    feedUrl?: SortOrder
    feedType?: SortOrder
    success?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    itemsProcessed?: SortOrder
    itemsUpdated?: SortOrder
    fetchStartedAt?: SortOrder
    fetchCompletedAt?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    responseStatus?: SortOrderInput | SortOrder
    responseHeaders?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _relevance?: RssFeedLogOrderByRelevanceInput
  }

  export type RssFeedLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RssFeedLogWhereInput | RssFeedLogWhereInput[]
    OR?: RssFeedLogWhereInput[]
    NOT?: RssFeedLogWhereInput | RssFeedLogWhereInput[]
    source?: StringFilter<"RssFeedLog"> | string
    feedUrl?: StringFilter<"RssFeedLog"> | string
    feedType?: StringFilter<"RssFeedLog"> | string
    success?: BoolFilter<"RssFeedLog"> | boolean
    errorMessage?: StringNullableFilter<"RssFeedLog"> | string | null
    itemsProcessed?: IntFilter<"RssFeedLog"> | number
    itemsUpdated?: IntFilter<"RssFeedLog"> | number
    fetchStartedAt?: DateTimeFilter<"RssFeedLog"> | Date | string
    fetchCompletedAt?: DateTimeNullableFilter<"RssFeedLog"> | Date | string | null
    duration?: IntNullableFilter<"RssFeedLog"> | number | null
    responseStatus?: IntNullableFilter<"RssFeedLog"> | number | null
    responseHeaders?: JsonNullableFilter<"RssFeedLog">
    createdAt?: DateTimeFilter<"RssFeedLog"> | Date | string
  }, "id">

  export type RssFeedLogOrderByWithAggregationInput = {
    id?: SortOrder
    source?: SortOrder
    feedUrl?: SortOrder
    feedType?: SortOrder
    success?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    itemsProcessed?: SortOrder
    itemsUpdated?: SortOrder
    fetchStartedAt?: SortOrder
    fetchCompletedAt?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    responseStatus?: SortOrderInput | SortOrder
    responseHeaders?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RssFeedLogCountOrderByAggregateInput
    _avg?: RssFeedLogAvgOrderByAggregateInput
    _max?: RssFeedLogMaxOrderByAggregateInput
    _min?: RssFeedLogMinOrderByAggregateInput
    _sum?: RssFeedLogSumOrderByAggregateInput
  }

  export type RssFeedLogScalarWhereWithAggregatesInput = {
    AND?: RssFeedLogScalarWhereWithAggregatesInput | RssFeedLogScalarWhereWithAggregatesInput[]
    OR?: RssFeedLogScalarWhereWithAggregatesInput[]
    NOT?: RssFeedLogScalarWhereWithAggregatesInput | RssFeedLogScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RssFeedLog"> | string
    source?: StringWithAggregatesFilter<"RssFeedLog"> | string
    feedUrl?: StringWithAggregatesFilter<"RssFeedLog"> | string
    feedType?: StringWithAggregatesFilter<"RssFeedLog"> | string
    success?: BoolWithAggregatesFilter<"RssFeedLog"> | boolean
    errorMessage?: StringNullableWithAggregatesFilter<"RssFeedLog"> | string | null
    itemsProcessed?: IntWithAggregatesFilter<"RssFeedLog"> | number
    itemsUpdated?: IntWithAggregatesFilter<"RssFeedLog"> | number
    fetchStartedAt?: DateTimeWithAggregatesFilter<"RssFeedLog"> | Date | string
    fetchCompletedAt?: DateTimeNullableWithAggregatesFilter<"RssFeedLog"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"RssFeedLog"> | number | null
    responseStatus?: IntNullableWithAggregatesFilter<"RssFeedLog"> | number | null
    responseHeaders?: JsonNullableWithAggregatesFilter<"RssFeedLog">
    createdAt?: DateTimeWithAggregatesFilter<"RssFeedLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RefreshTokenCreateInput = {
    id?: string
    token: string
    family: string
    expiresAt: Date | string
    isRevoked?: boolean
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
    user: UserCreateNestedOneWithoutRefreshTokensInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    family: string
    expiresAt: Date | string
    isRevoked?: boolean
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    family?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutRefreshTokensNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    family?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    token: string
    userId: string
    family: string
    expiresAt: Date | string
    isRevoked?: boolean
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    family?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    family?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoginAttemptCreateInput = {
    id?: string
    identifier: string
    ipAddress: string
    userAgent?: string | null
    success?: boolean
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutLoginHistoryInput
  }

  export type LoginAttemptUncheckedCreateInput = {
    id?: string
    userId?: string | null
    identifier: string
    ipAddress: string
    userAgent?: string | null
    success?: boolean
    createdAt?: Date | string
  }

  export type LoginAttemptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLoginHistoryNestedInput
  }

  export type LoginAttemptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    identifier?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginAttemptCreateManyInput = {
    id?: string
    userId?: string | null
    identifier: string
    ipAddress: string
    userAgent?: string | null
    success?: boolean
    createdAt?: Date | string
  }

  export type LoginAttemptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginAttemptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    identifier?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeasonCreateInput = {
    id?: string
    year: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: number
    playoffWeeks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    weeks?: WeekCreateNestedManyWithoutSeasonInput
    leagues?: LeagueCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateInput = {
    id?: string
    year: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: number
    playoffWeeks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    weeks?: WeekUncheckedCreateNestedManyWithoutSeasonInput
    leagues?: LeagueUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    weeksCount?: IntFieldUpdateOperationsInput | number
    playoffWeeks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: WeekUpdateManyWithoutSeasonNestedInput
    leagues?: LeagueUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    weeksCount?: IntFieldUpdateOperationsInput | number
    playoffWeeks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: WeekUncheckedUpdateManyWithoutSeasonNestedInput
    leagues?: LeagueUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonCreateManyInput = {
    id?: string
    year: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: number
    playoffWeeks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SeasonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    weeksCount?: IntFieldUpdateOperationsInput | number
    playoffWeeks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeasonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    weeksCount?: IntFieldUpdateOperationsInput | number
    playoffWeeks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeekCreateInput = {
    id?: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    season: SeasonCreateNestedOneWithoutWeeksInput
    games?: GameCreateNestedManyWithoutWeekInput
    picks?: PickCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutWeekInput
    tiebreakerGame?: GameCreateNestedOneWithoutTiebreakerForWeekInput
  }

  export type WeekUncheckedCreateInput = {
    id?: string
    seasonId: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    tiebreakerGameId?: string | null
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    games?: GameUncheckedCreateNestedManyWithoutWeekInput
    picks?: PickUncheckedCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    season?: SeasonUpdateOneRequiredWithoutWeeksNestedInput
    games?: GameUpdateManyWithoutWeekNestedInput
    picks?: PickUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutWeekNestedInput
    tiebreakerGame?: GameUpdateOneWithoutTiebreakerForWeekNestedInput
  }

  export type WeekUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    tiebreakerGameId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUncheckedUpdateManyWithoutWeekNestedInput
    picks?: PickUncheckedUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type WeekCreateManyInput = {
    id?: string
    seasonId: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    tiebreakerGameId?: string | null
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeekUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeekUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    tiebreakerGameId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    homeGames?: GameCreateNestedManyWithoutHomeTeamInput
    awayGames?: GameCreateNestedManyWithoutAwayTeamInput
    picks?: PickCreateNestedManyWithoutSelectedTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    homeGames?: GameUncheckedCreateNestedManyWithoutHomeTeamInput
    awayGames?: GameUncheckedCreateNestedManyWithoutAwayTeamInput
    picks?: PickUncheckedCreateNestedManyWithoutSelectedTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeGames?: GameUpdateManyWithoutHomeTeamNestedInput
    awayGames?: GameUpdateManyWithoutAwayTeamNestedInput
    picks?: PickUpdateManyWithoutSelectedTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeGames?: GameUncheckedUpdateManyWithoutHomeTeamNestedInput
    awayGames?: GameUncheckedUpdateManyWithoutAwayTeamNestedInput
    picks?: PickUncheckedUpdateManyWithoutSelectedTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateInput = {
    id?: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutGamesInput
    homeTeam: TeamCreateNestedOneWithoutHomeGamesInput
    awayTeam: TeamCreateNestedOneWithoutAwayGamesInput
    picks?: PickCreateNestedManyWithoutGameInput
    tiebreakerForWeek?: WeekCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: string
    weekId: string
    homeTeamId: string
    awayTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picks?: PickUncheckedCreateNestedManyWithoutGameInput
    tiebreakerForWeek?: WeekUncheckedCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutGamesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    picks?: PickUpdateManyWithoutGameNestedInput
    tiebreakerForWeek?: WeekUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    homeTeamId?: StringFieldUpdateOperationsInput | string
    awayTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PickUncheckedUpdateManyWithoutGameNestedInput
    tiebreakerForWeek?: WeekUncheckedUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: string
    weekId: string
    homeTeamId: string
    awayTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    homeTeamId?: StringFieldUpdateOperationsInput | string
    awayTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PickCreateInput = {
    id?: string
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPicksInput
    week: WeekCreateNestedOneWithoutPicksInput
    game: GameCreateNestedOneWithoutPicksInput
    selectedTeam?: TeamCreateNestedOneWithoutPicksInput
  }

  export type PickUncheckedCreateInput = {
    id?: string
    userId: string
    weekId: string
    gameId: string
    selectedTeamId?: string | null
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type PickUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPicksNestedInput
    week?: WeekUpdateOneRequiredWithoutPicksNestedInput
    game?: GameUpdateOneRequiredWithoutPicksNestedInput
    selectedTeam?: TeamUpdateOneWithoutPicksNestedInput
  }

  export type PickUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    selectedTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PickCreateManyInput = {
    id?: string
    userId: string
    weekId: string
    gameId: string
    selectedTeamId?: string | null
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type PickUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PickUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    selectedTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WeeklyResultCreateInput = {
    id?: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWeeklyResultsInput
    week: WeekCreateNestedOneWithoutWeeklyResultsInput
  }

  export type WeeklyResultUncheckedCreateInput = {
    id?: string
    userId: string
    weekId: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWeeklyResultsNestedInput
    week?: WeekUpdateOneRequiredWithoutWeeklyResultsNestedInput
  }

  export type WeeklyResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyResultCreateManyInput = {
    id?: string
    userId: string
    weekId: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueCreateInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    season: SeasonCreateNestedOneWithoutLeaguesInput
    creator: UserCreateNestedOneWithoutCreatedLeaguesInput
    members?: UserLeagueCreateNestedManyWithoutLeagueInput
    messages?: LeagueMessageCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateInput = {
    id?: string
    seasonId: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    members?: UserLeagueUncheckedCreateNestedManyWithoutLeagueInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    season?: SeasonUpdateOneRequiredWithoutLeaguesNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedLeaguesNestedInput
    members?: UserLeagueUpdateManyWithoutLeagueNestedInput
    messages?: LeagueMessageUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: UserLeagueUncheckedUpdateManyWithoutLeagueNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueCreateManyInput = {
    id?: string
    seasonId: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LeagueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeagueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserLeagueCreateInput = {
    id?: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
    user: UserCreateNestedOneWithoutUserLeaguesInput
    league: LeagueCreateNestedOneWithoutMembersInput
  }

  export type UserLeagueUncheckedCreateInput = {
    id?: string
    userId: string
    leagueId: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
  }

  export type UserLeagueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserLeaguesNestedInput
    league?: LeagueUpdateOneRequiredWithoutMembersNestedInput
  }

  export type UserLeagueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeagueCreateManyInput = {
    id?: string
    userId: string
    leagueId: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
  }

  export type UserLeagueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeagueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueMessageCreateInput = {
    id?: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
    league: LeagueCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutMessagesInput
  }

  export type LeagueMessageUncheckedCreateInput = {
    id?: string
    leagueId: string
    userId: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LeagueMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    league?: LeagueUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type LeagueMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeagueMessageCreateManyInput = {
    id?: string
    leagueId: string
    userId: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LeagueMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeagueMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AchievementCreateInput = {
    id?: string
    name: string
    description: string
    category: $Enums.AchievementCategory
    iconUrl?: string | null
    badgeColor?: string | null
    points?: number
    rarity?: $Enums.Rarity
    criteria: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    isSecret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserAchievementCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    category: $Enums.AchievementCategory
    iconUrl?: string | null
    badgeColor?: string | null
    points?: number
    rarity?: $Enums.Rarity
    criteria: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    isSecret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserAchievementUncheckedCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    badgeColor?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    criteria?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserAchievementUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    badgeColor?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    criteria?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementCreateManyInput = {
    id?: string
    name: string
    description: string
    category: $Enums.AchievementCategory
    iconUrl?: string | null
    badgeColor?: string | null
    points?: number
    rarity?: $Enums.Rarity
    criteria: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    isSecret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    badgeColor?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    criteria?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    badgeColor?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    criteria?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementCreateInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutAchievementsInput
    achievement: AchievementCreateNestedOneWithoutUsersInput
  }

  export type UserAchievementUncheckedCreateInput = {
    id?: string
    userId: string
    achievementId: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutAchievementsNestedInput
    achievement?: AchievementUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserAchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementCreateManyInput = {
    id?: string
    userId: string
    achievementId: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: $Enums.Priority
    expiresAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: $Enums.Priority
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: $Enums.Priority
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RssFeedLogCreateInput = {
    id?: string
    source: string
    feedUrl: string
    feedType: string
    success: boolean
    errorMessage?: string | null
    itemsProcessed?: number
    itemsUpdated?: number
    fetchStartedAt: Date | string
    fetchCompletedAt?: Date | string | null
    duration?: number | null
    responseStatus?: number | null
    responseHeaders?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RssFeedLogUncheckedCreateInput = {
    id?: string
    source: string
    feedUrl: string
    feedType: string
    success: boolean
    errorMessage?: string | null
    itemsProcessed?: number
    itemsUpdated?: number
    fetchStartedAt: Date | string
    fetchCompletedAt?: Date | string | null
    duration?: number | null
    responseStatus?: number | null
    responseHeaders?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RssFeedLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    feedUrl?: StringFieldUpdateOperationsInput | string
    feedType?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    itemsProcessed?: IntFieldUpdateOperationsInput | number
    itemsUpdated?: IntFieldUpdateOperationsInput | number
    fetchStartedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fetchCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    responseStatus?: NullableIntFieldUpdateOperationsInput | number | null
    responseHeaders?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RssFeedLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    feedUrl?: StringFieldUpdateOperationsInput | string
    feedType?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    itemsProcessed?: IntFieldUpdateOperationsInput | number
    itemsUpdated?: IntFieldUpdateOperationsInput | number
    fetchStartedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fetchCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    responseStatus?: NullableIntFieldUpdateOperationsInput | number | null
    responseHeaders?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RssFeedLogCreateManyInput = {
    id?: string
    source: string
    feedUrl: string
    feedType: string
    success: boolean
    errorMessage?: string | null
    itemsProcessed?: number
    itemsUpdated?: number
    fetchStartedAt: Date | string
    fetchCompletedAt?: Date | string | null
    duration?: number | null
    responseStatus?: number | null
    responseHeaders?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RssFeedLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    feedUrl?: StringFieldUpdateOperationsInput | string
    feedType?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    itemsProcessed?: IntFieldUpdateOperationsInput | number
    itemsUpdated?: IntFieldUpdateOperationsInput | number
    fetchStartedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fetchCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    responseStatus?: NullableIntFieldUpdateOperationsInput | number | null
    responseHeaders?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RssFeedLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    feedUrl?: StringFieldUpdateOperationsInput | string
    feedType?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    itemsProcessed?: IntFieldUpdateOperationsInput | number
    itemsUpdated?: IntFieldUpdateOperationsInput | number
    fetchStartedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fetchCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    responseStatus?: NullableIntFieldUpdateOperationsInput | number | null
    responseHeaders?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PickListRelationFilter = {
    every?: PickWhereInput
    some?: PickWhereInput
    none?: PickWhereInput
  }

  export type WeeklyResultListRelationFilter = {
    every?: WeeklyResultWhereInput
    some?: WeeklyResultWhereInput
    none?: WeeklyResultWhereInput
  }

  export type UserLeagueListRelationFilter = {
    every?: UserLeagueWhereInput
    some?: UserLeagueWhereInput
    none?: UserLeagueWhereInput
  }

  export type LeagueListRelationFilter = {
    every?: LeagueWhereInput
    some?: LeagueWhereInput
    none?: LeagueWhereInput
  }

  export type UserAchievementListRelationFilter = {
    every?: UserAchievementWhereInput
    some?: UserAchievementWhereInput
    none?: UserAchievementWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type LoginAttemptListRelationFilter = {
    every?: LoginAttemptWhereInput
    some?: LoginAttemptWhereInput
    none?: LoginAttemptWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type LeagueMessageListRelationFilter = {
    every?: LeagueMessageWhereInput
    some?: LeagueMessageWhereInput
    none?: LeagueMessageWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PickOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeeklyResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLeagueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeagueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoginAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeagueMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    lastLoginAt?: SortOrder
    loginCount?: SortOrder
    loginAttempts?: SortOrder
    lockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    loginCount?: SortOrder
    loginAttempts?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    lastLoginAt?: SortOrder
    loginCount?: SortOrder
    loginAttempts?: SortOrder
    lockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    lastLoginAt?: SortOrder
    loginCount?: SortOrder
    loginAttempts?: SortOrder
    lockedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    loginCount?: SortOrder
    loginAttempts?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RefreshTokenOrderByRelevanceInput = {
    fields: RefreshTokenOrderByRelevanceFieldEnum | RefreshTokenOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    family?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    family?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    family?: SortOrder
    expiresAt?: SortOrder
    isRevoked?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type LoginAttemptOrderByRelevanceInput = {
    fields: LoginAttemptOrderByRelevanceFieldEnum | LoginAttemptOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LoginAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    identifier?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
  }

  export type LoginAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    identifier?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
  }

  export type LoginAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    identifier?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type WeekListRelationFilter = {
    every?: WeekWhereInput
    some?: WeekWhereInput
    none?: WeekWhereInput
  }

  export type WeekOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeasonOrderByRelevanceInput = {
    fields: SeasonOrderByRelevanceFieldEnum | SeasonOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SeasonCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    isCurrent?: SortOrder
    weeksCount?: SortOrder
    playoffWeeks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeasonAvgOrderByAggregateInput = {
    year?: SortOrder
    weeksCount?: SortOrder
    playoffWeeks?: SortOrder
  }

  export type SeasonMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    isCurrent?: SortOrder
    weeksCount?: SortOrder
    playoffWeeks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeasonMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    isCurrent?: SortOrder
    weeksCount?: SortOrder
    playoffWeeks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeasonSumOrderByAggregateInput = {
    year?: SortOrder
    weeksCount?: SortOrder
    playoffWeeks?: SortOrder
  }

  export type EnumWeekTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WeekType | EnumWeekTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WeekType[] | ListEnumWeekTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WeekType[] | ListEnumWeekTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekTypeFilter<$PrismaModel> | $Enums.WeekType
  }

  export type SeasonRelationFilter = {
    is?: SeasonWhereInput
    isNot?: SeasonWhereInput
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type GameNullableRelationFilter = {
    is?: GameWhereInput | null
    isNot?: GameWhereInput | null
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeekOrderByRelevanceInput = {
    fields: WeekOrderByRelevanceFieldEnum | WeekOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WeekSeasonIdWeekNumberCompoundUniqueInput = {
    seasonId: string
    weekNumber: number
  }

  export type WeekCountOrderByAggregateInput = {
    id?: SortOrder
    seasonId?: SortOrder
    weekNumber?: SortOrder
    weekType?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    pickDeadline?: SortOrder
    tiebreakerGameId?: SortOrder
    isActive?: SortOrder
    isComplete?: SortOrder
    isScored?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeekAvgOrderByAggregateInput = {
    weekNumber?: SortOrder
  }

  export type WeekMaxOrderByAggregateInput = {
    id?: SortOrder
    seasonId?: SortOrder
    weekNumber?: SortOrder
    weekType?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    pickDeadline?: SortOrder
    tiebreakerGameId?: SortOrder
    isActive?: SortOrder
    isComplete?: SortOrder
    isScored?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeekMinOrderByAggregateInput = {
    id?: SortOrder
    seasonId?: SortOrder
    weekNumber?: SortOrder
    weekType?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    pickDeadline?: SortOrder
    tiebreakerGameId?: SortOrder
    isActive?: SortOrder
    isComplete?: SortOrder
    isScored?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeekSumOrderByAggregateInput = {
    weekNumber?: SortOrder
  }

  export type EnumWeekTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WeekType | EnumWeekTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WeekType[] | ListEnumWeekTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WeekType[] | ListEnumWeekTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekTypeWithAggregatesFilter<$PrismaModel> | $Enums.WeekType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWeekTypeFilter<$PrismaModel>
    _max?: NestedEnumWeekTypeFilter<$PrismaModel>
  }

  export type EnumConferenceFilter<$PrismaModel = never> = {
    equals?: $Enums.Conference | EnumConferenceFieldRefInput<$PrismaModel>
    in?: $Enums.Conference[] | ListEnumConferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.Conference[] | ListEnumConferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumConferenceFilter<$PrismaModel> | $Enums.Conference
  }

  export type EnumDivisionFilter<$PrismaModel = never> = {
    equals?: $Enums.Division | EnumDivisionFieldRefInput<$PrismaModel>
    in?: $Enums.Division[] | ListEnumDivisionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Division[] | ListEnumDivisionFieldRefInput<$PrismaModel>
    not?: NestedEnumDivisionFilter<$PrismaModel> | $Enums.Division
  }

  export type TeamOrderByRelevanceInput = {
    fields: TeamOrderByRelevanceFieldEnum | TeamOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    abbreviation?: SortOrder
    city?: SortOrder
    name?: SortOrder
    fullName?: SortOrder
    conference?: SortOrder
    division?: SortOrder
    logoUrl?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    espnId?: SortOrder
    cbsId?: SortOrder
    foxId?: SortOrder
    currentWins?: SortOrder
    currentLosses?: SortOrder
    currentTies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    currentWins?: SortOrder
    currentLosses?: SortOrder
    currentTies?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    abbreviation?: SortOrder
    city?: SortOrder
    name?: SortOrder
    fullName?: SortOrder
    conference?: SortOrder
    division?: SortOrder
    logoUrl?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    espnId?: SortOrder
    cbsId?: SortOrder
    foxId?: SortOrder
    currentWins?: SortOrder
    currentLosses?: SortOrder
    currentTies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    abbreviation?: SortOrder
    city?: SortOrder
    name?: SortOrder
    fullName?: SortOrder
    conference?: SortOrder
    division?: SortOrder
    logoUrl?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    espnId?: SortOrder
    cbsId?: SortOrder
    foxId?: SortOrder
    currentWins?: SortOrder
    currentLosses?: SortOrder
    currentTies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    currentWins?: SortOrder
    currentLosses?: SortOrder
    currentTies?: SortOrder
  }

  export type EnumConferenceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Conference | EnumConferenceFieldRefInput<$PrismaModel>
    in?: $Enums.Conference[] | ListEnumConferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.Conference[] | ListEnumConferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumConferenceWithAggregatesFilter<$PrismaModel> | $Enums.Conference
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConferenceFilter<$PrismaModel>
    _max?: NestedEnumConferenceFilter<$PrismaModel>
  }

  export type EnumDivisionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Division | EnumDivisionFieldRefInput<$PrismaModel>
    in?: $Enums.Division[] | ListEnumDivisionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Division[] | ListEnumDivisionFieldRefInput<$PrismaModel>
    not?: NestedEnumDivisionWithAggregatesFilter<$PrismaModel> | $Enums.Division
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDivisionFilter<$PrismaModel>
    _max?: NestedEnumDivisionFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumGameStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusFilter<$PrismaModel> | $Enums.GameStatus
  }

  export type WeekRelationFilter = {
    is?: WeekWhereInput
    isNot?: WeekWhereInput
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type WeekNullableRelationFilter = {
    is?: WeekWhereInput | null
    isNot?: WeekWhereInput | null
  }

  export type GameOrderByRelevanceInput = {
    fields: GameOrderByRelevanceFieldEnum | GameOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GameWeekIdEspnGameIdCompoundUniqueInput = {
    weekId: string
    espnGameId: string
  }

  export type GameWeekIdCbsGameIdCompoundUniqueInput = {
    weekId: string
    cbsGameId: string
  }

  export type GameWeekIdFoxGameIdCompoundUniqueInput = {
    weekId: string
    foxGameId: string
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    weekId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    kickoffTime?: SortOrder
    tvNetwork?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    status?: SortOrder
    quarter?: SortOrder
    timeRemaining?: SortOrder
    possession?: SortOrder
    espnGameId?: SortOrder
    cbsGameId?: SortOrder
    foxGameId?: SortOrder
    lastUpdatedFrom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    homeScore?: SortOrder
    awayScore?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    weekId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    kickoffTime?: SortOrder
    tvNetwork?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    status?: SortOrder
    quarter?: SortOrder
    timeRemaining?: SortOrder
    possession?: SortOrder
    espnGameId?: SortOrder
    cbsGameId?: SortOrder
    foxGameId?: SortOrder
    lastUpdatedFrom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    weekId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    kickoffTime?: SortOrder
    tvNetwork?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    status?: SortOrder
    quarter?: SortOrder
    timeRemaining?: SortOrder
    possession?: SortOrder
    espnGameId?: SortOrder
    cbsGameId?: SortOrder
    foxGameId?: SortOrder
    lastUpdatedFrom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    homeScore?: SortOrder
    awayScore?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumGameStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusWithAggregatesFilter<$PrismaModel> | $Enums.GameStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameStatusFilter<$PrismaModel>
    _max?: NestedEnumGameStatusFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type GameRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type TeamNullableRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type PickOrderByRelevanceInput = {
    fields: PickOrderByRelevanceFieldEnum | PickOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PickUserIdGameIdCompoundUniqueInput = {
    userId: string
    gameId: string
  }

  export type PickCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    gameId?: SortOrder
    selectedTeamId?: SortOrder
    isHomeTeamPick?: SortOrder
    isCorrect?: SortOrder
    pointsAwarded?: SortOrder
    tiebreakerScore?: SortOrder
    tiebreakerDiff?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
  }

  export type PickAvgOrderByAggregateInput = {
    pointsAwarded?: SortOrder
    tiebreakerScore?: SortOrder
    tiebreakerDiff?: SortOrder
  }

  export type PickMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    gameId?: SortOrder
    selectedTeamId?: SortOrder
    isHomeTeamPick?: SortOrder
    isCorrect?: SortOrder
    pointsAwarded?: SortOrder
    tiebreakerScore?: SortOrder
    tiebreakerDiff?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
  }

  export type PickMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    gameId?: SortOrder
    selectedTeamId?: SortOrder
    isHomeTeamPick?: SortOrder
    isCorrect?: SortOrder
    pointsAwarded?: SortOrder
    tiebreakerScore?: SortOrder
    tiebreakerDiff?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
  }

  export type PickSumOrderByAggregateInput = {
    pointsAwarded?: SortOrder
    tiebreakerScore?: SortOrder
    tiebreakerDiff?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type WeeklyResultOrderByRelevanceInput = {
    fields: WeeklyResultOrderByRelevanceFieldEnum | WeeklyResultOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WeeklyResultUserIdWeekIdCompoundUniqueInput = {
    userId: string
    weekId: string
  }

  export type WeeklyResultCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    correctPicks?: SortOrder
    totalPicks?: SortOrder
    points?: SortOrder
    weeklyRank?: SortOrder
    tiebreakerUsed?: SortOrder
    accuracy?: SortOrder
    streak?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyResultAvgOrderByAggregateInput = {
    correctPicks?: SortOrder
    totalPicks?: SortOrder
    points?: SortOrder
    weeklyRank?: SortOrder
    accuracy?: SortOrder
    streak?: SortOrder
  }

  export type WeeklyResultMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    correctPicks?: SortOrder
    totalPicks?: SortOrder
    points?: SortOrder
    weeklyRank?: SortOrder
    tiebreakerUsed?: SortOrder
    accuracy?: SortOrder
    streak?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyResultMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekId?: SortOrder
    correctPicks?: SortOrder
    totalPicks?: SortOrder
    points?: SortOrder
    weeklyRank?: SortOrder
    tiebreakerUsed?: SortOrder
    accuracy?: SortOrder
    streak?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyResultSumOrderByAggregateInput = {
    correctPicks?: SortOrder
    totalPicks?: SortOrder
    points?: SortOrder
    weeklyRank?: SortOrder
    accuracy?: SortOrder
    streak?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumScoringSystemFilter<$PrismaModel = never> = {
    equals?: $Enums.ScoringSystem | EnumScoringSystemFieldRefInput<$PrismaModel>
    in?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumScoringSystemFilter<$PrismaModel> | $Enums.ScoringSystem
  }

  export type LeagueOrderByRelevanceInput = {
    fields: LeagueOrderByRelevanceFieldEnum | LeagueOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LeagueCountOrderByAggregateInput = {
    id?: SortOrder
    seasonId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    isPrivate?: SortOrder
    maxMembers?: SortOrder
    allowLateJoin?: SortOrder
    scoringSystem?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeagueAvgOrderByAggregateInput = {
    maxMembers?: SortOrder
  }

  export type LeagueMaxOrderByAggregateInput = {
    id?: SortOrder
    seasonId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    isPrivate?: SortOrder
    maxMembers?: SortOrder
    allowLateJoin?: SortOrder
    scoringSystem?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeagueMinOrderByAggregateInput = {
    id?: SortOrder
    seasonId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    isPrivate?: SortOrder
    maxMembers?: SortOrder
    allowLateJoin?: SortOrder
    scoringSystem?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeagueSumOrderByAggregateInput = {
    maxMembers?: SortOrder
  }

  export type EnumScoringSystemWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScoringSystem | EnumScoringSystemFieldRefInput<$PrismaModel>
    in?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumScoringSystemWithAggregatesFilter<$PrismaModel> | $Enums.ScoringSystem
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScoringSystemFilter<$PrismaModel>
    _max?: NestedEnumScoringSystemFilter<$PrismaModel>
  }

  export type EnumLeagueRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.LeagueRole | EnumLeagueRoleFieldRefInput<$PrismaModel>
    in?: $Enums.LeagueRole[] | ListEnumLeagueRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeagueRole[] | ListEnumLeagueRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumLeagueRoleFilter<$PrismaModel> | $Enums.LeagueRole
  }

  export type EnumMemberStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberStatus | EnumMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MemberStatus[] | ListEnumMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberStatus[] | ListEnumMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberStatusFilter<$PrismaModel> | $Enums.MemberStatus
  }

  export type LeagueRelationFilter = {
    is?: LeagueWhereInput
    isNot?: LeagueWhereInput
  }

  export type UserLeagueOrderByRelevanceInput = {
    fields: UserLeagueOrderByRelevanceFieldEnum | UserLeagueOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserLeagueUserIdLeagueIdCompoundUniqueInput = {
    userId: string
    leagueId: string
  }

  export type UserLeagueCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leagueId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    totalPoints?: SortOrder
    totalCorrectPicks?: SortOrder
    currentRank?: SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
  }

  export type UserLeagueAvgOrderByAggregateInput = {
    totalPoints?: SortOrder
    totalCorrectPicks?: SortOrder
    currentRank?: SortOrder
  }

  export type UserLeagueMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leagueId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    totalPoints?: SortOrder
    totalCorrectPicks?: SortOrder
    currentRank?: SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
  }

  export type UserLeagueMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leagueId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    totalPoints?: SortOrder
    totalCorrectPicks?: SortOrder
    currentRank?: SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
  }

  export type UserLeagueSumOrderByAggregateInput = {
    totalPoints?: SortOrder
    totalCorrectPicks?: SortOrder
    currentRank?: SortOrder
  }

  export type EnumLeagueRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeagueRole | EnumLeagueRoleFieldRefInput<$PrismaModel>
    in?: $Enums.LeagueRole[] | ListEnumLeagueRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeagueRole[] | ListEnumLeagueRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumLeagueRoleWithAggregatesFilter<$PrismaModel> | $Enums.LeagueRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeagueRoleFilter<$PrismaModel>
    _max?: NestedEnumLeagueRoleFilter<$PrismaModel>
  }

  export type EnumMemberStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberStatus | EnumMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MemberStatus[] | ListEnumMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberStatus[] | ListEnumMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberStatusWithAggregatesFilter<$PrismaModel> | $Enums.MemberStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemberStatusFilter<$PrismaModel>
    _max?: NestedEnumMemberStatusFilter<$PrismaModel>
  }

  export type LeagueMessageOrderByRelevanceInput = {
    fields: LeagueMessageOrderByRelevanceFieldEnum | LeagueMessageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LeagueMessageCountOrderByAggregateInput = {
    id?: SortOrder
    leagueId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    isAnnouncement?: SortOrder
    isPinned?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeagueMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    leagueId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    isAnnouncement?: SortOrder
    isPinned?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeagueMessageMinOrderByAggregateInput = {
    id?: SortOrder
    leagueId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    isAnnouncement?: SortOrder
    isPinned?: SortOrder
    createdAt?: SortOrder
    editedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumAchievementCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementCategory | EnumAchievementCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementCategoryFilter<$PrismaModel> | $Enums.AchievementCategory
  }

  export type EnumRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.Rarity | EnumRarityFieldRefInput<$PrismaModel>
    in?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumRarityFilter<$PrismaModel> | $Enums.Rarity
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AchievementOrderByRelevanceInput = {
    fields: AchievementOrderByRelevanceFieldEnum | AchievementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AchievementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    iconUrl?: SortOrder
    badgeColor?: SortOrder
    points?: SortOrder
    rarity?: SortOrder
    criteria?: SortOrder
    isActive?: SortOrder
    isSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AchievementAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    iconUrl?: SortOrder
    badgeColor?: SortOrder
    points?: SortOrder
    rarity?: SortOrder
    isActive?: SortOrder
    isSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    iconUrl?: SortOrder
    badgeColor?: SortOrder
    points?: SortOrder
    rarity?: SortOrder
    isActive?: SortOrder
    isSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AchievementSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type EnumAchievementCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementCategory | EnumAchievementCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementCategoryWithAggregatesFilter<$PrismaModel> | $Enums.AchievementCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementCategoryFilter<$PrismaModel>
    _max?: NestedEnumAchievementCategoryFilter<$PrismaModel>
  }

  export type EnumRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rarity | EnumRarityFieldRefInput<$PrismaModel>
    in?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumRarityWithAggregatesFilter<$PrismaModel> | $Enums.Rarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRarityFilter<$PrismaModel>
    _max?: NestedEnumRarityFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AchievementRelationFilter = {
    is?: AchievementWhereInput
    isNot?: AchievementWhereInput
  }

  export type UserAchievementOrderByRelevanceInput = {
    fields: UserAchievementOrderByRelevanceFieldEnum | UserAchievementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserAchievementUserIdAchievementIdCompoundUniqueInput = {
    userId: string
    achievementId: string
  }

  export type UserAchievementCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
    metadata?: SortOrder
  }

  export type UserAchievementAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type UserAchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
  }

  export type UserAchievementMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    unlockedAt?: SortOrder
    progress?: SortOrder
  }

  export type UserAchievementSumOrderByAggregateInput = {
    progress?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NotificationOrderByRelevanceInput = {
    fields: NotificationOrderByRelevanceFieldEnum | NotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    metadata?: SortOrder
    priority?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    priority?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    priority?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type AuditLogOrderByRelevanceInput = {
    fields: AuditLogOrderByRelevanceFieldEnum | AuditLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    requestId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    requestId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    requestId?: SortOrder
    createdAt?: SortOrder
  }

  export type RssFeedLogOrderByRelevanceInput = {
    fields: RssFeedLogOrderByRelevanceFieldEnum | RssFeedLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RssFeedLogCountOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    feedUrl?: SortOrder
    feedType?: SortOrder
    success?: SortOrder
    errorMessage?: SortOrder
    itemsProcessed?: SortOrder
    itemsUpdated?: SortOrder
    fetchStartedAt?: SortOrder
    fetchCompletedAt?: SortOrder
    duration?: SortOrder
    responseStatus?: SortOrder
    responseHeaders?: SortOrder
    createdAt?: SortOrder
  }

  export type RssFeedLogAvgOrderByAggregateInput = {
    itemsProcessed?: SortOrder
    itemsUpdated?: SortOrder
    duration?: SortOrder
    responseStatus?: SortOrder
  }

  export type RssFeedLogMaxOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    feedUrl?: SortOrder
    feedType?: SortOrder
    success?: SortOrder
    errorMessage?: SortOrder
    itemsProcessed?: SortOrder
    itemsUpdated?: SortOrder
    fetchStartedAt?: SortOrder
    fetchCompletedAt?: SortOrder
    duration?: SortOrder
    responseStatus?: SortOrder
    createdAt?: SortOrder
  }

  export type RssFeedLogMinOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    feedUrl?: SortOrder
    feedType?: SortOrder
    success?: SortOrder
    errorMessage?: SortOrder
    itemsProcessed?: SortOrder
    itemsUpdated?: SortOrder
    fetchStartedAt?: SortOrder
    fetchCompletedAt?: SortOrder
    duration?: SortOrder
    responseStatus?: SortOrder
    createdAt?: SortOrder
  }

  export type RssFeedLogSumOrderByAggregateInput = {
    itemsProcessed?: SortOrder
    itemsUpdated?: SortOrder
    duration?: SortOrder
    responseStatus?: SortOrder
  }

  export type PickCreateNestedManyWithoutUserInput = {
    create?: XOR<PickCreateWithoutUserInput, PickUncheckedCreateWithoutUserInput> | PickCreateWithoutUserInput[] | PickUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PickCreateOrConnectWithoutUserInput | PickCreateOrConnectWithoutUserInput[]
    createMany?: PickCreateManyUserInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type WeeklyResultCreateNestedManyWithoutUserInput = {
    create?: XOR<WeeklyResultCreateWithoutUserInput, WeeklyResultUncheckedCreateWithoutUserInput> | WeeklyResultCreateWithoutUserInput[] | WeeklyResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyResultCreateOrConnectWithoutUserInput | WeeklyResultCreateOrConnectWithoutUserInput[]
    createMany?: WeeklyResultCreateManyUserInputEnvelope
    connect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
  }

  export type UserLeagueCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLeagueCreateWithoutUserInput, UserLeagueUncheckedCreateWithoutUserInput> | UserLeagueCreateWithoutUserInput[] | UserLeagueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeagueCreateOrConnectWithoutUserInput | UserLeagueCreateOrConnectWithoutUserInput[]
    createMany?: UserLeagueCreateManyUserInputEnvelope
    connect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
  }

  export type LeagueCreateNestedManyWithoutCreatorInput = {
    create?: XOR<LeagueCreateWithoutCreatorInput, LeagueUncheckedCreateWithoutCreatorInput> | LeagueCreateWithoutCreatorInput[] | LeagueUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCreatorInput | LeagueCreateOrConnectWithoutCreatorInput[]
    createMany?: LeagueCreateManyCreatorInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type UserAchievementCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type LoginAttemptCreateNestedManyWithoutUserInput = {
    create?: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput> | LoginAttemptCreateWithoutUserInput[] | LoginAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginAttemptCreateOrConnectWithoutUserInput | LoginAttemptCreateOrConnectWithoutUserInput[]
    createMany?: LoginAttemptCreateManyUserInputEnvelope
    connect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type LeagueMessageCreateNestedManyWithoutUserInput = {
    create?: XOR<LeagueMessageCreateWithoutUserInput, LeagueMessageUncheckedCreateWithoutUserInput> | LeagueMessageCreateWithoutUserInput[] | LeagueMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeagueMessageCreateOrConnectWithoutUserInput | LeagueMessageCreateOrConnectWithoutUserInput[]
    createMany?: LeagueMessageCreateManyUserInputEnvelope
    connect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
  }

  export type PickUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PickCreateWithoutUserInput, PickUncheckedCreateWithoutUserInput> | PickCreateWithoutUserInput[] | PickUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PickCreateOrConnectWithoutUserInput | PickCreateOrConnectWithoutUserInput[]
    createMany?: PickCreateManyUserInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type WeeklyResultUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WeeklyResultCreateWithoutUserInput, WeeklyResultUncheckedCreateWithoutUserInput> | WeeklyResultCreateWithoutUserInput[] | WeeklyResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyResultCreateOrConnectWithoutUserInput | WeeklyResultCreateOrConnectWithoutUserInput[]
    createMany?: WeeklyResultCreateManyUserInputEnvelope
    connect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
  }

  export type UserLeagueUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLeagueCreateWithoutUserInput, UserLeagueUncheckedCreateWithoutUserInput> | UserLeagueCreateWithoutUserInput[] | UserLeagueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeagueCreateOrConnectWithoutUserInput | UserLeagueCreateOrConnectWithoutUserInput[]
    createMany?: UserLeagueCreateManyUserInputEnvelope
    connect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
  }

  export type LeagueUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<LeagueCreateWithoutCreatorInput, LeagueUncheckedCreateWithoutCreatorInput> | LeagueCreateWithoutCreatorInput[] | LeagueUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCreatorInput | LeagueCreateOrConnectWithoutCreatorInput[]
    createMany?: LeagueCreateManyCreatorInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type LoginAttemptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput> | LoginAttemptCreateWithoutUserInput[] | LoginAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginAttemptCreateOrConnectWithoutUserInput | LoginAttemptCreateOrConnectWithoutUserInput[]
    createMany?: LoginAttemptCreateManyUserInputEnvelope
    connect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type LeagueMessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LeagueMessageCreateWithoutUserInput, LeagueMessageUncheckedCreateWithoutUserInput> | LeagueMessageCreateWithoutUserInput[] | LeagueMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeagueMessageCreateOrConnectWithoutUserInput | LeagueMessageCreateOrConnectWithoutUserInput[]
    createMany?: LeagueMessageCreateManyUserInputEnvelope
    connect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PickUpdateManyWithoutUserNestedInput = {
    create?: XOR<PickCreateWithoutUserInput, PickUncheckedCreateWithoutUserInput> | PickCreateWithoutUserInput[] | PickUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PickCreateOrConnectWithoutUserInput | PickCreateOrConnectWithoutUserInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutUserInput | PickUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PickCreateManyUserInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutUserInput | PickUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PickUpdateManyWithWhereWithoutUserInput | PickUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type WeeklyResultUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeeklyResultCreateWithoutUserInput, WeeklyResultUncheckedCreateWithoutUserInput> | WeeklyResultCreateWithoutUserInput[] | WeeklyResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyResultCreateOrConnectWithoutUserInput | WeeklyResultCreateOrConnectWithoutUserInput[]
    upsert?: WeeklyResultUpsertWithWhereUniqueWithoutUserInput | WeeklyResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeeklyResultCreateManyUserInputEnvelope
    set?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    disconnect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    delete?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    connect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    update?: WeeklyResultUpdateWithWhereUniqueWithoutUserInput | WeeklyResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeeklyResultUpdateManyWithWhereWithoutUserInput | WeeklyResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeeklyResultScalarWhereInput | WeeklyResultScalarWhereInput[]
  }

  export type UserLeagueUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLeagueCreateWithoutUserInput, UserLeagueUncheckedCreateWithoutUserInput> | UserLeagueCreateWithoutUserInput[] | UserLeagueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeagueCreateOrConnectWithoutUserInput | UserLeagueCreateOrConnectWithoutUserInput[]
    upsert?: UserLeagueUpsertWithWhereUniqueWithoutUserInput | UserLeagueUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLeagueCreateManyUserInputEnvelope
    set?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    disconnect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    delete?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    connect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    update?: UserLeagueUpdateWithWhereUniqueWithoutUserInput | UserLeagueUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLeagueUpdateManyWithWhereWithoutUserInput | UserLeagueUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLeagueScalarWhereInput | UserLeagueScalarWhereInput[]
  }

  export type LeagueUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<LeagueCreateWithoutCreatorInput, LeagueUncheckedCreateWithoutCreatorInput> | LeagueCreateWithoutCreatorInput[] | LeagueUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCreatorInput | LeagueCreateOrConnectWithoutCreatorInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutCreatorInput | LeagueUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: LeagueCreateManyCreatorInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutCreatorInput | LeagueUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutCreatorInput | LeagueUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type UserAchievementUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type LoginAttemptUpdateManyWithoutUserNestedInput = {
    create?: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput> | LoginAttemptCreateWithoutUserInput[] | LoginAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginAttemptCreateOrConnectWithoutUserInput | LoginAttemptCreateOrConnectWithoutUserInput[]
    upsert?: LoginAttemptUpsertWithWhereUniqueWithoutUserInput | LoginAttemptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LoginAttemptCreateManyUserInputEnvelope
    set?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    disconnect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    delete?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    connect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    update?: LoginAttemptUpdateWithWhereUniqueWithoutUserInput | LoginAttemptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LoginAttemptUpdateManyWithWhereWithoutUserInput | LoginAttemptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LoginAttemptScalarWhereInput | LoginAttemptScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type LeagueMessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeagueMessageCreateWithoutUserInput, LeagueMessageUncheckedCreateWithoutUserInput> | LeagueMessageCreateWithoutUserInput[] | LeagueMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeagueMessageCreateOrConnectWithoutUserInput | LeagueMessageCreateOrConnectWithoutUserInput[]
    upsert?: LeagueMessageUpsertWithWhereUniqueWithoutUserInput | LeagueMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeagueMessageCreateManyUserInputEnvelope
    set?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    disconnect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    delete?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    connect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    update?: LeagueMessageUpdateWithWhereUniqueWithoutUserInput | LeagueMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeagueMessageUpdateManyWithWhereWithoutUserInput | LeagueMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeagueMessageScalarWhereInput | LeagueMessageScalarWhereInput[]
  }

  export type PickUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PickCreateWithoutUserInput, PickUncheckedCreateWithoutUserInput> | PickCreateWithoutUserInput[] | PickUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PickCreateOrConnectWithoutUserInput | PickCreateOrConnectWithoutUserInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutUserInput | PickUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PickCreateManyUserInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutUserInput | PickUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PickUpdateManyWithWhereWithoutUserInput | PickUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type WeeklyResultUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeeklyResultCreateWithoutUserInput, WeeklyResultUncheckedCreateWithoutUserInput> | WeeklyResultCreateWithoutUserInput[] | WeeklyResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyResultCreateOrConnectWithoutUserInput | WeeklyResultCreateOrConnectWithoutUserInput[]
    upsert?: WeeklyResultUpsertWithWhereUniqueWithoutUserInput | WeeklyResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeeklyResultCreateManyUserInputEnvelope
    set?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    disconnect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    delete?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    connect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    update?: WeeklyResultUpdateWithWhereUniqueWithoutUserInput | WeeklyResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeeklyResultUpdateManyWithWhereWithoutUserInput | WeeklyResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeeklyResultScalarWhereInput | WeeklyResultScalarWhereInput[]
  }

  export type UserLeagueUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLeagueCreateWithoutUserInput, UserLeagueUncheckedCreateWithoutUserInput> | UserLeagueCreateWithoutUserInput[] | UserLeagueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeagueCreateOrConnectWithoutUserInput | UserLeagueCreateOrConnectWithoutUserInput[]
    upsert?: UserLeagueUpsertWithWhereUniqueWithoutUserInput | UserLeagueUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLeagueCreateManyUserInputEnvelope
    set?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    disconnect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    delete?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    connect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    update?: UserLeagueUpdateWithWhereUniqueWithoutUserInput | UserLeagueUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLeagueUpdateManyWithWhereWithoutUserInput | UserLeagueUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLeagueScalarWhereInput | UserLeagueScalarWhereInput[]
  }

  export type LeagueUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<LeagueCreateWithoutCreatorInput, LeagueUncheckedCreateWithoutCreatorInput> | LeagueCreateWithoutCreatorInput[] | LeagueUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCreatorInput | LeagueCreateOrConnectWithoutCreatorInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutCreatorInput | LeagueUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: LeagueCreateManyCreatorInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutCreatorInput | LeagueUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutCreatorInput | LeagueUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type LoginAttemptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput> | LoginAttemptCreateWithoutUserInput[] | LoginAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginAttemptCreateOrConnectWithoutUserInput | LoginAttemptCreateOrConnectWithoutUserInput[]
    upsert?: LoginAttemptUpsertWithWhereUniqueWithoutUserInput | LoginAttemptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LoginAttemptCreateManyUserInputEnvelope
    set?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    disconnect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    delete?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    connect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    update?: LoginAttemptUpdateWithWhereUniqueWithoutUserInput | LoginAttemptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LoginAttemptUpdateManyWithWhereWithoutUserInput | LoginAttemptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LoginAttemptScalarWhereInput | LoginAttemptScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type LeagueMessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeagueMessageCreateWithoutUserInput, LeagueMessageUncheckedCreateWithoutUserInput> | LeagueMessageCreateWithoutUserInput[] | LeagueMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeagueMessageCreateOrConnectWithoutUserInput | LeagueMessageCreateOrConnectWithoutUserInput[]
    upsert?: LeagueMessageUpsertWithWhereUniqueWithoutUserInput | LeagueMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeagueMessageCreateManyUserInputEnvelope
    set?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    disconnect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    delete?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    connect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    update?: LeagueMessageUpdateWithWhereUniqueWithoutUserInput | LeagueMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeagueMessageUpdateManyWithWhereWithoutUserInput | LeagueMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeagueMessageScalarWhereInput | LeagueMessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRefreshTokensInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokensNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    upsert?: UserUpsertWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokensInput, UserUpdateWithoutRefreshTokensInput>, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserCreateNestedOneWithoutLoginHistoryInput = {
    create?: XOR<UserCreateWithoutLoginHistoryInput, UserUncheckedCreateWithoutLoginHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutLoginHistoryNestedInput = {
    create?: XOR<UserCreateWithoutLoginHistoryInput, UserUncheckedCreateWithoutLoginHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginHistoryInput
    upsert?: UserUpsertWithoutLoginHistoryInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLoginHistoryInput, UserUpdateWithoutLoginHistoryInput>, UserUncheckedUpdateWithoutLoginHistoryInput>
  }

  export type WeekCreateNestedManyWithoutSeasonInput = {
    create?: XOR<WeekCreateWithoutSeasonInput, WeekUncheckedCreateWithoutSeasonInput> | WeekCreateWithoutSeasonInput[] | WeekUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: WeekCreateOrConnectWithoutSeasonInput | WeekCreateOrConnectWithoutSeasonInput[]
    createMany?: WeekCreateManySeasonInputEnvelope
    connect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
  }

  export type LeagueCreateNestedManyWithoutSeasonInput = {
    create?: XOR<LeagueCreateWithoutSeasonInput, LeagueUncheckedCreateWithoutSeasonInput> | LeagueCreateWithoutSeasonInput[] | LeagueUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutSeasonInput | LeagueCreateOrConnectWithoutSeasonInput[]
    createMany?: LeagueCreateManySeasonInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type WeekUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<WeekCreateWithoutSeasonInput, WeekUncheckedCreateWithoutSeasonInput> | WeekCreateWithoutSeasonInput[] | WeekUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: WeekCreateOrConnectWithoutSeasonInput | WeekCreateOrConnectWithoutSeasonInput[]
    createMany?: WeekCreateManySeasonInputEnvelope
    connect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
  }

  export type LeagueUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<LeagueCreateWithoutSeasonInput, LeagueUncheckedCreateWithoutSeasonInput> | LeagueCreateWithoutSeasonInput[] | LeagueUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutSeasonInput | LeagueCreateOrConnectWithoutSeasonInput[]
    createMany?: LeagueCreateManySeasonInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type WeekUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<WeekCreateWithoutSeasonInput, WeekUncheckedCreateWithoutSeasonInput> | WeekCreateWithoutSeasonInput[] | WeekUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: WeekCreateOrConnectWithoutSeasonInput | WeekCreateOrConnectWithoutSeasonInput[]
    upsert?: WeekUpsertWithWhereUniqueWithoutSeasonInput | WeekUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: WeekCreateManySeasonInputEnvelope
    set?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    disconnect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    delete?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    connect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    update?: WeekUpdateWithWhereUniqueWithoutSeasonInput | WeekUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: WeekUpdateManyWithWhereWithoutSeasonInput | WeekUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: WeekScalarWhereInput | WeekScalarWhereInput[]
  }

  export type LeagueUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<LeagueCreateWithoutSeasonInput, LeagueUncheckedCreateWithoutSeasonInput> | LeagueCreateWithoutSeasonInput[] | LeagueUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutSeasonInput | LeagueCreateOrConnectWithoutSeasonInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutSeasonInput | LeagueUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: LeagueCreateManySeasonInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutSeasonInput | LeagueUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutSeasonInput | LeagueUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type WeekUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<WeekCreateWithoutSeasonInput, WeekUncheckedCreateWithoutSeasonInput> | WeekCreateWithoutSeasonInput[] | WeekUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: WeekCreateOrConnectWithoutSeasonInput | WeekCreateOrConnectWithoutSeasonInput[]
    upsert?: WeekUpsertWithWhereUniqueWithoutSeasonInput | WeekUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: WeekCreateManySeasonInputEnvelope
    set?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    disconnect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    delete?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    connect?: WeekWhereUniqueInput | WeekWhereUniqueInput[]
    update?: WeekUpdateWithWhereUniqueWithoutSeasonInput | WeekUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: WeekUpdateManyWithWhereWithoutSeasonInput | WeekUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: WeekScalarWhereInput | WeekScalarWhereInput[]
  }

  export type LeagueUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<LeagueCreateWithoutSeasonInput, LeagueUncheckedCreateWithoutSeasonInput> | LeagueCreateWithoutSeasonInput[] | LeagueUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutSeasonInput | LeagueCreateOrConnectWithoutSeasonInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutSeasonInput | LeagueUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: LeagueCreateManySeasonInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutSeasonInput | LeagueUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutSeasonInput | LeagueUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type SeasonCreateNestedOneWithoutWeeksInput = {
    create?: XOR<SeasonCreateWithoutWeeksInput, SeasonUncheckedCreateWithoutWeeksInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutWeeksInput
    connect?: SeasonWhereUniqueInput
  }

  export type GameCreateNestedManyWithoutWeekInput = {
    create?: XOR<GameCreateWithoutWeekInput, GameUncheckedCreateWithoutWeekInput> | GameCreateWithoutWeekInput[] | GameUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: GameCreateOrConnectWithoutWeekInput | GameCreateOrConnectWithoutWeekInput[]
    createMany?: GameCreateManyWeekInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type PickCreateNestedManyWithoutWeekInput = {
    create?: XOR<PickCreateWithoutWeekInput, PickUncheckedCreateWithoutWeekInput> | PickCreateWithoutWeekInput[] | PickUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: PickCreateOrConnectWithoutWeekInput | PickCreateOrConnectWithoutWeekInput[]
    createMany?: PickCreateManyWeekInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type WeeklyResultCreateNestedManyWithoutWeekInput = {
    create?: XOR<WeeklyResultCreateWithoutWeekInput, WeeklyResultUncheckedCreateWithoutWeekInput> | WeeklyResultCreateWithoutWeekInput[] | WeeklyResultUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: WeeklyResultCreateOrConnectWithoutWeekInput | WeeklyResultCreateOrConnectWithoutWeekInput[]
    createMany?: WeeklyResultCreateManyWeekInputEnvelope
    connect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
  }

  export type GameCreateNestedOneWithoutTiebreakerForWeekInput = {
    create?: XOR<GameCreateWithoutTiebreakerForWeekInput, GameUncheckedCreateWithoutTiebreakerForWeekInput>
    connectOrCreate?: GameCreateOrConnectWithoutTiebreakerForWeekInput
    connect?: GameWhereUniqueInput
  }

  export type GameUncheckedCreateNestedManyWithoutWeekInput = {
    create?: XOR<GameCreateWithoutWeekInput, GameUncheckedCreateWithoutWeekInput> | GameCreateWithoutWeekInput[] | GameUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: GameCreateOrConnectWithoutWeekInput | GameCreateOrConnectWithoutWeekInput[]
    createMany?: GameCreateManyWeekInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type PickUncheckedCreateNestedManyWithoutWeekInput = {
    create?: XOR<PickCreateWithoutWeekInput, PickUncheckedCreateWithoutWeekInput> | PickCreateWithoutWeekInput[] | PickUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: PickCreateOrConnectWithoutWeekInput | PickCreateOrConnectWithoutWeekInput[]
    createMany?: PickCreateManyWeekInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type WeeklyResultUncheckedCreateNestedManyWithoutWeekInput = {
    create?: XOR<WeeklyResultCreateWithoutWeekInput, WeeklyResultUncheckedCreateWithoutWeekInput> | WeeklyResultCreateWithoutWeekInput[] | WeeklyResultUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: WeeklyResultCreateOrConnectWithoutWeekInput | WeeklyResultCreateOrConnectWithoutWeekInput[]
    createMany?: WeeklyResultCreateManyWeekInputEnvelope
    connect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
  }

  export type EnumWeekTypeFieldUpdateOperationsInput = {
    set?: $Enums.WeekType
  }

  export type SeasonUpdateOneRequiredWithoutWeeksNestedInput = {
    create?: XOR<SeasonCreateWithoutWeeksInput, SeasonUncheckedCreateWithoutWeeksInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutWeeksInput
    upsert?: SeasonUpsertWithoutWeeksInput
    connect?: SeasonWhereUniqueInput
    update?: XOR<XOR<SeasonUpdateToOneWithWhereWithoutWeeksInput, SeasonUpdateWithoutWeeksInput>, SeasonUncheckedUpdateWithoutWeeksInput>
  }

  export type GameUpdateManyWithoutWeekNestedInput = {
    create?: XOR<GameCreateWithoutWeekInput, GameUncheckedCreateWithoutWeekInput> | GameCreateWithoutWeekInput[] | GameUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: GameCreateOrConnectWithoutWeekInput | GameCreateOrConnectWithoutWeekInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutWeekInput | GameUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: GameCreateManyWeekInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutWeekInput | GameUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: GameUpdateManyWithWhereWithoutWeekInput | GameUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PickUpdateManyWithoutWeekNestedInput = {
    create?: XOR<PickCreateWithoutWeekInput, PickUncheckedCreateWithoutWeekInput> | PickCreateWithoutWeekInput[] | PickUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: PickCreateOrConnectWithoutWeekInput | PickCreateOrConnectWithoutWeekInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutWeekInput | PickUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: PickCreateManyWeekInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutWeekInput | PickUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: PickUpdateManyWithWhereWithoutWeekInput | PickUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type WeeklyResultUpdateManyWithoutWeekNestedInput = {
    create?: XOR<WeeklyResultCreateWithoutWeekInput, WeeklyResultUncheckedCreateWithoutWeekInput> | WeeklyResultCreateWithoutWeekInput[] | WeeklyResultUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: WeeklyResultCreateOrConnectWithoutWeekInput | WeeklyResultCreateOrConnectWithoutWeekInput[]
    upsert?: WeeklyResultUpsertWithWhereUniqueWithoutWeekInput | WeeklyResultUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: WeeklyResultCreateManyWeekInputEnvelope
    set?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    disconnect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    delete?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    connect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    update?: WeeklyResultUpdateWithWhereUniqueWithoutWeekInput | WeeklyResultUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: WeeklyResultUpdateManyWithWhereWithoutWeekInput | WeeklyResultUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: WeeklyResultScalarWhereInput | WeeklyResultScalarWhereInput[]
  }

  export type GameUpdateOneWithoutTiebreakerForWeekNestedInput = {
    create?: XOR<GameCreateWithoutTiebreakerForWeekInput, GameUncheckedCreateWithoutTiebreakerForWeekInput>
    connectOrCreate?: GameCreateOrConnectWithoutTiebreakerForWeekInput
    upsert?: GameUpsertWithoutTiebreakerForWeekInput
    disconnect?: GameWhereInput | boolean
    delete?: GameWhereInput | boolean
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutTiebreakerForWeekInput, GameUpdateWithoutTiebreakerForWeekInput>, GameUncheckedUpdateWithoutTiebreakerForWeekInput>
  }

  export type GameUncheckedUpdateManyWithoutWeekNestedInput = {
    create?: XOR<GameCreateWithoutWeekInput, GameUncheckedCreateWithoutWeekInput> | GameCreateWithoutWeekInput[] | GameUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: GameCreateOrConnectWithoutWeekInput | GameCreateOrConnectWithoutWeekInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutWeekInput | GameUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: GameCreateManyWeekInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutWeekInput | GameUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: GameUpdateManyWithWhereWithoutWeekInput | GameUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PickUncheckedUpdateManyWithoutWeekNestedInput = {
    create?: XOR<PickCreateWithoutWeekInput, PickUncheckedCreateWithoutWeekInput> | PickCreateWithoutWeekInput[] | PickUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: PickCreateOrConnectWithoutWeekInput | PickCreateOrConnectWithoutWeekInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutWeekInput | PickUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: PickCreateManyWeekInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutWeekInput | PickUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: PickUpdateManyWithWhereWithoutWeekInput | PickUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type WeeklyResultUncheckedUpdateManyWithoutWeekNestedInput = {
    create?: XOR<WeeklyResultCreateWithoutWeekInput, WeeklyResultUncheckedCreateWithoutWeekInput> | WeeklyResultCreateWithoutWeekInput[] | WeeklyResultUncheckedCreateWithoutWeekInput[]
    connectOrCreate?: WeeklyResultCreateOrConnectWithoutWeekInput | WeeklyResultCreateOrConnectWithoutWeekInput[]
    upsert?: WeeklyResultUpsertWithWhereUniqueWithoutWeekInput | WeeklyResultUpsertWithWhereUniqueWithoutWeekInput[]
    createMany?: WeeklyResultCreateManyWeekInputEnvelope
    set?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    disconnect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    delete?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    connect?: WeeklyResultWhereUniqueInput | WeeklyResultWhereUniqueInput[]
    update?: WeeklyResultUpdateWithWhereUniqueWithoutWeekInput | WeeklyResultUpdateWithWhereUniqueWithoutWeekInput[]
    updateMany?: WeeklyResultUpdateManyWithWhereWithoutWeekInput | WeeklyResultUpdateManyWithWhereWithoutWeekInput[]
    deleteMany?: WeeklyResultScalarWhereInput | WeeklyResultScalarWhereInput[]
  }

  export type GameCreateNestedManyWithoutHomeTeamInput = {
    create?: XOR<GameCreateWithoutHomeTeamInput, GameUncheckedCreateWithoutHomeTeamInput> | GameCreateWithoutHomeTeamInput[] | GameUncheckedCreateWithoutHomeTeamInput[]
    connectOrCreate?: GameCreateOrConnectWithoutHomeTeamInput | GameCreateOrConnectWithoutHomeTeamInput[]
    createMany?: GameCreateManyHomeTeamInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameCreateNestedManyWithoutAwayTeamInput = {
    create?: XOR<GameCreateWithoutAwayTeamInput, GameUncheckedCreateWithoutAwayTeamInput> | GameCreateWithoutAwayTeamInput[] | GameUncheckedCreateWithoutAwayTeamInput[]
    connectOrCreate?: GameCreateOrConnectWithoutAwayTeamInput | GameCreateOrConnectWithoutAwayTeamInput[]
    createMany?: GameCreateManyAwayTeamInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type PickCreateNestedManyWithoutSelectedTeamInput = {
    create?: XOR<PickCreateWithoutSelectedTeamInput, PickUncheckedCreateWithoutSelectedTeamInput> | PickCreateWithoutSelectedTeamInput[] | PickUncheckedCreateWithoutSelectedTeamInput[]
    connectOrCreate?: PickCreateOrConnectWithoutSelectedTeamInput | PickCreateOrConnectWithoutSelectedTeamInput[]
    createMany?: PickCreateManySelectedTeamInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutHomeTeamInput = {
    create?: XOR<GameCreateWithoutHomeTeamInput, GameUncheckedCreateWithoutHomeTeamInput> | GameCreateWithoutHomeTeamInput[] | GameUncheckedCreateWithoutHomeTeamInput[]
    connectOrCreate?: GameCreateOrConnectWithoutHomeTeamInput | GameCreateOrConnectWithoutHomeTeamInput[]
    createMany?: GameCreateManyHomeTeamInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutAwayTeamInput = {
    create?: XOR<GameCreateWithoutAwayTeamInput, GameUncheckedCreateWithoutAwayTeamInput> | GameCreateWithoutAwayTeamInput[] | GameUncheckedCreateWithoutAwayTeamInput[]
    connectOrCreate?: GameCreateOrConnectWithoutAwayTeamInput | GameCreateOrConnectWithoutAwayTeamInput[]
    createMany?: GameCreateManyAwayTeamInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type PickUncheckedCreateNestedManyWithoutSelectedTeamInput = {
    create?: XOR<PickCreateWithoutSelectedTeamInput, PickUncheckedCreateWithoutSelectedTeamInput> | PickCreateWithoutSelectedTeamInput[] | PickUncheckedCreateWithoutSelectedTeamInput[]
    connectOrCreate?: PickCreateOrConnectWithoutSelectedTeamInput | PickCreateOrConnectWithoutSelectedTeamInput[]
    createMany?: PickCreateManySelectedTeamInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type EnumConferenceFieldUpdateOperationsInput = {
    set?: $Enums.Conference
  }

  export type EnumDivisionFieldUpdateOperationsInput = {
    set?: $Enums.Division
  }

  export type GameUpdateManyWithoutHomeTeamNestedInput = {
    create?: XOR<GameCreateWithoutHomeTeamInput, GameUncheckedCreateWithoutHomeTeamInput> | GameCreateWithoutHomeTeamInput[] | GameUncheckedCreateWithoutHomeTeamInput[]
    connectOrCreate?: GameCreateOrConnectWithoutHomeTeamInput | GameCreateOrConnectWithoutHomeTeamInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutHomeTeamInput | GameUpsertWithWhereUniqueWithoutHomeTeamInput[]
    createMany?: GameCreateManyHomeTeamInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutHomeTeamInput | GameUpdateWithWhereUniqueWithoutHomeTeamInput[]
    updateMany?: GameUpdateManyWithWhereWithoutHomeTeamInput | GameUpdateManyWithWhereWithoutHomeTeamInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUpdateManyWithoutAwayTeamNestedInput = {
    create?: XOR<GameCreateWithoutAwayTeamInput, GameUncheckedCreateWithoutAwayTeamInput> | GameCreateWithoutAwayTeamInput[] | GameUncheckedCreateWithoutAwayTeamInput[]
    connectOrCreate?: GameCreateOrConnectWithoutAwayTeamInput | GameCreateOrConnectWithoutAwayTeamInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutAwayTeamInput | GameUpsertWithWhereUniqueWithoutAwayTeamInput[]
    createMany?: GameCreateManyAwayTeamInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutAwayTeamInput | GameUpdateWithWhereUniqueWithoutAwayTeamInput[]
    updateMany?: GameUpdateManyWithWhereWithoutAwayTeamInput | GameUpdateManyWithWhereWithoutAwayTeamInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PickUpdateManyWithoutSelectedTeamNestedInput = {
    create?: XOR<PickCreateWithoutSelectedTeamInput, PickUncheckedCreateWithoutSelectedTeamInput> | PickCreateWithoutSelectedTeamInput[] | PickUncheckedCreateWithoutSelectedTeamInput[]
    connectOrCreate?: PickCreateOrConnectWithoutSelectedTeamInput | PickCreateOrConnectWithoutSelectedTeamInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutSelectedTeamInput | PickUpsertWithWhereUniqueWithoutSelectedTeamInput[]
    createMany?: PickCreateManySelectedTeamInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutSelectedTeamInput | PickUpdateWithWhereUniqueWithoutSelectedTeamInput[]
    updateMany?: PickUpdateManyWithWhereWithoutSelectedTeamInput | PickUpdateManyWithWhereWithoutSelectedTeamInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutHomeTeamNestedInput = {
    create?: XOR<GameCreateWithoutHomeTeamInput, GameUncheckedCreateWithoutHomeTeamInput> | GameCreateWithoutHomeTeamInput[] | GameUncheckedCreateWithoutHomeTeamInput[]
    connectOrCreate?: GameCreateOrConnectWithoutHomeTeamInput | GameCreateOrConnectWithoutHomeTeamInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutHomeTeamInput | GameUpsertWithWhereUniqueWithoutHomeTeamInput[]
    createMany?: GameCreateManyHomeTeamInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutHomeTeamInput | GameUpdateWithWhereUniqueWithoutHomeTeamInput[]
    updateMany?: GameUpdateManyWithWhereWithoutHomeTeamInput | GameUpdateManyWithWhereWithoutHomeTeamInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutAwayTeamNestedInput = {
    create?: XOR<GameCreateWithoutAwayTeamInput, GameUncheckedCreateWithoutAwayTeamInput> | GameCreateWithoutAwayTeamInput[] | GameUncheckedCreateWithoutAwayTeamInput[]
    connectOrCreate?: GameCreateOrConnectWithoutAwayTeamInput | GameCreateOrConnectWithoutAwayTeamInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutAwayTeamInput | GameUpsertWithWhereUniqueWithoutAwayTeamInput[]
    createMany?: GameCreateManyAwayTeamInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutAwayTeamInput | GameUpdateWithWhereUniqueWithoutAwayTeamInput[]
    updateMany?: GameUpdateManyWithWhereWithoutAwayTeamInput | GameUpdateManyWithWhereWithoutAwayTeamInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PickUncheckedUpdateManyWithoutSelectedTeamNestedInput = {
    create?: XOR<PickCreateWithoutSelectedTeamInput, PickUncheckedCreateWithoutSelectedTeamInput> | PickCreateWithoutSelectedTeamInput[] | PickUncheckedCreateWithoutSelectedTeamInput[]
    connectOrCreate?: PickCreateOrConnectWithoutSelectedTeamInput | PickCreateOrConnectWithoutSelectedTeamInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutSelectedTeamInput | PickUpsertWithWhereUniqueWithoutSelectedTeamInput[]
    createMany?: PickCreateManySelectedTeamInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutSelectedTeamInput | PickUpdateWithWhereUniqueWithoutSelectedTeamInput[]
    updateMany?: PickUpdateManyWithWhereWithoutSelectedTeamInput | PickUpdateManyWithWhereWithoutSelectedTeamInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type WeekCreateNestedOneWithoutGamesInput = {
    create?: XOR<WeekCreateWithoutGamesInput, WeekUncheckedCreateWithoutGamesInput>
    connectOrCreate?: WeekCreateOrConnectWithoutGamesInput
    connect?: WeekWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutHomeGamesInput = {
    create?: XOR<TeamCreateWithoutHomeGamesInput, TeamUncheckedCreateWithoutHomeGamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutHomeGamesInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutAwayGamesInput = {
    create?: XOR<TeamCreateWithoutAwayGamesInput, TeamUncheckedCreateWithoutAwayGamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutAwayGamesInput
    connect?: TeamWhereUniqueInput
  }

  export type PickCreateNestedManyWithoutGameInput = {
    create?: XOR<PickCreateWithoutGameInput, PickUncheckedCreateWithoutGameInput> | PickCreateWithoutGameInput[] | PickUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PickCreateOrConnectWithoutGameInput | PickCreateOrConnectWithoutGameInput[]
    createMany?: PickCreateManyGameInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type WeekCreateNestedOneWithoutTiebreakerGameInput = {
    create?: XOR<WeekCreateWithoutTiebreakerGameInput, WeekUncheckedCreateWithoutTiebreakerGameInput>
    connectOrCreate?: WeekCreateOrConnectWithoutTiebreakerGameInput
    connect?: WeekWhereUniqueInput
  }

  export type PickUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<PickCreateWithoutGameInput, PickUncheckedCreateWithoutGameInput> | PickCreateWithoutGameInput[] | PickUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PickCreateOrConnectWithoutGameInput | PickCreateOrConnectWithoutGameInput[]
    createMany?: PickCreateManyGameInputEnvelope
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
  }

  export type WeekUncheckedCreateNestedOneWithoutTiebreakerGameInput = {
    create?: XOR<WeekCreateWithoutTiebreakerGameInput, WeekUncheckedCreateWithoutTiebreakerGameInput>
    connectOrCreate?: WeekCreateOrConnectWithoutTiebreakerGameInput
    connect?: WeekWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumGameStatusFieldUpdateOperationsInput = {
    set?: $Enums.GameStatus
  }

  export type WeekUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<WeekCreateWithoutGamesInput, WeekUncheckedCreateWithoutGamesInput>
    connectOrCreate?: WeekCreateOrConnectWithoutGamesInput
    upsert?: WeekUpsertWithoutGamesInput
    connect?: WeekWhereUniqueInput
    update?: XOR<XOR<WeekUpdateToOneWithWhereWithoutGamesInput, WeekUpdateWithoutGamesInput>, WeekUncheckedUpdateWithoutGamesInput>
  }

  export type TeamUpdateOneRequiredWithoutHomeGamesNestedInput = {
    create?: XOR<TeamCreateWithoutHomeGamesInput, TeamUncheckedCreateWithoutHomeGamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutHomeGamesInput
    upsert?: TeamUpsertWithoutHomeGamesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutHomeGamesInput, TeamUpdateWithoutHomeGamesInput>, TeamUncheckedUpdateWithoutHomeGamesInput>
  }

  export type TeamUpdateOneRequiredWithoutAwayGamesNestedInput = {
    create?: XOR<TeamCreateWithoutAwayGamesInput, TeamUncheckedCreateWithoutAwayGamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutAwayGamesInput
    upsert?: TeamUpsertWithoutAwayGamesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutAwayGamesInput, TeamUpdateWithoutAwayGamesInput>, TeamUncheckedUpdateWithoutAwayGamesInput>
  }

  export type PickUpdateManyWithoutGameNestedInput = {
    create?: XOR<PickCreateWithoutGameInput, PickUncheckedCreateWithoutGameInput> | PickCreateWithoutGameInput[] | PickUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PickCreateOrConnectWithoutGameInput | PickCreateOrConnectWithoutGameInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutGameInput | PickUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PickCreateManyGameInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutGameInput | PickUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PickUpdateManyWithWhereWithoutGameInput | PickUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type WeekUpdateOneWithoutTiebreakerGameNestedInput = {
    create?: XOR<WeekCreateWithoutTiebreakerGameInput, WeekUncheckedCreateWithoutTiebreakerGameInput>
    connectOrCreate?: WeekCreateOrConnectWithoutTiebreakerGameInput
    upsert?: WeekUpsertWithoutTiebreakerGameInput
    disconnect?: WeekWhereInput | boolean
    delete?: WeekWhereInput | boolean
    connect?: WeekWhereUniqueInput
    update?: XOR<XOR<WeekUpdateToOneWithWhereWithoutTiebreakerGameInput, WeekUpdateWithoutTiebreakerGameInput>, WeekUncheckedUpdateWithoutTiebreakerGameInput>
  }

  export type PickUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<PickCreateWithoutGameInput, PickUncheckedCreateWithoutGameInput> | PickCreateWithoutGameInput[] | PickUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PickCreateOrConnectWithoutGameInput | PickCreateOrConnectWithoutGameInput[]
    upsert?: PickUpsertWithWhereUniqueWithoutGameInput | PickUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PickCreateManyGameInputEnvelope
    set?: PickWhereUniqueInput | PickWhereUniqueInput[]
    disconnect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    delete?: PickWhereUniqueInput | PickWhereUniqueInput[]
    connect?: PickWhereUniqueInput | PickWhereUniqueInput[]
    update?: PickUpdateWithWhereUniqueWithoutGameInput | PickUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PickUpdateManyWithWhereWithoutGameInput | PickUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PickScalarWhereInput | PickScalarWhereInput[]
  }

  export type WeekUncheckedUpdateOneWithoutTiebreakerGameNestedInput = {
    create?: XOR<WeekCreateWithoutTiebreakerGameInput, WeekUncheckedCreateWithoutTiebreakerGameInput>
    connectOrCreate?: WeekCreateOrConnectWithoutTiebreakerGameInput
    upsert?: WeekUpsertWithoutTiebreakerGameInput
    disconnect?: WeekWhereInput | boolean
    delete?: WeekWhereInput | boolean
    connect?: WeekWhereUniqueInput
    update?: XOR<XOR<WeekUpdateToOneWithWhereWithoutTiebreakerGameInput, WeekUpdateWithoutTiebreakerGameInput>, WeekUncheckedUpdateWithoutTiebreakerGameInput>
  }

  export type UserCreateNestedOneWithoutPicksInput = {
    create?: XOR<UserCreateWithoutPicksInput, UserUncheckedCreateWithoutPicksInput>
    connectOrCreate?: UserCreateOrConnectWithoutPicksInput
    connect?: UserWhereUniqueInput
  }

  export type WeekCreateNestedOneWithoutPicksInput = {
    create?: XOR<WeekCreateWithoutPicksInput, WeekUncheckedCreateWithoutPicksInput>
    connectOrCreate?: WeekCreateOrConnectWithoutPicksInput
    connect?: WeekWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutPicksInput = {
    create?: XOR<GameCreateWithoutPicksInput, GameUncheckedCreateWithoutPicksInput>
    connectOrCreate?: GameCreateOrConnectWithoutPicksInput
    connect?: GameWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutPicksInput = {
    create?: XOR<TeamCreateWithoutPicksInput, TeamUncheckedCreateWithoutPicksInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPicksInput
    connect?: TeamWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutPicksNestedInput = {
    create?: XOR<UserCreateWithoutPicksInput, UserUncheckedCreateWithoutPicksInput>
    connectOrCreate?: UserCreateOrConnectWithoutPicksInput
    upsert?: UserUpsertWithoutPicksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPicksInput, UserUpdateWithoutPicksInput>, UserUncheckedUpdateWithoutPicksInput>
  }

  export type WeekUpdateOneRequiredWithoutPicksNestedInput = {
    create?: XOR<WeekCreateWithoutPicksInput, WeekUncheckedCreateWithoutPicksInput>
    connectOrCreate?: WeekCreateOrConnectWithoutPicksInput
    upsert?: WeekUpsertWithoutPicksInput
    connect?: WeekWhereUniqueInput
    update?: XOR<XOR<WeekUpdateToOneWithWhereWithoutPicksInput, WeekUpdateWithoutPicksInput>, WeekUncheckedUpdateWithoutPicksInput>
  }

  export type GameUpdateOneRequiredWithoutPicksNestedInput = {
    create?: XOR<GameCreateWithoutPicksInput, GameUncheckedCreateWithoutPicksInput>
    connectOrCreate?: GameCreateOrConnectWithoutPicksInput
    upsert?: GameUpsertWithoutPicksInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutPicksInput, GameUpdateWithoutPicksInput>, GameUncheckedUpdateWithoutPicksInput>
  }

  export type TeamUpdateOneWithoutPicksNestedInput = {
    create?: XOR<TeamCreateWithoutPicksInput, TeamUncheckedCreateWithoutPicksInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPicksInput
    upsert?: TeamUpsertWithoutPicksInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPicksInput, TeamUpdateWithoutPicksInput>, TeamUncheckedUpdateWithoutPicksInput>
  }

  export type UserCreateNestedOneWithoutWeeklyResultsInput = {
    create?: XOR<UserCreateWithoutWeeklyResultsInput, UserUncheckedCreateWithoutWeeklyResultsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeeklyResultsInput
    connect?: UserWhereUniqueInput
  }

  export type WeekCreateNestedOneWithoutWeeklyResultsInput = {
    create?: XOR<WeekCreateWithoutWeeklyResultsInput, WeekUncheckedCreateWithoutWeeklyResultsInput>
    connectOrCreate?: WeekCreateOrConnectWithoutWeeklyResultsInput
    connect?: WeekWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutWeeklyResultsNestedInput = {
    create?: XOR<UserCreateWithoutWeeklyResultsInput, UserUncheckedCreateWithoutWeeklyResultsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeeklyResultsInput
    upsert?: UserUpsertWithoutWeeklyResultsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWeeklyResultsInput, UserUpdateWithoutWeeklyResultsInput>, UserUncheckedUpdateWithoutWeeklyResultsInput>
  }

  export type WeekUpdateOneRequiredWithoutWeeklyResultsNestedInput = {
    create?: XOR<WeekCreateWithoutWeeklyResultsInput, WeekUncheckedCreateWithoutWeeklyResultsInput>
    connectOrCreate?: WeekCreateOrConnectWithoutWeeklyResultsInput
    upsert?: WeekUpsertWithoutWeeklyResultsInput
    connect?: WeekWhereUniqueInput
    update?: XOR<XOR<WeekUpdateToOneWithWhereWithoutWeeklyResultsInput, WeekUpdateWithoutWeeklyResultsInput>, WeekUncheckedUpdateWithoutWeeklyResultsInput>
  }

  export type SeasonCreateNestedOneWithoutLeaguesInput = {
    create?: XOR<SeasonCreateWithoutLeaguesInput, SeasonUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutLeaguesInput
    connect?: SeasonWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedLeaguesInput = {
    create?: XOR<UserCreateWithoutCreatedLeaguesInput, UserUncheckedCreateWithoutCreatedLeaguesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedLeaguesInput
    connect?: UserWhereUniqueInput
  }

  export type UserLeagueCreateNestedManyWithoutLeagueInput = {
    create?: XOR<UserLeagueCreateWithoutLeagueInput, UserLeagueUncheckedCreateWithoutLeagueInput> | UserLeagueCreateWithoutLeagueInput[] | UserLeagueUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: UserLeagueCreateOrConnectWithoutLeagueInput | UserLeagueCreateOrConnectWithoutLeagueInput[]
    createMany?: UserLeagueCreateManyLeagueInputEnvelope
    connect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
  }

  export type LeagueMessageCreateNestedManyWithoutLeagueInput = {
    create?: XOR<LeagueMessageCreateWithoutLeagueInput, LeagueMessageUncheckedCreateWithoutLeagueInput> | LeagueMessageCreateWithoutLeagueInput[] | LeagueMessageUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: LeagueMessageCreateOrConnectWithoutLeagueInput | LeagueMessageCreateOrConnectWithoutLeagueInput[]
    createMany?: LeagueMessageCreateManyLeagueInputEnvelope
    connect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
  }

  export type UserLeagueUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<UserLeagueCreateWithoutLeagueInput, UserLeagueUncheckedCreateWithoutLeagueInput> | UserLeagueCreateWithoutLeagueInput[] | UserLeagueUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: UserLeagueCreateOrConnectWithoutLeagueInput | UserLeagueCreateOrConnectWithoutLeagueInput[]
    createMany?: UserLeagueCreateManyLeagueInputEnvelope
    connect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
  }

  export type LeagueMessageUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<LeagueMessageCreateWithoutLeagueInput, LeagueMessageUncheckedCreateWithoutLeagueInput> | LeagueMessageCreateWithoutLeagueInput[] | LeagueMessageUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: LeagueMessageCreateOrConnectWithoutLeagueInput | LeagueMessageCreateOrConnectWithoutLeagueInput[]
    createMany?: LeagueMessageCreateManyLeagueInputEnvelope
    connect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
  }

  export type EnumScoringSystemFieldUpdateOperationsInput = {
    set?: $Enums.ScoringSystem
  }

  export type SeasonUpdateOneRequiredWithoutLeaguesNestedInput = {
    create?: XOR<SeasonCreateWithoutLeaguesInput, SeasonUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutLeaguesInput
    upsert?: SeasonUpsertWithoutLeaguesInput
    connect?: SeasonWhereUniqueInput
    update?: XOR<XOR<SeasonUpdateToOneWithWhereWithoutLeaguesInput, SeasonUpdateWithoutLeaguesInput>, SeasonUncheckedUpdateWithoutLeaguesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedLeaguesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedLeaguesInput, UserUncheckedCreateWithoutCreatedLeaguesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedLeaguesInput
    upsert?: UserUpsertWithoutCreatedLeaguesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedLeaguesInput, UserUpdateWithoutCreatedLeaguesInput>, UserUncheckedUpdateWithoutCreatedLeaguesInput>
  }

  export type UserLeagueUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<UserLeagueCreateWithoutLeagueInput, UserLeagueUncheckedCreateWithoutLeagueInput> | UserLeagueCreateWithoutLeagueInput[] | UserLeagueUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: UserLeagueCreateOrConnectWithoutLeagueInput | UserLeagueCreateOrConnectWithoutLeagueInput[]
    upsert?: UserLeagueUpsertWithWhereUniqueWithoutLeagueInput | UserLeagueUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: UserLeagueCreateManyLeagueInputEnvelope
    set?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    disconnect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    delete?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    connect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    update?: UserLeagueUpdateWithWhereUniqueWithoutLeagueInput | UserLeagueUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: UserLeagueUpdateManyWithWhereWithoutLeagueInput | UserLeagueUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: UserLeagueScalarWhereInput | UserLeagueScalarWhereInput[]
  }

  export type LeagueMessageUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<LeagueMessageCreateWithoutLeagueInput, LeagueMessageUncheckedCreateWithoutLeagueInput> | LeagueMessageCreateWithoutLeagueInput[] | LeagueMessageUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: LeagueMessageCreateOrConnectWithoutLeagueInput | LeagueMessageCreateOrConnectWithoutLeagueInput[]
    upsert?: LeagueMessageUpsertWithWhereUniqueWithoutLeagueInput | LeagueMessageUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: LeagueMessageCreateManyLeagueInputEnvelope
    set?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    disconnect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    delete?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    connect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    update?: LeagueMessageUpdateWithWhereUniqueWithoutLeagueInput | LeagueMessageUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: LeagueMessageUpdateManyWithWhereWithoutLeagueInput | LeagueMessageUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: LeagueMessageScalarWhereInput | LeagueMessageScalarWhereInput[]
  }

  export type UserLeagueUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<UserLeagueCreateWithoutLeagueInput, UserLeagueUncheckedCreateWithoutLeagueInput> | UserLeagueCreateWithoutLeagueInput[] | UserLeagueUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: UserLeagueCreateOrConnectWithoutLeagueInput | UserLeagueCreateOrConnectWithoutLeagueInput[]
    upsert?: UserLeagueUpsertWithWhereUniqueWithoutLeagueInput | UserLeagueUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: UserLeagueCreateManyLeagueInputEnvelope
    set?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    disconnect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    delete?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    connect?: UserLeagueWhereUniqueInput | UserLeagueWhereUniqueInput[]
    update?: UserLeagueUpdateWithWhereUniqueWithoutLeagueInput | UserLeagueUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: UserLeagueUpdateManyWithWhereWithoutLeagueInput | UserLeagueUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: UserLeagueScalarWhereInput | UserLeagueScalarWhereInput[]
  }

  export type LeagueMessageUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<LeagueMessageCreateWithoutLeagueInput, LeagueMessageUncheckedCreateWithoutLeagueInput> | LeagueMessageCreateWithoutLeagueInput[] | LeagueMessageUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: LeagueMessageCreateOrConnectWithoutLeagueInput | LeagueMessageCreateOrConnectWithoutLeagueInput[]
    upsert?: LeagueMessageUpsertWithWhereUniqueWithoutLeagueInput | LeagueMessageUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: LeagueMessageCreateManyLeagueInputEnvelope
    set?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    disconnect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    delete?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    connect?: LeagueMessageWhereUniqueInput | LeagueMessageWhereUniqueInput[]
    update?: LeagueMessageUpdateWithWhereUniqueWithoutLeagueInput | LeagueMessageUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: LeagueMessageUpdateManyWithWhereWithoutLeagueInput | LeagueMessageUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: LeagueMessageScalarWhereInput | LeagueMessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserLeaguesInput = {
    create?: XOR<UserCreateWithoutUserLeaguesInput, UserUncheckedCreateWithoutUserLeaguesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserLeaguesInput
    connect?: UserWhereUniqueInput
  }

  export type LeagueCreateNestedOneWithoutMembersInput = {
    create?: XOR<LeagueCreateWithoutMembersInput, LeagueUncheckedCreateWithoutMembersInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutMembersInput
    connect?: LeagueWhereUniqueInput
  }

  export type EnumLeagueRoleFieldUpdateOperationsInput = {
    set?: $Enums.LeagueRole
  }

  export type EnumMemberStatusFieldUpdateOperationsInput = {
    set?: $Enums.MemberStatus
  }

  export type UserUpdateOneRequiredWithoutUserLeaguesNestedInput = {
    create?: XOR<UserCreateWithoutUserLeaguesInput, UserUncheckedCreateWithoutUserLeaguesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserLeaguesInput
    upsert?: UserUpsertWithoutUserLeaguesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserLeaguesInput, UserUpdateWithoutUserLeaguesInput>, UserUncheckedUpdateWithoutUserLeaguesInput>
  }

  export type LeagueUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<LeagueCreateWithoutMembersInput, LeagueUncheckedCreateWithoutMembersInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutMembersInput
    upsert?: LeagueUpsertWithoutMembersInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutMembersInput, LeagueUpdateWithoutMembersInput>, LeagueUncheckedUpdateWithoutMembersInput>
  }

  export type LeagueCreateNestedOneWithoutMessagesInput = {
    create?: XOR<LeagueCreateWithoutMessagesInput, LeagueUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutMessagesInput
    connect?: LeagueWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type LeagueUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<LeagueCreateWithoutMessagesInput, LeagueUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutMessagesInput
    upsert?: LeagueUpsertWithoutMessagesInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutMessagesInput, LeagueUpdateWithoutMessagesInput>, LeagueUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserAchievementCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type EnumAchievementCategoryFieldUpdateOperationsInput = {
    set?: $Enums.AchievementCategory
  }

  export type EnumRarityFieldUpdateOperationsInput = {
    set?: $Enums.Rarity
  }

  export type UserAchievementUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAchievementsInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    connect?: UserWhereUniqueInput
  }

  export type AchievementCreateNestedOneWithoutUsersInput = {
    create?: XOR<AchievementCreateWithoutUsersInput, AchievementUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUsersInput
    connect?: AchievementWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAchievementsNestedInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    upsert?: UserUpsertWithoutAchievementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAchievementsInput, UserUpdateWithoutAchievementsInput>, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type AchievementUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<AchievementCreateWithoutUsersInput, AchievementUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUsersInput
    upsert?: AchievementUpsertWithoutUsersInput
    connect?: AchievementWhereUniqueInput
    update?: XOR<XOR<AchievementUpdateToOneWithWhereWithoutUsersInput, AchievementUpdateWithoutUsersInput>, AchievementUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumWeekTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WeekType | EnumWeekTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WeekType[] | ListEnumWeekTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WeekType[] | ListEnumWeekTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekTypeFilter<$PrismaModel> | $Enums.WeekType
  }

  export type NestedEnumWeekTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WeekType | EnumWeekTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WeekType[] | ListEnumWeekTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WeekType[] | ListEnumWeekTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWeekTypeWithAggregatesFilter<$PrismaModel> | $Enums.WeekType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWeekTypeFilter<$PrismaModel>
    _max?: NestedEnumWeekTypeFilter<$PrismaModel>
  }

  export type NestedEnumConferenceFilter<$PrismaModel = never> = {
    equals?: $Enums.Conference | EnumConferenceFieldRefInput<$PrismaModel>
    in?: $Enums.Conference[] | ListEnumConferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.Conference[] | ListEnumConferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumConferenceFilter<$PrismaModel> | $Enums.Conference
  }

  export type NestedEnumDivisionFilter<$PrismaModel = never> = {
    equals?: $Enums.Division | EnumDivisionFieldRefInput<$PrismaModel>
    in?: $Enums.Division[] | ListEnumDivisionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Division[] | ListEnumDivisionFieldRefInput<$PrismaModel>
    not?: NestedEnumDivisionFilter<$PrismaModel> | $Enums.Division
  }

  export type NestedEnumConferenceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Conference | EnumConferenceFieldRefInput<$PrismaModel>
    in?: $Enums.Conference[] | ListEnumConferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.Conference[] | ListEnumConferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumConferenceWithAggregatesFilter<$PrismaModel> | $Enums.Conference
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConferenceFilter<$PrismaModel>
    _max?: NestedEnumConferenceFilter<$PrismaModel>
  }

  export type NestedEnumDivisionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Division | EnumDivisionFieldRefInput<$PrismaModel>
    in?: $Enums.Division[] | ListEnumDivisionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Division[] | ListEnumDivisionFieldRefInput<$PrismaModel>
    not?: NestedEnumDivisionWithAggregatesFilter<$PrismaModel> | $Enums.Division
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDivisionFilter<$PrismaModel>
    _max?: NestedEnumDivisionFilter<$PrismaModel>
  }

  export type NestedEnumGameStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusFilter<$PrismaModel> | $Enums.GameStatus
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGameStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusWithAggregatesFilter<$PrismaModel> | $Enums.GameStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameStatusFilter<$PrismaModel>
    _max?: NestedEnumGameStatusFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumScoringSystemFilter<$PrismaModel = never> = {
    equals?: $Enums.ScoringSystem | EnumScoringSystemFieldRefInput<$PrismaModel>
    in?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumScoringSystemFilter<$PrismaModel> | $Enums.ScoringSystem
  }

  export type NestedEnumScoringSystemWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScoringSystem | EnumScoringSystemFieldRefInput<$PrismaModel>
    in?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScoringSystem[] | ListEnumScoringSystemFieldRefInput<$PrismaModel>
    not?: NestedEnumScoringSystemWithAggregatesFilter<$PrismaModel> | $Enums.ScoringSystem
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScoringSystemFilter<$PrismaModel>
    _max?: NestedEnumScoringSystemFilter<$PrismaModel>
  }

  export type NestedEnumLeagueRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.LeagueRole | EnumLeagueRoleFieldRefInput<$PrismaModel>
    in?: $Enums.LeagueRole[] | ListEnumLeagueRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeagueRole[] | ListEnumLeagueRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumLeagueRoleFilter<$PrismaModel> | $Enums.LeagueRole
  }

  export type NestedEnumMemberStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberStatus | EnumMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MemberStatus[] | ListEnumMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberStatus[] | ListEnumMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberStatusFilter<$PrismaModel> | $Enums.MemberStatus
  }

  export type NestedEnumLeagueRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeagueRole | EnumLeagueRoleFieldRefInput<$PrismaModel>
    in?: $Enums.LeagueRole[] | ListEnumLeagueRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeagueRole[] | ListEnumLeagueRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumLeagueRoleWithAggregatesFilter<$PrismaModel> | $Enums.LeagueRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeagueRoleFilter<$PrismaModel>
    _max?: NestedEnumLeagueRoleFilter<$PrismaModel>
  }

  export type NestedEnumMemberStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberStatus | EnumMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MemberStatus[] | ListEnumMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberStatus[] | ListEnumMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberStatusWithAggregatesFilter<$PrismaModel> | $Enums.MemberStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemberStatusFilter<$PrismaModel>
    _max?: NestedEnumMemberStatusFilter<$PrismaModel>
  }

  export type NestedEnumAchievementCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementCategory | EnumAchievementCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementCategoryFilter<$PrismaModel> | $Enums.AchievementCategory
  }

  export type NestedEnumRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.Rarity | EnumRarityFieldRefInput<$PrismaModel>
    in?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumRarityFilter<$PrismaModel> | $Enums.Rarity
  }

  export type NestedEnumAchievementCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementCategory | EnumAchievementCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementCategory[] | ListEnumAchievementCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementCategoryWithAggregatesFilter<$PrismaModel> | $Enums.AchievementCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementCategoryFilter<$PrismaModel>
    _max?: NestedEnumAchievementCategoryFilter<$PrismaModel>
  }

  export type NestedEnumRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rarity | EnumRarityFieldRefInput<$PrismaModel>
    in?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumRarityWithAggregatesFilter<$PrismaModel> | $Enums.Rarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRarityFilter<$PrismaModel>
    _max?: NestedEnumRarityFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type PickCreateWithoutUserInput = {
    id?: string
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    week: WeekCreateNestedOneWithoutPicksInput
    game: GameCreateNestedOneWithoutPicksInput
    selectedTeam?: TeamCreateNestedOneWithoutPicksInput
  }

  export type PickUncheckedCreateWithoutUserInput = {
    id?: string
    weekId: string
    gameId: string
    selectedTeamId?: string | null
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type PickCreateOrConnectWithoutUserInput = {
    where: PickWhereUniqueInput
    create: XOR<PickCreateWithoutUserInput, PickUncheckedCreateWithoutUserInput>
  }

  export type PickCreateManyUserInputEnvelope = {
    data: PickCreateManyUserInput | PickCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WeeklyResultCreateWithoutUserInput = {
    id?: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutWeeklyResultsInput
  }

  export type WeeklyResultUncheckedCreateWithoutUserInput = {
    id?: string
    weekId: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyResultCreateOrConnectWithoutUserInput = {
    where: WeeklyResultWhereUniqueInput
    create: XOR<WeeklyResultCreateWithoutUserInput, WeeklyResultUncheckedCreateWithoutUserInput>
  }

  export type WeeklyResultCreateManyUserInputEnvelope = {
    data: WeeklyResultCreateManyUserInput | WeeklyResultCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserLeagueCreateWithoutUserInput = {
    id?: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
    league: LeagueCreateNestedOneWithoutMembersInput
  }

  export type UserLeagueUncheckedCreateWithoutUserInput = {
    id?: string
    leagueId: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
  }

  export type UserLeagueCreateOrConnectWithoutUserInput = {
    where: UserLeagueWhereUniqueInput
    create: XOR<UserLeagueCreateWithoutUserInput, UserLeagueUncheckedCreateWithoutUserInput>
  }

  export type UserLeagueCreateManyUserInputEnvelope = {
    data: UserLeagueCreateManyUserInput | UserLeagueCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LeagueCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    season: SeasonCreateNestedOneWithoutLeaguesInput
    members?: UserLeagueCreateNestedManyWithoutLeagueInput
    messages?: LeagueMessageCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutCreatorInput = {
    id?: string
    seasonId: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    members?: UserLeagueUncheckedCreateNestedManyWithoutLeagueInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutCreatorInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutCreatorInput, LeagueUncheckedCreateWithoutCreatorInput>
  }

  export type LeagueCreateManyCreatorInputEnvelope = {
    data: LeagueCreateManyCreatorInput | LeagueCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementCreateWithoutUserInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    achievement: AchievementCreateNestedOneWithoutUsersInput
  }

  export type UserAchievementUncheckedCreateWithoutUserInput = {
    id?: string
    achievementId: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementCreateOrConnectWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementCreateManyUserInputEnvelope = {
    data: UserAchievementCreateManyUserInput | UserAchievementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id?: string
    token: string
    family: string
    expiresAt: Date | string
    isRevoked?: boolean
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    family: string
    expiresAt: Date | string
    isRevoked?: boolean
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LoginAttemptCreateWithoutUserInput = {
    id?: string
    identifier: string
    ipAddress: string
    userAgent?: string | null
    success?: boolean
    createdAt?: Date | string
  }

  export type LoginAttemptUncheckedCreateWithoutUserInput = {
    id?: string
    identifier: string
    ipAddress: string
    userAgent?: string | null
    success?: boolean
    createdAt?: Date | string
  }

  export type LoginAttemptCreateOrConnectWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    create: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput>
  }

  export type LoginAttemptCreateManyUserInputEnvelope = {
    data: LoginAttemptCreateManyUserInput | LoginAttemptCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: $Enums.Priority
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: $Enums.Priority
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LeagueMessageCreateWithoutUserInput = {
    id?: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
    league: LeagueCreateNestedOneWithoutMessagesInput
  }

  export type LeagueMessageUncheckedCreateWithoutUserInput = {
    id?: string
    leagueId: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LeagueMessageCreateOrConnectWithoutUserInput = {
    where: LeagueMessageWhereUniqueInput
    create: XOR<LeagueMessageCreateWithoutUserInput, LeagueMessageUncheckedCreateWithoutUserInput>
  }

  export type LeagueMessageCreateManyUserInputEnvelope = {
    data: LeagueMessageCreateManyUserInput | LeagueMessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PickUpsertWithWhereUniqueWithoutUserInput = {
    where: PickWhereUniqueInput
    update: XOR<PickUpdateWithoutUserInput, PickUncheckedUpdateWithoutUserInput>
    create: XOR<PickCreateWithoutUserInput, PickUncheckedCreateWithoutUserInput>
  }

  export type PickUpdateWithWhereUniqueWithoutUserInput = {
    where: PickWhereUniqueInput
    data: XOR<PickUpdateWithoutUserInput, PickUncheckedUpdateWithoutUserInput>
  }

  export type PickUpdateManyWithWhereWithoutUserInput = {
    where: PickScalarWhereInput
    data: XOR<PickUpdateManyMutationInput, PickUncheckedUpdateManyWithoutUserInput>
  }

  export type PickScalarWhereInput = {
    AND?: PickScalarWhereInput | PickScalarWhereInput[]
    OR?: PickScalarWhereInput[]
    NOT?: PickScalarWhereInput | PickScalarWhereInput[]
    id?: UuidFilter<"Pick"> | string
    userId?: UuidFilter<"Pick"> | string
    weekId?: UuidFilter<"Pick"> | string
    gameId?: UuidFilter<"Pick"> | string
    selectedTeamId?: UuidNullableFilter<"Pick"> | string | null
    isHomeTeamPick?: BoolNullableFilter<"Pick"> | boolean | null
    isCorrect?: BoolNullableFilter<"Pick"> | boolean | null
    pointsAwarded?: IntFilter<"Pick"> | number
    tiebreakerScore?: IntNullableFilter<"Pick"> | number | null
    tiebreakerDiff?: IntNullableFilter<"Pick"> | number | null
    submittedAt?: DateTimeFilter<"Pick"> | Date | string
    updatedAt?: DateTimeFilter<"Pick"> | Date | string
    lockedAt?: DateTimeNullableFilter<"Pick"> | Date | string | null
  }

  export type WeeklyResultUpsertWithWhereUniqueWithoutUserInput = {
    where: WeeklyResultWhereUniqueInput
    update: XOR<WeeklyResultUpdateWithoutUserInput, WeeklyResultUncheckedUpdateWithoutUserInput>
    create: XOR<WeeklyResultCreateWithoutUserInput, WeeklyResultUncheckedCreateWithoutUserInput>
  }

  export type WeeklyResultUpdateWithWhereUniqueWithoutUserInput = {
    where: WeeklyResultWhereUniqueInput
    data: XOR<WeeklyResultUpdateWithoutUserInput, WeeklyResultUncheckedUpdateWithoutUserInput>
  }

  export type WeeklyResultUpdateManyWithWhereWithoutUserInput = {
    where: WeeklyResultScalarWhereInput
    data: XOR<WeeklyResultUpdateManyMutationInput, WeeklyResultUncheckedUpdateManyWithoutUserInput>
  }

  export type WeeklyResultScalarWhereInput = {
    AND?: WeeklyResultScalarWhereInput | WeeklyResultScalarWhereInput[]
    OR?: WeeklyResultScalarWhereInput[]
    NOT?: WeeklyResultScalarWhereInput | WeeklyResultScalarWhereInput[]
    id?: UuidFilter<"WeeklyResult"> | string
    userId?: UuidFilter<"WeeklyResult"> | string
    weekId?: UuidFilter<"WeeklyResult"> | string
    correctPicks?: IntFilter<"WeeklyResult"> | number
    totalPicks?: IntFilter<"WeeklyResult"> | number
    points?: IntFilter<"WeeklyResult"> | number
    weeklyRank?: IntNullableFilter<"WeeklyResult"> | number | null
    tiebreakerUsed?: BoolFilter<"WeeklyResult"> | boolean
    accuracy?: FloatNullableFilter<"WeeklyResult"> | number | null
    streak?: IntFilter<"WeeklyResult"> | number
    createdAt?: DateTimeFilter<"WeeklyResult"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklyResult"> | Date | string
  }

  export type UserLeagueUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLeagueWhereUniqueInput
    update: XOR<UserLeagueUpdateWithoutUserInput, UserLeagueUncheckedUpdateWithoutUserInput>
    create: XOR<UserLeagueCreateWithoutUserInput, UserLeagueUncheckedCreateWithoutUserInput>
  }

  export type UserLeagueUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLeagueWhereUniqueInput
    data: XOR<UserLeagueUpdateWithoutUserInput, UserLeagueUncheckedUpdateWithoutUserInput>
  }

  export type UserLeagueUpdateManyWithWhereWithoutUserInput = {
    where: UserLeagueScalarWhereInput
    data: XOR<UserLeagueUpdateManyMutationInput, UserLeagueUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLeagueScalarWhereInput = {
    AND?: UserLeagueScalarWhereInput | UserLeagueScalarWhereInput[]
    OR?: UserLeagueScalarWhereInput[]
    NOT?: UserLeagueScalarWhereInput | UserLeagueScalarWhereInput[]
    id?: UuidFilter<"UserLeague"> | string
    userId?: UuidFilter<"UserLeague"> | string
    leagueId?: UuidFilter<"UserLeague"> | string
    role?: EnumLeagueRoleFilter<"UserLeague"> | $Enums.LeagueRole
    status?: EnumMemberStatusFilter<"UserLeague"> | $Enums.MemberStatus
    totalPoints?: IntFilter<"UserLeague"> | number
    totalCorrectPicks?: IntFilter<"UserLeague"> | number
    currentRank?: IntNullableFilter<"UserLeague"> | number | null
    joinedAt?: DateTimeFilter<"UserLeague"> | Date | string
    lastActiveAt?: DateTimeFilter<"UserLeague"> | Date | string
  }

  export type LeagueUpsertWithWhereUniqueWithoutCreatorInput = {
    where: LeagueWhereUniqueInput
    update: XOR<LeagueUpdateWithoutCreatorInput, LeagueUncheckedUpdateWithoutCreatorInput>
    create: XOR<LeagueCreateWithoutCreatorInput, LeagueUncheckedCreateWithoutCreatorInput>
  }

  export type LeagueUpdateWithWhereUniqueWithoutCreatorInput = {
    where: LeagueWhereUniqueInput
    data: XOR<LeagueUpdateWithoutCreatorInput, LeagueUncheckedUpdateWithoutCreatorInput>
  }

  export type LeagueUpdateManyWithWhereWithoutCreatorInput = {
    where: LeagueScalarWhereInput
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyWithoutCreatorInput>
  }

  export type LeagueScalarWhereInput = {
    AND?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    OR?: LeagueScalarWhereInput[]
    NOT?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    id?: UuidFilter<"League"> | string
    seasonId?: UuidFilter<"League"> | string
    name?: StringFilter<"League"> | string
    description?: StringNullableFilter<"League"> | string | null
    code?: StringFilter<"League"> | string
    isPrivate?: BoolFilter<"League"> | boolean
    maxMembers?: IntNullableFilter<"League"> | number | null
    allowLateJoin?: BoolFilter<"League"> | boolean
    scoringSystem?: EnumScoringSystemFilter<"League"> | $Enums.ScoringSystem
    createdById?: UuidFilter<"League"> | string
    createdAt?: DateTimeFilter<"League"> | Date | string
    updatedAt?: DateTimeFilter<"League"> | Date | string
    deletedAt?: DateTimeNullableFilter<"League"> | Date | string | null
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutUserInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAchievementScalarWhereInput = {
    AND?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    OR?: UserAchievementScalarWhereInput[]
    NOT?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    id?: UuidFilter<"UserAchievement"> | string
    userId?: UuidFilter<"UserAchievement"> | string
    achievementId?: UuidFilter<"UserAchievement"> | string
    unlockedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    progress?: IntFilter<"UserAchievement"> | number
    metadata?: JsonNullableFilter<"UserAchievement">
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    id?: UuidFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: UuidFilter<"RefreshToken"> | string
    family?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"RefreshToken"> | Date | string | null
    ipAddress?: StringNullableFilter<"RefreshToken"> | string | null
    userAgent?: StringNullableFilter<"RefreshToken"> | string | null
  }

  export type LoginAttemptUpsertWithWhereUniqueWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    update: XOR<LoginAttemptUpdateWithoutUserInput, LoginAttemptUncheckedUpdateWithoutUserInput>
    create: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput>
  }

  export type LoginAttemptUpdateWithWhereUniqueWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    data: XOR<LoginAttemptUpdateWithoutUserInput, LoginAttemptUncheckedUpdateWithoutUserInput>
  }

  export type LoginAttemptUpdateManyWithWhereWithoutUserInput = {
    where: LoginAttemptScalarWhereInput
    data: XOR<LoginAttemptUpdateManyMutationInput, LoginAttemptUncheckedUpdateManyWithoutUserInput>
  }

  export type LoginAttemptScalarWhereInput = {
    AND?: LoginAttemptScalarWhereInput | LoginAttemptScalarWhereInput[]
    OR?: LoginAttemptScalarWhereInput[]
    NOT?: LoginAttemptScalarWhereInput | LoginAttemptScalarWhereInput[]
    id?: UuidFilter<"LoginAttempt"> | string
    userId?: UuidNullableFilter<"LoginAttempt"> | string | null
    identifier?: StringFilter<"LoginAttempt"> | string
    ipAddress?: StringFilter<"LoginAttempt"> | string
    userAgent?: StringNullableFilter<"LoginAttempt"> | string | null
    success?: BoolFilter<"LoginAttempt"> | boolean
    createdAt?: DateTimeFilter<"LoginAttempt"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: UuidFilter<"Notification"> | string
    userId?: UuidFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    metadata?: JsonNullableFilter<"Notification">
    priority?: EnumPriorityFilter<"Notification"> | $Enums.Priority
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: UuidFilter<"AuditLog"> | string
    userId?: UuidNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: UuidNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    requestId?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type LeagueMessageUpsertWithWhereUniqueWithoutUserInput = {
    where: LeagueMessageWhereUniqueInput
    update: XOR<LeagueMessageUpdateWithoutUserInput, LeagueMessageUncheckedUpdateWithoutUserInput>
    create: XOR<LeagueMessageCreateWithoutUserInput, LeagueMessageUncheckedCreateWithoutUserInput>
  }

  export type LeagueMessageUpdateWithWhereUniqueWithoutUserInput = {
    where: LeagueMessageWhereUniqueInput
    data: XOR<LeagueMessageUpdateWithoutUserInput, LeagueMessageUncheckedUpdateWithoutUserInput>
  }

  export type LeagueMessageUpdateManyWithWhereWithoutUserInput = {
    where: LeagueMessageScalarWhereInput
    data: XOR<LeagueMessageUpdateManyMutationInput, LeagueMessageUncheckedUpdateManyWithoutUserInput>
  }

  export type LeagueMessageScalarWhereInput = {
    AND?: LeagueMessageScalarWhereInput | LeagueMessageScalarWhereInput[]
    OR?: LeagueMessageScalarWhereInput[]
    NOT?: LeagueMessageScalarWhereInput | LeagueMessageScalarWhereInput[]
    id?: UuidFilter<"LeagueMessage"> | string
    leagueId?: UuidFilter<"LeagueMessage"> | string
    userId?: UuidFilter<"LeagueMessage"> | string
    message?: StringFilter<"LeagueMessage"> | string
    isAnnouncement?: BoolFilter<"LeagueMessage"> | boolean
    isPinned?: BoolFilter<"LeagueMessage"> | boolean
    createdAt?: DateTimeFilter<"LeagueMessage"> | Date | string
    editedAt?: DateTimeNullableFilter<"LeagueMessage"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"LeagueMessage"> | Date | string | null
  }

  export type UserCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
  }

  export type UserUpsertWithoutRefreshTokensInput = {
    update: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutLoginHistoryInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLoginHistoryInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLoginHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLoginHistoryInput, UserUncheckedCreateWithoutLoginHistoryInput>
  }

  export type UserUpsertWithoutLoginHistoryInput = {
    update: XOR<UserUpdateWithoutLoginHistoryInput, UserUncheckedUpdateWithoutLoginHistoryInput>
    create: XOR<UserCreateWithoutLoginHistoryInput, UserUncheckedCreateWithoutLoginHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLoginHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLoginHistoryInput, UserUncheckedUpdateWithoutLoginHistoryInput>
  }

  export type UserUpdateWithoutLoginHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLoginHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WeekCreateWithoutSeasonInput = {
    id?: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    games?: GameCreateNestedManyWithoutWeekInput
    picks?: PickCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutWeekInput
    tiebreakerGame?: GameCreateNestedOneWithoutTiebreakerForWeekInput
  }

  export type WeekUncheckedCreateWithoutSeasonInput = {
    id?: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    tiebreakerGameId?: string | null
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    games?: GameUncheckedCreateNestedManyWithoutWeekInput
    picks?: PickUncheckedCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekCreateOrConnectWithoutSeasonInput = {
    where: WeekWhereUniqueInput
    create: XOR<WeekCreateWithoutSeasonInput, WeekUncheckedCreateWithoutSeasonInput>
  }

  export type WeekCreateManySeasonInputEnvelope = {
    data: WeekCreateManySeasonInput | WeekCreateManySeasonInput[]
    skipDuplicates?: boolean
  }

  export type LeagueCreateWithoutSeasonInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    creator: UserCreateNestedOneWithoutCreatedLeaguesInput
    members?: UserLeagueCreateNestedManyWithoutLeagueInput
    messages?: LeagueMessageCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutSeasonInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    members?: UserLeagueUncheckedCreateNestedManyWithoutLeagueInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutSeasonInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutSeasonInput, LeagueUncheckedCreateWithoutSeasonInput>
  }

  export type LeagueCreateManySeasonInputEnvelope = {
    data: LeagueCreateManySeasonInput | LeagueCreateManySeasonInput[]
    skipDuplicates?: boolean
  }

  export type WeekUpsertWithWhereUniqueWithoutSeasonInput = {
    where: WeekWhereUniqueInput
    update: XOR<WeekUpdateWithoutSeasonInput, WeekUncheckedUpdateWithoutSeasonInput>
    create: XOR<WeekCreateWithoutSeasonInput, WeekUncheckedCreateWithoutSeasonInput>
  }

  export type WeekUpdateWithWhereUniqueWithoutSeasonInput = {
    where: WeekWhereUniqueInput
    data: XOR<WeekUpdateWithoutSeasonInput, WeekUncheckedUpdateWithoutSeasonInput>
  }

  export type WeekUpdateManyWithWhereWithoutSeasonInput = {
    where: WeekScalarWhereInput
    data: XOR<WeekUpdateManyMutationInput, WeekUncheckedUpdateManyWithoutSeasonInput>
  }

  export type WeekScalarWhereInput = {
    AND?: WeekScalarWhereInput | WeekScalarWhereInput[]
    OR?: WeekScalarWhereInput[]
    NOT?: WeekScalarWhereInput | WeekScalarWhereInput[]
    id?: UuidFilter<"Week"> | string
    seasonId?: UuidFilter<"Week"> | string
    weekNumber?: IntFilter<"Week"> | number
    weekType?: EnumWeekTypeFilter<"Week"> | $Enums.WeekType
    name?: StringNullableFilter<"Week"> | string | null
    startDate?: DateTimeFilter<"Week"> | Date | string
    endDate?: DateTimeFilter<"Week"> | Date | string
    pickDeadline?: DateTimeFilter<"Week"> | Date | string
    tiebreakerGameId?: UuidNullableFilter<"Week"> | string | null
    isActive?: BoolFilter<"Week"> | boolean
    isComplete?: BoolFilter<"Week"> | boolean
    isScored?: BoolFilter<"Week"> | boolean
    createdAt?: DateTimeFilter<"Week"> | Date | string
    updatedAt?: DateTimeFilter<"Week"> | Date | string
  }

  export type LeagueUpsertWithWhereUniqueWithoutSeasonInput = {
    where: LeagueWhereUniqueInput
    update: XOR<LeagueUpdateWithoutSeasonInput, LeagueUncheckedUpdateWithoutSeasonInput>
    create: XOR<LeagueCreateWithoutSeasonInput, LeagueUncheckedCreateWithoutSeasonInput>
  }

  export type LeagueUpdateWithWhereUniqueWithoutSeasonInput = {
    where: LeagueWhereUniqueInput
    data: XOR<LeagueUpdateWithoutSeasonInput, LeagueUncheckedUpdateWithoutSeasonInput>
  }

  export type LeagueUpdateManyWithWhereWithoutSeasonInput = {
    where: LeagueScalarWhereInput
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyWithoutSeasonInput>
  }

  export type SeasonCreateWithoutWeeksInput = {
    id?: string
    year: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: number
    playoffWeeks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    leagues?: LeagueCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutWeeksInput = {
    id?: string
    year: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: number
    playoffWeeks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    leagues?: LeagueUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutWeeksInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutWeeksInput, SeasonUncheckedCreateWithoutWeeksInput>
  }

  export type GameCreateWithoutWeekInput = {
    id?: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    homeTeam: TeamCreateNestedOneWithoutHomeGamesInput
    awayTeam: TeamCreateNestedOneWithoutAwayGamesInput
    picks?: PickCreateNestedManyWithoutGameInput
    tiebreakerForWeek?: WeekCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameUncheckedCreateWithoutWeekInput = {
    id?: string
    homeTeamId: string
    awayTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picks?: PickUncheckedCreateNestedManyWithoutGameInput
    tiebreakerForWeek?: WeekUncheckedCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameCreateOrConnectWithoutWeekInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutWeekInput, GameUncheckedCreateWithoutWeekInput>
  }

  export type GameCreateManyWeekInputEnvelope = {
    data: GameCreateManyWeekInput | GameCreateManyWeekInput[]
    skipDuplicates?: boolean
  }

  export type PickCreateWithoutWeekInput = {
    id?: string
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPicksInput
    game: GameCreateNestedOneWithoutPicksInput
    selectedTeam?: TeamCreateNestedOneWithoutPicksInput
  }

  export type PickUncheckedCreateWithoutWeekInput = {
    id?: string
    userId: string
    gameId: string
    selectedTeamId?: string | null
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type PickCreateOrConnectWithoutWeekInput = {
    where: PickWhereUniqueInput
    create: XOR<PickCreateWithoutWeekInput, PickUncheckedCreateWithoutWeekInput>
  }

  export type PickCreateManyWeekInputEnvelope = {
    data: PickCreateManyWeekInput | PickCreateManyWeekInput[]
    skipDuplicates?: boolean
  }

  export type WeeklyResultCreateWithoutWeekInput = {
    id?: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWeeklyResultsInput
  }

  export type WeeklyResultUncheckedCreateWithoutWeekInput = {
    id?: string
    userId: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyResultCreateOrConnectWithoutWeekInput = {
    where: WeeklyResultWhereUniqueInput
    create: XOR<WeeklyResultCreateWithoutWeekInput, WeeklyResultUncheckedCreateWithoutWeekInput>
  }

  export type WeeklyResultCreateManyWeekInputEnvelope = {
    data: WeeklyResultCreateManyWeekInput | WeeklyResultCreateManyWeekInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutTiebreakerForWeekInput = {
    id?: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutGamesInput
    homeTeam: TeamCreateNestedOneWithoutHomeGamesInput
    awayTeam: TeamCreateNestedOneWithoutAwayGamesInput
    picks?: PickCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutTiebreakerForWeekInput = {
    id?: string
    weekId: string
    homeTeamId: string
    awayTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picks?: PickUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutTiebreakerForWeekInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTiebreakerForWeekInput, GameUncheckedCreateWithoutTiebreakerForWeekInput>
  }

  export type SeasonUpsertWithoutWeeksInput = {
    update: XOR<SeasonUpdateWithoutWeeksInput, SeasonUncheckedUpdateWithoutWeeksInput>
    create: XOR<SeasonCreateWithoutWeeksInput, SeasonUncheckedCreateWithoutWeeksInput>
    where?: SeasonWhereInput
  }

  export type SeasonUpdateToOneWithWhereWithoutWeeksInput = {
    where?: SeasonWhereInput
    data: XOR<SeasonUpdateWithoutWeeksInput, SeasonUncheckedUpdateWithoutWeeksInput>
  }

  export type SeasonUpdateWithoutWeeksInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    weeksCount?: IntFieldUpdateOperationsInput | number
    playoffWeeks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutWeeksInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    weeksCount?: IntFieldUpdateOperationsInput | number
    playoffWeeks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leagues?: LeagueUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type GameUpsertWithWhereUniqueWithoutWeekInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutWeekInput, GameUncheckedUpdateWithoutWeekInput>
    create: XOR<GameCreateWithoutWeekInput, GameUncheckedCreateWithoutWeekInput>
  }

  export type GameUpdateWithWhereUniqueWithoutWeekInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutWeekInput, GameUncheckedUpdateWithoutWeekInput>
  }

  export type GameUpdateManyWithWhereWithoutWeekInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutWeekInput>
  }

  export type GameScalarWhereInput = {
    AND?: GameScalarWhereInput | GameScalarWhereInput[]
    OR?: GameScalarWhereInput[]
    NOT?: GameScalarWhereInput | GameScalarWhereInput[]
    id?: UuidFilter<"Game"> | string
    weekId?: UuidFilter<"Game"> | string
    homeTeamId?: UuidFilter<"Game"> | string
    awayTeamId?: UuidFilter<"Game"> | string
    kickoffTime?: DateTimeFilter<"Game"> | Date | string
    tvNetwork?: StringNullableFilter<"Game"> | string | null
    homeScore?: IntNullableFilter<"Game"> | number | null
    awayScore?: IntNullableFilter<"Game"> | number | null
    status?: EnumGameStatusFilter<"Game"> | $Enums.GameStatus
    quarter?: StringNullableFilter<"Game"> | string | null
    timeRemaining?: StringNullableFilter<"Game"> | string | null
    possession?: StringNullableFilter<"Game"> | string | null
    espnGameId?: StringNullableFilter<"Game"> | string | null
    cbsGameId?: StringNullableFilter<"Game"> | string | null
    foxGameId?: StringNullableFilter<"Game"> | string | null
    lastUpdatedFrom?: StringNullableFilter<"Game"> | string | null
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
  }

  export type PickUpsertWithWhereUniqueWithoutWeekInput = {
    where: PickWhereUniqueInput
    update: XOR<PickUpdateWithoutWeekInput, PickUncheckedUpdateWithoutWeekInput>
    create: XOR<PickCreateWithoutWeekInput, PickUncheckedCreateWithoutWeekInput>
  }

  export type PickUpdateWithWhereUniqueWithoutWeekInput = {
    where: PickWhereUniqueInput
    data: XOR<PickUpdateWithoutWeekInput, PickUncheckedUpdateWithoutWeekInput>
  }

  export type PickUpdateManyWithWhereWithoutWeekInput = {
    where: PickScalarWhereInput
    data: XOR<PickUpdateManyMutationInput, PickUncheckedUpdateManyWithoutWeekInput>
  }

  export type WeeklyResultUpsertWithWhereUniqueWithoutWeekInput = {
    where: WeeklyResultWhereUniqueInput
    update: XOR<WeeklyResultUpdateWithoutWeekInput, WeeklyResultUncheckedUpdateWithoutWeekInput>
    create: XOR<WeeklyResultCreateWithoutWeekInput, WeeklyResultUncheckedCreateWithoutWeekInput>
  }

  export type WeeklyResultUpdateWithWhereUniqueWithoutWeekInput = {
    where: WeeklyResultWhereUniqueInput
    data: XOR<WeeklyResultUpdateWithoutWeekInput, WeeklyResultUncheckedUpdateWithoutWeekInput>
  }

  export type WeeklyResultUpdateManyWithWhereWithoutWeekInput = {
    where: WeeklyResultScalarWhereInput
    data: XOR<WeeklyResultUpdateManyMutationInput, WeeklyResultUncheckedUpdateManyWithoutWeekInput>
  }

  export type GameUpsertWithoutTiebreakerForWeekInput = {
    update: XOR<GameUpdateWithoutTiebreakerForWeekInput, GameUncheckedUpdateWithoutTiebreakerForWeekInput>
    create: XOR<GameCreateWithoutTiebreakerForWeekInput, GameUncheckedCreateWithoutTiebreakerForWeekInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutTiebreakerForWeekInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutTiebreakerForWeekInput, GameUncheckedUpdateWithoutTiebreakerForWeekInput>
  }

  export type GameUpdateWithoutTiebreakerForWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutGamesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    picks?: PickUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutTiebreakerForWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    homeTeamId?: StringFieldUpdateOperationsInput | string
    awayTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PickUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateWithoutHomeTeamInput = {
    id?: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutGamesInput
    awayTeam: TeamCreateNestedOneWithoutAwayGamesInput
    picks?: PickCreateNestedManyWithoutGameInput
    tiebreakerForWeek?: WeekCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameUncheckedCreateWithoutHomeTeamInput = {
    id?: string
    weekId: string
    awayTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picks?: PickUncheckedCreateNestedManyWithoutGameInput
    tiebreakerForWeek?: WeekUncheckedCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameCreateOrConnectWithoutHomeTeamInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutHomeTeamInput, GameUncheckedCreateWithoutHomeTeamInput>
  }

  export type GameCreateManyHomeTeamInputEnvelope = {
    data: GameCreateManyHomeTeamInput | GameCreateManyHomeTeamInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutAwayTeamInput = {
    id?: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutGamesInput
    homeTeam: TeamCreateNestedOneWithoutHomeGamesInput
    picks?: PickCreateNestedManyWithoutGameInput
    tiebreakerForWeek?: WeekCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameUncheckedCreateWithoutAwayTeamInput = {
    id?: string
    weekId: string
    homeTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picks?: PickUncheckedCreateNestedManyWithoutGameInput
    tiebreakerForWeek?: WeekUncheckedCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameCreateOrConnectWithoutAwayTeamInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutAwayTeamInput, GameUncheckedCreateWithoutAwayTeamInput>
  }

  export type GameCreateManyAwayTeamInputEnvelope = {
    data: GameCreateManyAwayTeamInput | GameCreateManyAwayTeamInput[]
    skipDuplicates?: boolean
  }

  export type PickCreateWithoutSelectedTeamInput = {
    id?: string
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPicksInput
    week: WeekCreateNestedOneWithoutPicksInput
    game: GameCreateNestedOneWithoutPicksInput
  }

  export type PickUncheckedCreateWithoutSelectedTeamInput = {
    id?: string
    userId: string
    weekId: string
    gameId: string
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type PickCreateOrConnectWithoutSelectedTeamInput = {
    where: PickWhereUniqueInput
    create: XOR<PickCreateWithoutSelectedTeamInput, PickUncheckedCreateWithoutSelectedTeamInput>
  }

  export type PickCreateManySelectedTeamInputEnvelope = {
    data: PickCreateManySelectedTeamInput | PickCreateManySelectedTeamInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutHomeTeamInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutHomeTeamInput, GameUncheckedUpdateWithoutHomeTeamInput>
    create: XOR<GameCreateWithoutHomeTeamInput, GameUncheckedCreateWithoutHomeTeamInput>
  }

  export type GameUpdateWithWhereUniqueWithoutHomeTeamInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutHomeTeamInput, GameUncheckedUpdateWithoutHomeTeamInput>
  }

  export type GameUpdateManyWithWhereWithoutHomeTeamInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutHomeTeamInput>
  }

  export type GameUpsertWithWhereUniqueWithoutAwayTeamInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutAwayTeamInput, GameUncheckedUpdateWithoutAwayTeamInput>
    create: XOR<GameCreateWithoutAwayTeamInput, GameUncheckedCreateWithoutAwayTeamInput>
  }

  export type GameUpdateWithWhereUniqueWithoutAwayTeamInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutAwayTeamInput, GameUncheckedUpdateWithoutAwayTeamInput>
  }

  export type GameUpdateManyWithWhereWithoutAwayTeamInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutAwayTeamInput>
  }

  export type PickUpsertWithWhereUniqueWithoutSelectedTeamInput = {
    where: PickWhereUniqueInput
    update: XOR<PickUpdateWithoutSelectedTeamInput, PickUncheckedUpdateWithoutSelectedTeamInput>
    create: XOR<PickCreateWithoutSelectedTeamInput, PickUncheckedCreateWithoutSelectedTeamInput>
  }

  export type PickUpdateWithWhereUniqueWithoutSelectedTeamInput = {
    where: PickWhereUniqueInput
    data: XOR<PickUpdateWithoutSelectedTeamInput, PickUncheckedUpdateWithoutSelectedTeamInput>
  }

  export type PickUpdateManyWithWhereWithoutSelectedTeamInput = {
    where: PickScalarWhereInput
    data: XOR<PickUpdateManyMutationInput, PickUncheckedUpdateManyWithoutSelectedTeamInput>
  }

  export type WeekCreateWithoutGamesInput = {
    id?: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    season: SeasonCreateNestedOneWithoutWeeksInput
    picks?: PickCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutWeekInput
    tiebreakerGame?: GameCreateNestedOneWithoutTiebreakerForWeekInput
  }

  export type WeekUncheckedCreateWithoutGamesInput = {
    id?: string
    seasonId: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    tiebreakerGameId?: string | null
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    picks?: PickUncheckedCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekCreateOrConnectWithoutGamesInput = {
    where: WeekWhereUniqueInput
    create: XOR<WeekCreateWithoutGamesInput, WeekUncheckedCreateWithoutGamesInput>
  }

  export type TeamCreateWithoutHomeGamesInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    awayGames?: GameCreateNestedManyWithoutAwayTeamInput
    picks?: PickCreateNestedManyWithoutSelectedTeamInput
  }

  export type TeamUncheckedCreateWithoutHomeGamesInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    awayGames?: GameUncheckedCreateNestedManyWithoutAwayTeamInput
    picks?: PickUncheckedCreateNestedManyWithoutSelectedTeamInput
  }

  export type TeamCreateOrConnectWithoutHomeGamesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutHomeGamesInput, TeamUncheckedCreateWithoutHomeGamesInput>
  }

  export type TeamCreateWithoutAwayGamesInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    homeGames?: GameCreateNestedManyWithoutHomeTeamInput
    picks?: PickCreateNestedManyWithoutSelectedTeamInput
  }

  export type TeamUncheckedCreateWithoutAwayGamesInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    homeGames?: GameUncheckedCreateNestedManyWithoutHomeTeamInput
    picks?: PickUncheckedCreateNestedManyWithoutSelectedTeamInput
  }

  export type TeamCreateOrConnectWithoutAwayGamesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutAwayGamesInput, TeamUncheckedCreateWithoutAwayGamesInput>
  }

  export type PickCreateWithoutGameInput = {
    id?: string
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPicksInput
    week: WeekCreateNestedOneWithoutPicksInput
    selectedTeam?: TeamCreateNestedOneWithoutPicksInput
  }

  export type PickUncheckedCreateWithoutGameInput = {
    id?: string
    userId: string
    weekId: string
    selectedTeamId?: string | null
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type PickCreateOrConnectWithoutGameInput = {
    where: PickWhereUniqueInput
    create: XOR<PickCreateWithoutGameInput, PickUncheckedCreateWithoutGameInput>
  }

  export type PickCreateManyGameInputEnvelope = {
    data: PickCreateManyGameInput | PickCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type WeekCreateWithoutTiebreakerGameInput = {
    id?: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    season: SeasonCreateNestedOneWithoutWeeksInput
    games?: GameCreateNestedManyWithoutWeekInput
    picks?: PickCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutWeekInput
  }

  export type WeekUncheckedCreateWithoutTiebreakerGameInput = {
    id?: string
    seasonId: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    games?: GameUncheckedCreateNestedManyWithoutWeekInput
    picks?: PickUncheckedCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekCreateOrConnectWithoutTiebreakerGameInput = {
    where: WeekWhereUniqueInput
    create: XOR<WeekCreateWithoutTiebreakerGameInput, WeekUncheckedCreateWithoutTiebreakerGameInput>
  }

  export type WeekUpsertWithoutGamesInput = {
    update: XOR<WeekUpdateWithoutGamesInput, WeekUncheckedUpdateWithoutGamesInput>
    create: XOR<WeekCreateWithoutGamesInput, WeekUncheckedCreateWithoutGamesInput>
    where?: WeekWhereInput
  }

  export type WeekUpdateToOneWithWhereWithoutGamesInput = {
    where?: WeekWhereInput
    data: XOR<WeekUpdateWithoutGamesInput, WeekUncheckedUpdateWithoutGamesInput>
  }

  export type WeekUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    season?: SeasonUpdateOneRequiredWithoutWeeksNestedInput
    picks?: PickUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutWeekNestedInput
    tiebreakerGame?: GameUpdateOneWithoutTiebreakerForWeekNestedInput
  }

  export type WeekUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    tiebreakerGameId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PickUncheckedUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type TeamUpsertWithoutHomeGamesInput = {
    update: XOR<TeamUpdateWithoutHomeGamesInput, TeamUncheckedUpdateWithoutHomeGamesInput>
    create: XOR<TeamCreateWithoutHomeGamesInput, TeamUncheckedCreateWithoutHomeGamesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutHomeGamesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutHomeGamesInput, TeamUncheckedUpdateWithoutHomeGamesInput>
  }

  export type TeamUpdateWithoutHomeGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    awayGames?: GameUpdateManyWithoutAwayTeamNestedInput
    picks?: PickUpdateManyWithoutSelectedTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutHomeGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    awayGames?: GameUncheckedUpdateManyWithoutAwayTeamNestedInput
    picks?: PickUncheckedUpdateManyWithoutSelectedTeamNestedInput
  }

  export type TeamUpsertWithoutAwayGamesInput = {
    update: XOR<TeamUpdateWithoutAwayGamesInput, TeamUncheckedUpdateWithoutAwayGamesInput>
    create: XOR<TeamCreateWithoutAwayGamesInput, TeamUncheckedCreateWithoutAwayGamesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutAwayGamesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutAwayGamesInput, TeamUncheckedUpdateWithoutAwayGamesInput>
  }

  export type TeamUpdateWithoutAwayGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeGames?: GameUpdateManyWithoutHomeTeamNestedInput
    picks?: PickUpdateManyWithoutSelectedTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutAwayGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeGames?: GameUncheckedUpdateManyWithoutHomeTeamNestedInput
    picks?: PickUncheckedUpdateManyWithoutSelectedTeamNestedInput
  }

  export type PickUpsertWithWhereUniqueWithoutGameInput = {
    where: PickWhereUniqueInput
    update: XOR<PickUpdateWithoutGameInput, PickUncheckedUpdateWithoutGameInput>
    create: XOR<PickCreateWithoutGameInput, PickUncheckedCreateWithoutGameInput>
  }

  export type PickUpdateWithWhereUniqueWithoutGameInput = {
    where: PickWhereUniqueInput
    data: XOR<PickUpdateWithoutGameInput, PickUncheckedUpdateWithoutGameInput>
  }

  export type PickUpdateManyWithWhereWithoutGameInput = {
    where: PickScalarWhereInput
    data: XOR<PickUpdateManyMutationInput, PickUncheckedUpdateManyWithoutGameInput>
  }

  export type WeekUpsertWithoutTiebreakerGameInput = {
    update: XOR<WeekUpdateWithoutTiebreakerGameInput, WeekUncheckedUpdateWithoutTiebreakerGameInput>
    create: XOR<WeekCreateWithoutTiebreakerGameInput, WeekUncheckedCreateWithoutTiebreakerGameInput>
    where?: WeekWhereInput
  }

  export type WeekUpdateToOneWithWhereWithoutTiebreakerGameInput = {
    where?: WeekWhereInput
    data: XOR<WeekUpdateWithoutTiebreakerGameInput, WeekUncheckedUpdateWithoutTiebreakerGameInput>
  }

  export type WeekUpdateWithoutTiebreakerGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    season?: SeasonUpdateOneRequiredWithoutWeeksNestedInput
    games?: GameUpdateManyWithoutWeekNestedInput
    picks?: PickUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutWeekNestedInput
  }

  export type WeekUncheckedUpdateWithoutTiebreakerGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUncheckedUpdateManyWithoutWeekNestedInput
    picks?: PickUncheckedUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type UserCreateWithoutPicksInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPicksInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPicksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPicksInput, UserUncheckedCreateWithoutPicksInput>
  }

  export type WeekCreateWithoutPicksInput = {
    id?: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    season: SeasonCreateNestedOneWithoutWeeksInput
    games?: GameCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutWeekInput
    tiebreakerGame?: GameCreateNestedOneWithoutTiebreakerForWeekInput
  }

  export type WeekUncheckedCreateWithoutPicksInput = {
    id?: string
    seasonId: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    tiebreakerGameId?: string | null
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    games?: GameUncheckedCreateNestedManyWithoutWeekInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekCreateOrConnectWithoutPicksInput = {
    where: WeekWhereUniqueInput
    create: XOR<WeekCreateWithoutPicksInput, WeekUncheckedCreateWithoutPicksInput>
  }

  export type GameCreateWithoutPicksInput = {
    id?: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    week: WeekCreateNestedOneWithoutGamesInput
    homeTeam: TeamCreateNestedOneWithoutHomeGamesInput
    awayTeam: TeamCreateNestedOneWithoutAwayGamesInput
    tiebreakerForWeek?: WeekCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameUncheckedCreateWithoutPicksInput = {
    id?: string
    weekId: string
    homeTeamId: string
    awayTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tiebreakerForWeek?: WeekUncheckedCreateNestedOneWithoutTiebreakerGameInput
  }

  export type GameCreateOrConnectWithoutPicksInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutPicksInput, GameUncheckedCreateWithoutPicksInput>
  }

  export type TeamCreateWithoutPicksInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    homeGames?: GameCreateNestedManyWithoutHomeTeamInput
    awayGames?: GameCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamUncheckedCreateWithoutPicksInput = {
    id?: string
    abbreviation: string
    city: string
    name: string
    fullName: string
    conference: $Enums.Conference
    division: $Enums.Division
    logoUrl?: string | null
    primaryColor?: string | null
    secondaryColor?: string | null
    espnId?: string | null
    cbsId?: string | null
    foxId?: string | null
    currentWins?: number
    currentLosses?: number
    currentTies?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    homeGames?: GameUncheckedCreateNestedManyWithoutHomeTeamInput
    awayGames?: GameUncheckedCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamCreateOrConnectWithoutPicksInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPicksInput, TeamUncheckedCreateWithoutPicksInput>
  }

  export type UserUpsertWithoutPicksInput = {
    update: XOR<UserUpdateWithoutPicksInput, UserUncheckedUpdateWithoutPicksInput>
    create: XOR<UserCreateWithoutPicksInput, UserUncheckedCreateWithoutPicksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPicksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPicksInput, UserUncheckedUpdateWithoutPicksInput>
  }

  export type UserUpdateWithoutPicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WeekUpsertWithoutPicksInput = {
    update: XOR<WeekUpdateWithoutPicksInput, WeekUncheckedUpdateWithoutPicksInput>
    create: XOR<WeekCreateWithoutPicksInput, WeekUncheckedCreateWithoutPicksInput>
    where?: WeekWhereInput
  }

  export type WeekUpdateToOneWithWhereWithoutPicksInput = {
    where?: WeekWhereInput
    data: XOR<WeekUpdateWithoutPicksInput, WeekUncheckedUpdateWithoutPicksInput>
  }

  export type WeekUpdateWithoutPicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    season?: SeasonUpdateOneRequiredWithoutWeeksNestedInput
    games?: GameUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutWeekNestedInput
    tiebreakerGame?: GameUpdateOneWithoutTiebreakerForWeekNestedInput
  }

  export type WeekUncheckedUpdateWithoutPicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    tiebreakerGameId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUncheckedUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type GameUpsertWithoutPicksInput = {
    update: XOR<GameUpdateWithoutPicksInput, GameUncheckedUpdateWithoutPicksInput>
    create: XOR<GameCreateWithoutPicksInput, GameUncheckedCreateWithoutPicksInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutPicksInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutPicksInput, GameUncheckedUpdateWithoutPicksInput>
  }

  export type GameUpdateWithoutPicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutGamesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    tiebreakerForWeek?: WeekUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameUncheckedUpdateWithoutPicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    homeTeamId?: StringFieldUpdateOperationsInput | string
    awayTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tiebreakerForWeek?: WeekUncheckedUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type TeamUpsertWithoutPicksInput = {
    update: XOR<TeamUpdateWithoutPicksInput, TeamUncheckedUpdateWithoutPicksInput>
    create: XOR<TeamCreateWithoutPicksInput, TeamUncheckedCreateWithoutPicksInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPicksInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPicksInput, TeamUncheckedUpdateWithoutPicksInput>
  }

  export type TeamUpdateWithoutPicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeGames?: GameUpdateManyWithoutHomeTeamNestedInput
    awayGames?: GameUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPicksInput = {
    id?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    conference?: EnumConferenceFieldUpdateOperationsInput | $Enums.Conference
    division?: EnumDivisionFieldUpdateOperationsInput | $Enums.Division
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    espnId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsId?: NullableStringFieldUpdateOperationsInput | string | null
    foxId?: NullableStringFieldUpdateOperationsInput | string | null
    currentWins?: IntFieldUpdateOperationsInput | number
    currentLosses?: IntFieldUpdateOperationsInput | number
    currentTies?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeGames?: GameUncheckedUpdateManyWithoutHomeTeamNestedInput
    awayGames?: GameUncheckedUpdateManyWithoutAwayTeamNestedInput
  }

  export type UserCreateWithoutWeeklyResultsInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWeeklyResultsInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWeeklyResultsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWeeklyResultsInput, UserUncheckedCreateWithoutWeeklyResultsInput>
  }

  export type WeekCreateWithoutWeeklyResultsInput = {
    id?: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    season: SeasonCreateNestedOneWithoutWeeksInput
    games?: GameCreateNestedManyWithoutWeekInput
    picks?: PickCreateNestedManyWithoutWeekInput
    tiebreakerGame?: GameCreateNestedOneWithoutTiebreakerForWeekInput
  }

  export type WeekUncheckedCreateWithoutWeeklyResultsInput = {
    id?: string
    seasonId: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    tiebreakerGameId?: string | null
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    games?: GameUncheckedCreateNestedManyWithoutWeekInput
    picks?: PickUncheckedCreateNestedManyWithoutWeekInput
  }

  export type WeekCreateOrConnectWithoutWeeklyResultsInput = {
    where: WeekWhereUniqueInput
    create: XOR<WeekCreateWithoutWeeklyResultsInput, WeekUncheckedCreateWithoutWeeklyResultsInput>
  }

  export type UserUpsertWithoutWeeklyResultsInput = {
    update: XOR<UserUpdateWithoutWeeklyResultsInput, UserUncheckedUpdateWithoutWeeklyResultsInput>
    create: XOR<UserCreateWithoutWeeklyResultsInput, UserUncheckedCreateWithoutWeeklyResultsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWeeklyResultsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWeeklyResultsInput, UserUncheckedUpdateWithoutWeeklyResultsInput>
  }

  export type UserUpdateWithoutWeeklyResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWeeklyResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WeekUpsertWithoutWeeklyResultsInput = {
    update: XOR<WeekUpdateWithoutWeeklyResultsInput, WeekUncheckedUpdateWithoutWeeklyResultsInput>
    create: XOR<WeekCreateWithoutWeeklyResultsInput, WeekUncheckedCreateWithoutWeeklyResultsInput>
    where?: WeekWhereInput
  }

  export type WeekUpdateToOneWithWhereWithoutWeeklyResultsInput = {
    where?: WeekWhereInput
    data: XOR<WeekUpdateWithoutWeeklyResultsInput, WeekUncheckedUpdateWithoutWeeklyResultsInput>
  }

  export type WeekUpdateWithoutWeeklyResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    season?: SeasonUpdateOneRequiredWithoutWeeksNestedInput
    games?: GameUpdateManyWithoutWeekNestedInput
    picks?: PickUpdateManyWithoutWeekNestedInput
    tiebreakerGame?: GameUpdateOneWithoutTiebreakerForWeekNestedInput
  }

  export type WeekUncheckedUpdateWithoutWeeklyResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    tiebreakerGameId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUncheckedUpdateManyWithoutWeekNestedInput
    picks?: PickUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type SeasonCreateWithoutLeaguesInput = {
    id?: string
    year: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: number
    playoffWeeks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    weeks?: WeekCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutLeaguesInput = {
    id?: string
    year: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    isCurrent?: boolean
    weeksCount?: number
    playoffWeeks?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    weeks?: WeekUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutLeaguesInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutLeaguesInput, SeasonUncheckedCreateWithoutLeaguesInput>
  }

  export type UserCreateWithoutCreatedLeaguesInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedLeaguesInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedLeaguesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedLeaguesInput, UserUncheckedCreateWithoutCreatedLeaguesInput>
  }

  export type UserLeagueCreateWithoutLeagueInput = {
    id?: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
    user: UserCreateNestedOneWithoutUserLeaguesInput
  }

  export type UserLeagueUncheckedCreateWithoutLeagueInput = {
    id?: string
    userId: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
  }

  export type UserLeagueCreateOrConnectWithoutLeagueInput = {
    where: UserLeagueWhereUniqueInput
    create: XOR<UserLeagueCreateWithoutLeagueInput, UserLeagueUncheckedCreateWithoutLeagueInput>
  }

  export type UserLeagueCreateManyLeagueInputEnvelope = {
    data: UserLeagueCreateManyLeagueInput | UserLeagueCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type LeagueMessageCreateWithoutLeagueInput = {
    id?: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutMessagesInput
  }

  export type LeagueMessageUncheckedCreateWithoutLeagueInput = {
    id?: string
    userId: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LeagueMessageCreateOrConnectWithoutLeagueInput = {
    where: LeagueMessageWhereUniqueInput
    create: XOR<LeagueMessageCreateWithoutLeagueInput, LeagueMessageUncheckedCreateWithoutLeagueInput>
  }

  export type LeagueMessageCreateManyLeagueInputEnvelope = {
    data: LeagueMessageCreateManyLeagueInput | LeagueMessageCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type SeasonUpsertWithoutLeaguesInput = {
    update: XOR<SeasonUpdateWithoutLeaguesInput, SeasonUncheckedUpdateWithoutLeaguesInput>
    create: XOR<SeasonCreateWithoutLeaguesInput, SeasonUncheckedCreateWithoutLeaguesInput>
    where?: SeasonWhereInput
  }

  export type SeasonUpdateToOneWithWhereWithoutLeaguesInput = {
    where?: SeasonWhereInput
    data: XOR<SeasonUpdateWithoutLeaguesInput, SeasonUncheckedUpdateWithoutLeaguesInput>
  }

  export type SeasonUpdateWithoutLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    weeksCount?: IntFieldUpdateOperationsInput | number
    playoffWeeks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: WeekUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    weeksCount?: IntFieldUpdateOperationsInput | number
    playoffWeeks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weeks?: WeekUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type UserUpsertWithoutCreatedLeaguesInput = {
    update: XOR<UserUpdateWithoutCreatedLeaguesInput, UserUncheckedUpdateWithoutCreatedLeaguesInput>
    create: XOR<UserCreateWithoutCreatedLeaguesInput, UserUncheckedCreateWithoutCreatedLeaguesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedLeaguesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedLeaguesInput, UserUncheckedUpdateWithoutCreatedLeaguesInput>
  }

  export type UserUpdateWithoutCreatedLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserLeagueUpsertWithWhereUniqueWithoutLeagueInput = {
    where: UserLeagueWhereUniqueInput
    update: XOR<UserLeagueUpdateWithoutLeagueInput, UserLeagueUncheckedUpdateWithoutLeagueInput>
    create: XOR<UserLeagueCreateWithoutLeagueInput, UserLeagueUncheckedCreateWithoutLeagueInput>
  }

  export type UserLeagueUpdateWithWhereUniqueWithoutLeagueInput = {
    where: UserLeagueWhereUniqueInput
    data: XOR<UserLeagueUpdateWithoutLeagueInput, UserLeagueUncheckedUpdateWithoutLeagueInput>
  }

  export type UserLeagueUpdateManyWithWhereWithoutLeagueInput = {
    where: UserLeagueScalarWhereInput
    data: XOR<UserLeagueUpdateManyMutationInput, UserLeagueUncheckedUpdateManyWithoutLeagueInput>
  }

  export type LeagueMessageUpsertWithWhereUniqueWithoutLeagueInput = {
    where: LeagueMessageWhereUniqueInput
    update: XOR<LeagueMessageUpdateWithoutLeagueInput, LeagueMessageUncheckedUpdateWithoutLeagueInput>
    create: XOR<LeagueMessageCreateWithoutLeagueInput, LeagueMessageUncheckedCreateWithoutLeagueInput>
  }

  export type LeagueMessageUpdateWithWhereUniqueWithoutLeagueInput = {
    where: LeagueMessageWhereUniqueInput
    data: XOR<LeagueMessageUpdateWithoutLeagueInput, LeagueMessageUncheckedUpdateWithoutLeagueInput>
  }

  export type LeagueMessageUpdateManyWithWhereWithoutLeagueInput = {
    where: LeagueMessageScalarWhereInput
    data: XOR<LeagueMessageUpdateManyMutationInput, LeagueMessageUncheckedUpdateManyWithoutLeagueInput>
  }

  export type UserCreateWithoutUserLeaguesInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserLeaguesInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserLeaguesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserLeaguesInput, UserUncheckedCreateWithoutUserLeaguesInput>
  }

  export type LeagueCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    season: SeasonCreateNestedOneWithoutLeaguesInput
    creator: UserCreateNestedOneWithoutCreatedLeaguesInput
    messages?: LeagueMessageCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutMembersInput = {
    id?: string
    seasonId: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutMembersInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutMembersInput, LeagueUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutUserLeaguesInput = {
    update: XOR<UserUpdateWithoutUserLeaguesInput, UserUncheckedUpdateWithoutUserLeaguesInput>
    create: XOR<UserCreateWithoutUserLeaguesInput, UserUncheckedCreateWithoutUserLeaguesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserLeaguesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserLeaguesInput, UserUncheckedUpdateWithoutUserLeaguesInput>
  }

  export type UserUpdateWithoutUserLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LeagueUpsertWithoutMembersInput = {
    update: XOR<LeagueUpdateWithoutMembersInput, LeagueUncheckedUpdateWithoutMembersInput>
    create: XOR<LeagueCreateWithoutMembersInput, LeagueUncheckedCreateWithoutMembersInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutMembersInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutMembersInput, LeagueUncheckedUpdateWithoutMembersInput>
  }

  export type LeagueUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    season?: SeasonUpdateOneRequiredWithoutLeaguesNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedLeaguesNestedInput
    messages?: LeagueMessageUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messages?: LeagueMessageUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueCreateWithoutMessagesInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    season: SeasonCreateNestedOneWithoutLeaguesInput
    creator: UserCreateNestedOneWithoutCreatedLeaguesInput
    members?: UserLeagueCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutMessagesInput = {
    id?: string
    seasonId: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    members?: UserLeagueUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutMessagesInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutMessagesInput, LeagueUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutMessagesInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type LeagueUpsertWithoutMessagesInput = {
    update: XOR<LeagueUpdateWithoutMessagesInput, LeagueUncheckedUpdateWithoutMessagesInput>
    create: XOR<LeagueCreateWithoutMessagesInput, LeagueUncheckedCreateWithoutMessagesInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutMessagesInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutMessagesInput, LeagueUncheckedUpdateWithoutMessagesInput>
  }

  export type LeagueUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    season?: SeasonUpdateOneRequiredWithoutLeaguesNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedLeaguesNestedInput
    members?: UserLeagueUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: UserLeagueUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserAchievementCreateWithoutAchievementInput = {
    id?: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutAchievementsInput
  }

  export type UserAchievementUncheckedCreateWithoutAchievementInput = {
    id?: string
    userId: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementCreateOrConnectWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementCreateManyAchievementInputEnvelope = {
    data: UserAchievementCreateManyAchievementInput | UserAchievementCreateManyAchievementInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutAchievementInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutAchievementInput>
  }

  export type UserCreateWithoutAchievementsInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAchievementsInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAchievementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
  }

  export type AchievementCreateWithoutUsersInput = {
    id?: string
    name: string
    description: string
    category: $Enums.AchievementCategory
    iconUrl?: string | null
    badgeColor?: string | null
    points?: number
    rarity?: $Enums.Rarity
    criteria: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    isSecret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AchievementUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description: string
    category: $Enums.AchievementCategory
    iconUrl?: string | null
    badgeColor?: string | null
    points?: number
    rarity?: $Enums.Rarity
    criteria: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    isSecret?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AchievementCreateOrConnectWithoutUsersInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutUsersInput, AchievementUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutAchievementsInput = {
    update: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAchievementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type UserUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AchievementUpsertWithoutUsersInput = {
    update: XOR<AchievementUpdateWithoutUsersInput, AchievementUncheckedUpdateWithoutUsersInput>
    create: XOR<AchievementCreateWithoutUsersInput, AchievementUncheckedCreateWithoutUsersInput>
    where?: AchievementWhereInput
  }

  export type AchievementUpdateToOneWithWhereWithoutUsersInput = {
    where?: AchievementWhereInput
    data: XOR<AchievementUpdateWithoutUsersInput, AchievementUncheckedUpdateWithoutUsersInput>
  }

  export type AchievementUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    badgeColor?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    criteria?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AchievementUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumAchievementCategoryFieldUpdateOperationsInput | $Enums.AchievementCategory
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    badgeColor?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    criteria?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    messages?: LeagueMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    username: string
    password: string
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    isActive?: boolean
    emailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    lastLoginAt?: Date | string | null
    loginCount?: number
    loginAttempts?: number
    lockedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    picks?: PickUncheckedCreateNestedManyWithoutUserInput
    weeklyResults?: WeeklyResultUncheckedCreateNestedManyWithoutUserInput
    userLeagues?: UserLeagueUncheckedCreateNestedManyWithoutUserInput
    createdLeagues?: LeagueUncheckedCreateNestedManyWithoutCreatorInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    loginHistory?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    messages?: LeagueMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginCount?: IntFieldUpdateOperationsInput | number
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picks?: PickUncheckedUpdateManyWithoutUserNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutUserNestedInput
    userLeagues?: UserLeagueUncheckedUpdateManyWithoutUserNestedInput
    createdLeagues?: LeagueUncheckedUpdateManyWithoutCreatorNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    loginHistory?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PickCreateManyUserInput = {
    id?: string
    weekId: string
    gameId: string
    selectedTeamId?: string | null
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type WeeklyResultCreateManyUserInput = {
    id?: string
    weekId: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLeagueCreateManyUserInput = {
    id?: string
    leagueId: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
  }

  export type LeagueCreateManyCreatorInput = {
    id?: string
    seasonId: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserAchievementCreateManyUserInput = {
    id?: string
    achievementId: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefreshTokenCreateManyUserInput = {
    id?: string
    token: string
    family: string
    expiresAt: Date | string
    isRevoked?: boolean
    createdAt?: Date | string
    lastUsedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type LoginAttemptCreateManyUserInput = {
    id?: string
    identifier: string
    ipAddress: string
    userAgent?: string | null
    success?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    readAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: $Enums.Priority
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    requestId?: string | null
    createdAt?: Date | string
  }

  export type LeagueMessageCreateManyUserInput = {
    id?: string
    leagueId: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type PickUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    week?: WeekUpdateOneRequiredWithoutPicksNestedInput
    game?: GameUpdateOneRequiredWithoutPicksNestedInput
    selectedTeam?: TeamUpdateOneWithoutPicksNestedInput
  }

  export type PickUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    selectedTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PickUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    selectedTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WeeklyResultUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutWeeklyResultsNestedInput
  }

  export type WeeklyResultUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyResultUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeagueUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    league?: LeagueUpdateOneRequiredWithoutMembersNestedInput
  }

  export type UserLeagueUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeagueUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    season?: SeasonUpdateOneRequiredWithoutLeaguesNestedInput
    members?: UserLeagueUpdateManyWithoutLeagueNestedInput
    messages?: LeagueMessageUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: UserLeagueUncheckedUpdateManyWithoutLeagueNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    seasonId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserAchievementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    achievement?: AchievementUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    family?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    family?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    family?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoginAttemptUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginAttemptUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginAttemptUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueMessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    league?: LeagueUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type LeagueMessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeagueMessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WeekCreateManySeasonInput = {
    id?: string
    weekNumber: number
    weekType?: $Enums.WeekType
    name?: string | null
    startDate: Date | string
    endDate: Date | string
    pickDeadline: Date | string
    tiebreakerGameId?: string | null
    isActive?: boolean
    isComplete?: boolean
    isScored?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeagueCreateManySeasonInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isPrivate?: boolean
    maxMembers?: number | null
    allowLateJoin?: boolean
    scoringSystem?: $Enums.ScoringSystem
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type WeekUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUpdateManyWithoutWeekNestedInput
    picks?: PickUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUpdateManyWithoutWeekNestedInput
    tiebreakerGame?: GameUpdateOneWithoutTiebreakerForWeekNestedInput
  }

  export type WeekUncheckedUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    tiebreakerGameId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUncheckedUpdateManyWithoutWeekNestedInput
    picks?: PickUncheckedUpdateManyWithoutWeekNestedInput
    weeklyResults?: WeeklyResultUncheckedUpdateManyWithoutWeekNestedInput
  }

  export type WeekUncheckedUpdateManyWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekNumber?: IntFieldUpdateOperationsInput | number
    weekType?: EnumWeekTypeFieldUpdateOperationsInput | $Enums.WeekType
    name?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pickDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    tiebreakerGameId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    isScored?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creator?: UserUpdateOneRequiredWithoutCreatedLeaguesNestedInput
    members?: UserLeagueUpdateManyWithoutLeagueNestedInput
    messages?: LeagueMessageUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: UserLeagueUncheckedUpdateManyWithoutLeagueNestedInput
    messages?: LeagueMessageUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateManyWithoutSeasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    allowLateJoin?: BoolFieldUpdateOperationsInput | boolean
    scoringSystem?: EnumScoringSystemFieldUpdateOperationsInput | $Enums.ScoringSystem
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameCreateManyWeekInput = {
    id?: string
    homeTeamId: string
    awayTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PickCreateManyWeekInput = {
    id?: string
    userId: string
    gameId: string
    selectedTeamId?: string | null
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type WeeklyResultCreateManyWeekInput = {
    id?: string
    userId: string
    correctPicks?: number
    totalPicks?: number
    points?: number
    weeklyRank?: number | null
    tiebreakerUsed?: boolean
    accuracy?: number | null
    streak?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeTeam?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    picks?: PickUpdateManyWithoutGameNestedInput
    tiebreakerForWeek?: WeekUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameUncheckedUpdateWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    homeTeamId?: StringFieldUpdateOperationsInput | string
    awayTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PickUncheckedUpdateManyWithoutGameNestedInput
    tiebreakerForWeek?: WeekUncheckedUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    homeTeamId?: StringFieldUpdateOperationsInput | string
    awayTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PickUpdateWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPicksNestedInput
    game?: GameUpdateOneRequiredWithoutPicksNestedInput
    selectedTeam?: TeamUpdateOneWithoutPicksNestedInput
  }

  export type PickUncheckedUpdateWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    selectedTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PickUncheckedUpdateManyWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    selectedTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WeeklyResultUpdateWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWeeklyResultsNestedInput
  }

  export type WeeklyResultUncheckedUpdateWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyResultUncheckedUpdateManyWithoutWeekInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    correctPicks?: IntFieldUpdateOperationsInput | number
    totalPicks?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    weeklyRank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerUsed?: BoolFieldUpdateOperationsInput | boolean
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    streak?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateManyHomeTeamInput = {
    id?: string
    weekId: string
    awayTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateManyAwayTeamInput = {
    id?: string
    weekId: string
    homeTeamId: string
    kickoffTime: Date | string
    tvNetwork?: string | null
    homeScore?: number | null
    awayScore?: number | null
    status?: $Enums.GameStatus
    quarter?: string | null
    timeRemaining?: string | null
    possession?: string | null
    espnGameId?: string | null
    cbsGameId?: string | null
    foxGameId?: string | null
    lastUpdatedFrom?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PickCreateManySelectedTeamInput = {
    id?: string
    userId: string
    weekId: string
    gameId: string
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type GameUpdateWithoutHomeTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutGamesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    picks?: PickUpdateManyWithoutGameNestedInput
    tiebreakerForWeek?: WeekUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameUncheckedUpdateWithoutHomeTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    awayTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PickUncheckedUpdateManyWithoutGameNestedInput
    tiebreakerForWeek?: WeekUncheckedUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutHomeTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    awayTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutAwayTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    week?: WeekUpdateOneRequiredWithoutGamesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    picks?: PickUpdateManyWithoutGameNestedInput
    tiebreakerForWeek?: WeekUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameUncheckedUpdateWithoutAwayTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    homeTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picks?: PickUncheckedUpdateManyWithoutGameNestedInput
    tiebreakerForWeek?: WeekUncheckedUpdateOneWithoutTiebreakerGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutAwayTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    homeTeamId?: StringFieldUpdateOperationsInput | string
    kickoffTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tvNetwork?: NullableStringFieldUpdateOperationsInput | string | null
    homeScore?: NullableIntFieldUpdateOperationsInput | number | null
    awayScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    quarter?: NullableStringFieldUpdateOperationsInput | string | null
    timeRemaining?: NullableStringFieldUpdateOperationsInput | string | null
    possession?: NullableStringFieldUpdateOperationsInput | string | null
    espnGameId?: NullableStringFieldUpdateOperationsInput | string | null
    cbsGameId?: NullableStringFieldUpdateOperationsInput | string | null
    foxGameId?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PickUpdateWithoutSelectedTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPicksNestedInput
    week?: WeekUpdateOneRequiredWithoutPicksNestedInput
    game?: GameUpdateOneRequiredWithoutPicksNestedInput
  }

  export type PickUncheckedUpdateWithoutSelectedTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PickUncheckedUpdateManyWithoutSelectedTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PickCreateManyGameInput = {
    id?: string
    userId: string
    weekId: string
    selectedTeamId?: string | null
    isHomeTeamPick?: boolean | null
    isCorrect?: boolean | null
    pointsAwarded?: number
    tiebreakerScore?: number | null
    tiebreakerDiff?: number | null
    submittedAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type PickUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPicksNestedInput
    week?: WeekUpdateOneRequiredWithoutPicksNestedInput
    selectedTeam?: TeamUpdateOneWithoutPicksNestedInput
  }

  export type PickUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    selectedTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PickUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekId?: StringFieldUpdateOperationsInput | string
    selectedTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    isHomeTeamPick?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pointsAwarded?: IntFieldUpdateOperationsInput | number
    tiebreakerScore?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreakerDiff?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserLeagueCreateManyLeagueInput = {
    id?: string
    userId: string
    role?: $Enums.LeagueRole
    status?: $Enums.MemberStatus
    totalPoints?: number
    totalCorrectPicks?: number
    currentRank?: number | null
    joinedAt?: Date | string
    lastActiveAt?: Date | string
  }

  export type LeagueMessageCreateManyLeagueInput = {
    id?: string
    userId: string
    message: string
    isAnnouncement?: boolean
    isPinned?: boolean
    createdAt?: Date | string
    editedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type UserLeagueUpdateWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserLeaguesNestedInput
  }

  export type UserLeagueUncheckedUpdateWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeagueUncheckedUpdateManyWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumLeagueRoleFieldUpdateOperationsInput | $Enums.LeagueRole
    status?: EnumMemberStatusFieldUpdateOperationsInput | $Enums.MemberStatus
    totalPoints?: IntFieldUpdateOperationsInput | number
    totalCorrectPicks?: IntFieldUpdateOperationsInput | number
    currentRank?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeagueMessageUpdateWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type LeagueMessageUncheckedUpdateWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeagueMessageUncheckedUpdateManyWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isAnnouncement?: BoolFieldUpdateOperationsInput | boolean
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserAchievementCreateManyAchievementInput = {
    id?: string
    userId: string
    unlockedAt?: Date | string
    progress?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    unlockedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonCountOutputTypeDefaultArgs instead
     */
    export type SeasonCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeekCountOutputTypeDefaultArgs instead
     */
    export type WeekCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeekCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameCountOutputTypeDefaultArgs instead
     */
    export type GameCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeagueCountOutputTypeDefaultArgs instead
     */
    export type LeagueCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeagueCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchievementCountOutputTypeDefaultArgs instead
     */
    export type AchievementCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchievementCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefreshTokenDefaultArgs instead
     */
    export type RefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefreshTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoginAttemptDefaultArgs instead
     */
    export type LoginAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoginAttemptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonDefaultArgs instead
     */
    export type SeasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeekDefaultArgs instead
     */
    export type WeekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeekDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameDefaultArgs instead
     */
    export type GameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PickDefaultArgs instead
     */
    export type PickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PickDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeeklyResultDefaultArgs instead
     */
    export type WeeklyResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeeklyResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeagueDefaultArgs instead
     */
    export type LeagueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeagueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserLeagueDefaultArgs instead
     */
    export type UserLeagueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserLeagueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeagueMessageDefaultArgs instead
     */
    export type LeagueMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeagueMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchievementDefaultArgs instead
     */
    export type AchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchievementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserAchievementDefaultArgs instead
     */
    export type UserAchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserAchievementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RssFeedLogDefaultArgs instead
     */
    export type RssFeedLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RssFeedLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}