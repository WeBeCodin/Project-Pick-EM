generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, uuid_ossp(map: "uuid-ossp")]
}

model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  username        String            @unique @db.VarChar(50)
  password        String            @db.VarChar(255)
  displayName     String?           @db.VarChar(100)
  avatarUrl       String?           @db.VarChar(500)
  bio             String?
  isActive        Boolean           @default(true)
  emailVerified   Boolean           @default(false)
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  loginCount      Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  lockedAt        DateTime?
  loginAttempts   Int               @default(0)
  auditLogs       AuditLog[]
  messages        LeagueMessage[]
  createdLeagues  League[]          @relation("LeagueCreator")
  loginHistory    LoginAttempt[]
  notifications   Notification[]
  picks           Pick[]
  refreshTokens   RefreshToken[]
  achievements    UserAchievement[]
  userLeagues     UserLeague[]
  weeklyResults   WeeklyResult[]

  @@index([email])
  @@index([username])
  @@index([isActive, emailVerified])
  @@map("users")
}

model RefreshToken {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String    @unique @db.VarChar(500)
  userId     String    @db.Uuid
  family     String    @db.VarChar(100)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  ipAddress  String?   @db.VarChar(45)
  userAgent  String?
  isRevoked  Boolean   @default(false)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([family])
  @@index([expiresAt])
  @@index([isRevoked])
  @@map("refresh_tokens")
}

model LoginAttempt {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String?  @db.Uuid
  identifier String   @db.VarChar(255)
  ipAddress  String   @db.VarChar(45)
  userAgent  String?
  success    Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([identifier])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("login_attempts")
}

model Season {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year         Int      @unique
  startDate    DateTime @db.Date
  endDate      DateTime @db.Date
  isActive     Boolean  @default(false)
  isCurrent    Boolean  @default(false)
  weeksCount   Int      @default(18)
  playoffWeeks Int      @default(4)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  leagues      League[]
  weeks        Week[]

  @@index([year])
  @@index([isActive])
  @@index([isCurrent])
  @@map("seasons")
}

model Week {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  seasonId         String         @db.Uuid
  weekNumber       Int
  weekType         WeekType       @default(REGULAR)
  name             String?        @db.VarChar(100)
  startDate        DateTime       @db.Date
  endDate          DateTime       @db.Date
  pickDeadline     DateTime
  tiebreakerGameId String?        @unique @db.Uuid
  isActive         Boolean        @default(false)
  isComplete       Boolean        @default(false)
  isScored         Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  games            Game[]
  picks            Pick[]
  weeklyResults    WeeklyResult[]
  season           Season         @relation(fields: [seasonId], references: [id])
  tiebreakerGame   Game?          @relation("TiebreakerGame", fields: [tiebreakerGameId], references: [id])

  @@unique([seasonId, weekNumber])
  @@index([seasonId])
  @@index([isActive])
  @@index([pickDeadline])
  @@map("weeks")
}

model Team {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  abbreviation   String     @unique @db.VarChar(5)
  city           String     @db.VarChar(50)
  name           String     @db.VarChar(50)
  fullName       String     @db.VarChar(100)
  conference     Conference
  division       Division
  logoUrl        String?    @db.VarChar(500)
  primaryColor   String?    @db.VarChar(7)
  secondaryColor String?    @db.VarChar(7)
  espnId         String?    @db.VarChar(50)
  cbsId          String?    @db.VarChar(50)
  foxId          String?    @db.VarChar(50)
  currentWins    Int        @default(0)
  currentLosses  Int        @default(0)
  currentTies    Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  awayGames      Game[]     @relation("AwayTeam")
  homeGames      Game[]     @relation("HomeTeam")
  picks          Pick[]

  @@index([abbreviation])
  @@index([conference, division])
  @@map("teams")
}

model Game {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weekId            String     @db.Uuid
  homeTeamId        String     @db.Uuid
  awayTeamId        String     @db.Uuid
  kickoffTime       DateTime
  tvNetwork         String?    @db.VarChar(50)
  homeScore         Int?
  awayScore         Int?
  status            GameStatus @default(SCHEDULED)
  quarter           String?    @db.VarChar(10)
  timeRemaining     String?    @db.VarChar(10)
  possession        String?    @db.VarChar(5)
  espnGameId        String?    @db.VarChar(100)
  cbsGameId         String?    @db.VarChar(100)
  foxGameId         String?    @db.VarChar(100)
  lastUpdatedFrom   String?    @db.VarChar(50)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  awayTeam          Team       @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam          Team       @relation("HomeTeam", fields: [homeTeamId], references: [id])
  week              Week       @relation(fields: [weekId], references: [id])
  picks             Pick[]
  tiebreakerForWeek Week?      @relation("TiebreakerGame")

  @@unique([weekId, espnGameId])
  @@unique([weekId, cbsGameId])
  @@unique([weekId, foxGameId])
  @@index([weekId])
  @@index([kickoffTime])
  @@index([status])
  @@map("games")
}

model Pick {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String    @db.Uuid
  weekId          String    @db.Uuid
  gameId          String    @db.Uuid
  selectedTeamId  String?   @db.Uuid
  isHomeTeamPick  Boolean?
  isCorrect       Boolean?
  pointsAwarded   Int       @default(0)
  tiebreakerScore Int?
  tiebreakerDiff  Int?
  submittedAt     DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lockedAt        DateTime?
  game            Game      @relation(fields: [gameId], references: [id])
  selectedTeam    Team?     @relation(fields: [selectedTeamId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  week            Week      @relation(fields: [weekId], references: [id])

  @@unique([userId, gameId])
  @@index([userId, weekId])
  @@index([gameId])
  @@index([isCorrect])
  @@map("picks")
}

model WeeklyResult {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @db.Uuid
  weekId         String   @db.Uuid
  correctPicks   Int      @default(0)
  totalPicks     Int      @default(0)
  points         Int      @default(0)
  weeklyRank     Int?
  tiebreakerUsed Boolean  @default(false)
  accuracy       Float?
  streak         Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  week           Week     @relation(fields: [weekId], references: [id])

  @@unique([userId, weekId])
  @@index([weekId, points])
  @@index([userId])
  @@map("weekly_results")
}

model League {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  seasonId      String          @db.Uuid
  name          String          @db.VarChar(100)
  description   String?
  code          String          @unique @db.VarChar(10)
  isPrivate     Boolean         @default(true)
  maxMembers    Int?
  allowLateJoin Boolean         @default(true)
  scoringSystem ScoringSystem   @default(STANDARD)
  createdById   String          @db.Uuid
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  messages      LeagueMessage[]
  creator       User            @relation("LeagueCreator", fields: [createdById], references: [id])
  season        Season          @relation(fields: [seasonId], references: [id])
  members       UserLeague[]

  @@index([code])
  @@index([seasonId])
  @@index([createdById])
  @@map("leagues")
}

model UserLeague {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String       @db.Uuid
  leagueId          String       @db.Uuid
  role              LeagueRole   @default(MEMBER)
  status            MemberStatus @default(ACTIVE)
  totalPoints       Int          @default(0)
  totalCorrectPicks Int          @default(0)
  currentRank       Int?
  joinedAt          DateTime     @default(now())
  lastActiveAt      DateTime     @default(now())
  league            League       @relation(fields: [leagueId], references: [id])
  user              User         @relation(fields: [userId], references: [id])

  @@unique([userId, leagueId])
  @@index([leagueId, totalPoints])
  @@index([userId])
  @@map("user_leagues")
}

model LeagueMessage {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leagueId       String    @db.Uuid
  userId         String    @db.Uuid
  message        String
  isAnnouncement Boolean   @default(false)
  isPinned       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  editedAt       DateTime?
  deletedAt      DateTime?
  league         League    @relation(fields: [leagueId], references: [id])
  user           User      @relation(fields: [userId], references: [id])

  @@index([leagueId, createdAt])
  @@index([userId])
  @@map("league_messages")
}

model Achievement {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String              @unique @db.VarChar(100)
  description String
  category    AchievementCategory
  iconUrl     String?             @db.VarChar(500)
  badgeColor  String?             @db.VarChar(7)
  points      Int                 @default(0)
  rarity      Rarity              @default(COMMON)
  criteria    Json
  isActive    Boolean             @default(true)
  isSecret    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  users       UserAchievement[]

  @@index([category])
  @@index([rarity])
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String      @db.Uuid
  achievementId String      @db.Uuid
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(100)
  metadata      Json?
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([unlockedAt])
  @@map("user_achievements")
}

model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String           @db.Uuid
  type      NotificationType
  title     String           @db.VarChar(200)
  message   String
  actionUrl String?          @db.VarChar(500)
  isRead    Boolean          @default(false)
  readAt    DateTime?
  metadata  Json?
  priority  Priority         @default(NORMAL)
  expiresAt DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([createdAt])
  @@index([type])
  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  action    String   @db.VarChar(100)
  entity    String   @db.VarChar(50)
  entityId  String?  @db.Uuid
  oldValues Json?
  newValues Json?
  ipAddress String?  @db.VarChar(45)
  userAgent String?
  requestId String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@index([action])
  @@map("audit_logs")
}

model RssFeedLog {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source           String    @db.VarChar(50)
  feedUrl          String    @db.VarChar(500)
  feedType         String    @db.VarChar(50)
  success          Boolean
  errorMessage     String?
  itemsProcessed   Int       @default(0)
  itemsUpdated     Int       @default(0)
  fetchStartedAt   DateTime
  fetchCompletedAt DateTime?
  duration         Int?
  responseStatus   Int?
  responseHeaders  Json?
  createdAt        DateTime  @default(now())

  @@index([source, createdAt])
  @@index([success])
  @@index([feedType])
  @@map("rss_feed_logs")
}

enum WeekType {
  PRESEASON
  REGULAR
  WILDCARD
  DIVISIONAL
  CONFERENCE
  SUPERBOWL
  PROBOWL
}

enum Conference {
  AFC
  NFC
}

enum Division {
  NORTH
  SOUTH
  EAST
  WEST
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  HALFTIME
  FINAL
  FINAL_OT
  POSTPONED
  CANCELLED
}

enum ScoringSystem {
  STANDARD
  CONFIDENCE
  SPREAD
}

enum LeagueRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum AchievementCategory {
  ACCURACY
  STREAK
  PARTICIPATION
  PERFECT
  MILESTONE
  SPECIAL
  SOCIAL
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum NotificationType {
  PICK_REMINDER
  ACHIEVEMENT_UNLOCKED
  LEAGUE_INVITE
  LEAGUE_MESSAGE
  WEEK_RESULTS
  GAME_UPDATE
  SYSTEM_ANNOUNCEMENT
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}
