From d86d78dd93e763a47750e465bb97fab44f0f8b49 Mon Sep 17 00:00:00 2001
From: WeBeCodin <93334652+WeBeCodin@users.noreply.github.com>
Date: Sat, 6 Sep 2025 00:17:37 +0000
Subject: [PATCH] Fix league system to use real user data and add invite links

- Replace hardcoded mock user IDs with real authenticated user data
- Update league creation, join, and member checking to use user.id and user.username
- Remove mock user contamination from standings generation
- Add invite link functionality alongside existing invite codes
- Create /leagues/join/[id] page for shareable league invitations
- Update API to support single league fetching for invite links
- Fix TypeScript compilation issues from parameter updates
---
 packages/frontend/app/api/leagues/route.ts    |  70 +++-
 .../app/api/leagues/standings/route.ts        |  96 ++---
 packages/frontend/app/leagues/[id]/page.tsx   |   8 +-
 .../frontend/app/leagues/join/[id]/page.tsx   | 335 ++++++++++++++++++
 packages/frontend/app/leagues/page.tsx        |  61 +++-
 5 files changed, 478 insertions(+), 92 deletions(-)
 create mode 100644 packages/frontend/app/leagues/join/[id]/page.tsx

diff --git a/packages/frontend/app/api/leagues/route.ts b/packages/frontend/app/api/leagues/route.ts
index 1d3bb3b..857911b 100644
--- a/packages/frontend/app/api/leagues/route.ts
+++ b/packages/frontend/app/api/leagues/route.ts
@@ -162,6 +162,30 @@ export async function GET(request: NextRequest) {
       });
     }
 
+    if (action === 'single') {
+      // Get specific league by ID
+      const leagueId = searchParams.get('leagueId');
+      if (!leagueId) {
+        return NextResponse.json({
+          success: false,
+          error: 'League ID is required',
+        }, { status: 400 });
+      }
+
+      const league = mockLeagues.find(l => l.id === leagueId);
+      if (!league) {
+        return NextResponse.json({
+          success: false,
+          error: 'League not found',
+        }, { status: 404 });
+      }
+
+      return NextResponse.json({
+        success: true,
+        data: league,
+      });
+    }
+
     // Get specific league by ID
     const leagueId = searchParams.get('id');
     if (leagueId) {
@@ -197,13 +221,13 @@ export async function GET(request: NextRequest) {
 export async function POST(request: NextRequest) {
   try {
     const body = await request.json();
-    const { name, description, settings, ownerId = 'user-1' } = body;
+    const { name, description, settings, ownerData } = body;
 
     // Validate required fields
-    if (!name || !description) {
+    if (!name || !description || !ownerData) {
       return NextResponse.json({
         success: false,
-        error: 'Name and description are required',
+        error: 'Name, description, and user data are required',
       }, { status: 400 });
     }
 
@@ -215,8 +239,8 @@ export async function POST(request: NextRequest) {
       id: `league-${Date.now()}`,
       name,
       description,
-      ownerId,
-      ownerName: 'Current User', // In real app, fetch from user service
+      ownerId: ownerData.userId,
+      ownerName: ownerData.username,
       settings: {
         maxMembers: settings?.maxMembers || 20,
         isPrivate: settings?.isPrivate || false,
@@ -227,8 +251,8 @@ export async function POST(request: NextRequest) {
       },
       members: [
         {
-          userId: ownerId,
-          username: 'currentuser',
+          userId: ownerData.userId,
+          username: ownerData.username,
           joinedAt: new Date().toISOString(),
           role: 'owner',
           status: 'active',
@@ -238,8 +262,8 @@ export async function POST(request: NextRequest) {
         totalMembers: 1,
         weeklyWinners: [],
         seasonLeader: {
-          userId: ownerId,
-          username: 'currentuser',
+          userId: ownerData.userId,
+          username: ownerData.username,
           totalScore: 0,
         },
       },
@@ -282,10 +306,17 @@ export async function PUT(request: NextRequest) {
 
     switch (action) {
       case 'join':
-        const { userId = 'user-1', username = 'newuser' } = data;
+        const { userData } = data;
+        
+        if (!userData || !userData.userId || !userData.username) {
+          return NextResponse.json({
+            success: false,
+            error: 'User data is required',
+          }, { status: 400 });
+        }
         
         // Check if already a member
-        if (league.members.some(m => m.userId === userId)) {
+        if (league.members.some(m => m.userId === userData.userId)) {
           return NextResponse.json({
             success: false,
             error: 'Already a member of this league',
@@ -302,8 +333,8 @@ export async function PUT(request: NextRequest) {
 
         // Add member
         league.members.push({
-          userId,
-          username,
+          userId: userData.userId,
+          username: userData.username,
           joinedAt: new Date().toISOString(),
           role: 'member',
           status: league.settings.requireApproval ? 'pending' : 'active',
@@ -321,17 +352,24 @@ export async function PUT(request: NextRequest) {
         });
 
       case 'leave':
-        const { userId: leavingUserId = 'user-1' } = data;
+        const { userData: leavingUserData } = data;
+        
+        if (!leavingUserData || !leavingUserData.userId) {
+          return NextResponse.json({
+            success: false,
+            error: 'User data is required',
+          }, { status: 400 });
+        }
         
         // Don't allow owner to leave
-        if (league.ownerId === leavingUserId) {
+        if (league.ownerId === leavingUserData.userId) {
           return NextResponse.json({
             success: false,
             error: 'League owner cannot leave. Transfer ownership first.',
           }, { status: 400 });
         }
 
-        league.members = league.members.filter(m => m.userId !== leavingUserId);
+        league.members = league.members.filter(m => m.userId !== leavingUserData.userId);
         league.stats.totalMembers = league.members.filter(m => m.status === 'active').length;
         league.updatedAt = new Date().toISOString();
 
diff --git a/packages/frontend/app/api/leagues/standings/route.ts b/packages/frontend/app/api/leagues/standings/route.ts
index 835cbc9..277c2b6 100644
--- a/packages/frontend/app/api/leagues/standings/route.ts
+++ b/packages/frontend/app/api/leagues/standings/route.ts
@@ -23,62 +23,6 @@ interface LeagueStanding {
   trend: 'up' | 'down' | 'same';
 }
 
-// Mock standings data
-const generateMockStandings = (_leagueId: string): LeagueStanding[] => {
-  const baseStandings: LeagueStanding[] = [
-    {
-      userId: 'user-1',
-      username: 'johnsmith',
-      totalScore: 0,
-      weeklyScores: [],
-      stats: {
-        averageScore: 0,
-        bestWeek: 0,
-        worstWeek: 0,
-        consistency: 0,
-        currentStreak: 0,
-        longestStreak: 0,
-      },
-      rank: 1,
-      trend: 'same',
-    },
-    {
-      userId: 'user-2',
-      username: 'sarahjones',
-      totalScore: 0,
-      weeklyScores: [],
-      stats: {
-        averageScore: 0,
-        bestWeek: 0,
-        worstWeek: 0,
-        consistency: 0,
-        currentStreak: 0,
-        longestStreak: 0,
-      },
-      rank: 2,
-      trend: 'same',
-    },
-    {
-      userId: 'user-3',
-      username: 'mikebrown',
-      totalScore: 0,
-      weeklyScores: [],
-      stats: {
-        averageScore: 0,
-        bestWeek: 0,
-        worstWeek: 0,
-        consistency: 0,
-        currentStreak: 0,
-        longestStreak: 0,
-      },
-      rank: 3,
-      trend: 'same',
-    },
-  ];
-
-  return baseStandings;
-};
-
 export async function GET(request: NextRequest) {
   try {
     const { searchParams } = new URL(request.url);
@@ -92,16 +36,46 @@ export async function GET(request: NextRequest) {
       }, { status: 400 });
     }
 
-    const standings = generateMockStandings(leagueId);
+    // Get league members first
+    const leagueResponse = await fetch(`${request.nextUrl.origin}/api/leagues?id=${leagueId}`);
+    const leagueData = await leagueResponse.json();
+    
+    if (!leagueData.success) {
+      return NextResponse.json({
+        success: false,
+        error: 'League not found',
+      }, { status: 404 });
+    }
+
+    const league = leagueData.data;
+    const activeMembers = league.members.filter((member: any) => member.status === 'active');
+
+    // Generate standings only for actual league members
+    const standings = activeMembers.map((member: any, index: number): LeagueStanding => ({
+      userId: member.userId,
+      username: member.username,
+      totalScore: 0, // Will be calculated from actual picks in real implementation
+      weeklyScores: [],
+      stats: {
+        averageScore: 0,
+        bestWeek: 0,
+        worstWeek: 0,
+        consistency: 0,
+        currentStreak: 0,
+        longestStreak: 0,
+      },
+      rank: index + 1,
+      trend: 'same' as const,
+    }));
 
     if (week) {
       // Return standings for specific week
       const weekNum = parseInt(week);
-      const weeklyStandings = standings.map(standing => ({
+      const weeklyStandings = standings.map((standing: LeagueStanding) => ({
         ...standing,
-        score: standing.weeklyScores.find(w => w.week === weekNum)?.score || 0,
-        correctPicks: standing.weeklyScores.find(w => w.week === weekNum)?.correctPicks || 0,
-        totalPicks: standing.weeklyScores.find(w => w.week === weekNum)?.totalPicks || 0,
+        score: standing.weeklyScores.find((w: any) => w.week === weekNum)?.score || 0,
+        correctPicks: standing.weeklyScores.find((w: any) => w.week === weekNum)?.correctPicks || 0,
+        totalPicks: standing.weeklyScores.find((w: any) => w.week === weekNum)?.totalPicks || 0,
       }));
 
       return NextResponse.json({
diff --git a/packages/frontend/app/leagues/[id]/page.tsx b/packages/frontend/app/leagues/[id]/page.tsx
index ca12566..ab9df73 100644
--- a/packages/frontend/app/leagues/[id]/page.tsx
+++ b/packages/frontend/app/leagues/[id]/page.tsx
@@ -82,7 +82,7 @@ interface LeagueStanding {
 }
 
 export default function LeagueDetailPage() {
-  const { isAuthenticated, isLoading } = useAuth();
+  const { isAuthenticated, isLoading, user } = useAuth();
   const router = useRouter();
   const params = useParams();
   const leagueId = params.id as string;
@@ -210,7 +210,7 @@ export default function LeagueDetailPage() {
     );
   }
 
-  const isOwner = league.ownerId === 'user-1';
+  const isOwner = league.ownerId === (user?.id || 'anonymous');
 
   return (
     <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
@@ -399,7 +399,7 @@ export default function LeagueDetailPage() {
                         <div className="flex items-center">
                           <div className="text-sm font-medium text-gray-900 dark:text-white">
                             {standing.username}
-                            {standing.userId === 'user-1' && (
+                            {standing.userId === (user?.id || 'anonymous') && (
                               <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                                 You
                               </span>
@@ -455,7 +455,7 @@ export default function LeagueDetailPage() {
                       <div>
                         <div className="text-sm font-medium text-gray-900 dark:text-white">
                           {member.username}
-                          {member.userId === 'user-1' && (
+                          {member.userId === (user?.id || 'anonymous') && (
                             <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                               You
                             </span>
diff --git a/packages/frontend/app/leagues/join/[id]/page.tsx b/packages/frontend/app/leagues/join/[id]/page.tsx
new file mode 100644
index 0000000..2ebbcb3
--- /dev/null
+++ b/packages/frontend/app/leagues/join/[id]/page.tsx
@@ -0,0 +1,335 @@
+'use client';
+
+import React, { useState, useEffect } from 'react';
+import { useAuth } from '@/contexts/auth-context';
+import { Button } from '@/components/ui/button';
+import { 
+  Users, 
+  Lock,
+  Globe,
+  UserPlus,
+  ArrowLeft,
+  Check,
+  AlertCircle
+} from 'lucide-react';
+import { useRouter, useParams } from 'next/navigation';
+
+interface League {
+  id: string;
+  name: string;
+  description: string;
+  ownerId: string;
+  ownerName: string;
+  settings: {
+    maxMembers: number;
+    isPrivate: boolean;
+    requireApproval: boolean;
+    scoringSystem: 'standard' | 'confidence' | 'spread';
+    weeklyPayout: boolean;
+    seasonPayout: boolean;
+  };
+  stats: {
+    totalMembers: number;
+    activeMembers: number;
+  };
+  inviteCode: string;
+  createdAt: string;
+}
+
+export default function JoinLeaguePage() {
+  const { isAuthenticated, isLoading, user } = useAuth();
+  const router = useRouter();
+  const params = useParams();
+  const leagueId = params.id as string;
+  
+  const [league, setLeague] = useState<League | null>(null);
+  const [loading, setLoading] = useState(true);
+  const [joining, setJoining] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [success, setSuccess] = useState(false);
+
+  useEffect(() => {
+    if (!isLoading && !isAuthenticated) {
+      router.push('/login');
+    }
+  }, [isAuthenticated, isLoading, router]);
+
+  useEffect(() => {
+    if (isAuthenticated && leagueId) {
+      loadLeague();
+    }
+  }, [isAuthenticated, leagueId]);
+
+  const loadLeague = async () => {
+    try {
+      setLoading(true);
+      setError(null);
+      
+      const response = await fetch(`/api/leagues?action=single&leagueId=${leagueId}`);
+      const data = await response.json();
+      
+      if (data.success) {
+        setLeague(data.data);
+      } else {
+        setError(data.error || 'League not found');
+      }
+    } catch (err) {
+      setError('Failed to load league information');
+      console.error('Error loading league:', err);
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  const handleJoinLeague = async () => {
+    if (!league || !user) return;
+    
+    try {
+      setJoining(true);
+      setError(null);
+      
+      const response = await fetch('/api/leagues', {
+        method: 'PUT',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({
+          leagueId: league.id,
+          action: 'join',
+          userData: {
+            userId: user.id,
+            username: user.username,
+          },
+        }),
+      });
+
+      const data = await response.json();
+      
+      if (data.success) {
+        setSuccess(true);
+        setTimeout(() => {
+          router.push(`/leagues/${league.id}`);
+        }, 2000);
+      } else {
+        setError(data.error || 'Failed to join league');
+      }
+    } catch (err) {
+      setError('Failed to join league');
+      console.error('Error joining league:', err);
+    } finally {
+      setJoining(false);
+    }
+  };
+
+  const getScoringSystemLabel = (system: string) => {
+    switch (system) {
+      case 'confidence': return 'Confidence Points';
+      case 'standard': return 'Standard';
+      case 'spread': return 'Against Spread';
+      default: return system;
+    }
+  };
+
+  if (isLoading || loading) {
+    return (
+      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
+        <div className="max-w-2xl mx-auto px-4 py-8">
+          <div className="animate-pulse">
+            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
+              <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded mb-4"></div>
+              <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
+              <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-4 w-2/3"></div>
+              <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+
+  if (error && !league) {
+    return (
+      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
+        <div className="max-w-2xl mx-auto px-4 py-8">
+          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
+            <div className="text-center">
+              <AlertCircle className="mx-auto h-12 w-12 text-red-500 mb-4" />
+              <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
+                League Not Found
+              </h2>
+              <p className="text-gray-600 dark:text-gray-400 mb-6">
+                {error}
+              </p>
+              <Button onClick={() => router.push('/leagues')}>
+                <ArrowLeft className="h-4 w-4 mr-2" />
+                Back to Leagues
+              </Button>
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+
+  if (success) {
+    return (
+      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
+        <div className="max-w-2xl mx-auto px-4 py-8">
+          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
+            <div className="text-center">
+              <Check className="mx-auto h-12 w-12 text-green-500 mb-4" />
+              <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
+                Successfully Joined!
+              </h2>
+              <p className="text-gray-600 dark:text-gray-400 mb-6">
+                Welcome to {league?.name}! Redirecting to league dashboard...
+              </p>
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+
+  if (!league) return null;
+
+  return (
+    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
+      <div className="max-w-2xl mx-auto px-4 py-8">
+        <div className="mb-6">
+          <Button
+            variant="outline"
+            onClick={() => router.push('/leagues')}
+            className="mb-4"
+          >
+            <ArrowLeft className="h-4 w-4 mr-2" />
+            Back to Leagues
+          </Button>
+          
+          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
+            Join League
+          </h1>
+          <p className="text-gray-600 dark:text-gray-400">
+            You've been invited to join this league
+          </p>
+        </div>
+
+        <div className="bg-white dark:bg-gray-800 rounded-lg shadow">
+          <div className="p-6">
+            {/* League Header */}
+            <div className="flex items-start justify-between mb-6">
+              <div className="flex-1">
+                <div className="flex items-center space-x-2 mb-2">
+                  <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
+                    {league.name}
+                  </h2>
+                  {league.settings.isPrivate && <Lock className="h-5 w-5 text-gray-500" />}
+                  {!league.settings.isPrivate && <Globe className="h-5 w-5 text-green-500" />}
+                </div>
+                <p className="text-gray-600 dark:text-gray-400 mb-2">
+                  {league.description}
+                </p>
+                <p className="text-sm text-gray-500 dark:text-gray-500">
+                  Created by {league.ownerName} • {new Date(league.createdAt).toLocaleDateString()}
+                </p>
+              </div>
+            </div>
+
+            {/* League Stats */}
+            <div className="grid grid-cols-2 gap-4 mb-6">
+              <div className="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
+                <div className="text-2xl font-bold text-gray-900 dark:text-white">
+                  {league.stats.totalMembers}
+                </div>
+                <div className="text-sm text-gray-500 dark:text-gray-400">
+                  Current Members
+                </div>
+              </div>
+              <div className="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
+                <div className="text-2xl font-bold text-gray-900 dark:text-white">
+                  {league.settings.maxMembers}
+                </div>
+                <div className="text-sm text-gray-500 dark:text-gray-400">
+                  Max Members
+                </div>
+              </div>
+            </div>
+
+            {/* League Settings */}
+            <div className="space-y-3 mb-6">
+              <h3 className="font-medium text-gray-900 dark:text-white">League Settings</h3>
+              <div className="grid grid-cols-1 gap-3">
+                <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded">
+                  <span className="text-sm text-gray-600 dark:text-gray-400">Scoring System:</span>
+                  <span className="font-medium text-gray-900 dark:text-white">
+                    {getScoringSystemLabel(league.settings.scoringSystem)}
+                  </span>
+                </div>
+                <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded">
+                  <span className="text-sm text-gray-600 dark:text-gray-400">League Type:</span>
+                  <span className="font-medium text-gray-900 dark:text-white">
+                    {league.settings.isPrivate ? 'Private (Invite Only)' : 'Public'}
+                  </span>
+                </div>
+                <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded">
+                  <span className="text-sm text-gray-600 dark:text-gray-400">Approval Required:</span>
+                  <span className="font-medium text-gray-900 dark:text-white">
+                    {league.settings.requireApproval ? 'Yes' : 'No'}
+                  </span>
+                </div>
+              </div>
+            </div>
+
+            {/* Error Message */}
+            {error && (
+              <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
+                <div className="flex items-center">
+                  <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
+                  <span className="text-red-700 dark:text-red-400">{error}</span>
+                </div>
+              </div>
+            )}
+
+            {/* Join Action */}
+            <div className="space-y-4">
+              {league.stats.totalMembers >= league.settings.maxMembers ? (
+                <div className="text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
+                  <Users className="mx-auto h-8 w-8 text-yellow-500 mb-2" />
+                  <p className="text-yellow-700 dark:text-yellow-400 font-medium">
+                    League is Full
+                  </p>
+                  <p className="text-yellow-600 dark:text-yellow-500 text-sm">
+                    This league has reached its maximum number of members.
+                  </p>
+                </div>
+              ) : (
+                <Button
+                  onClick={handleJoinLeague}
+                  disabled={joining}
+                  className="w-full"
+                  size="lg"
+                >
+                  {joining ? (
+                    <>
+                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
+                      Joining...
+                    </>
+                  ) : (
+                    <>
+                      <UserPlus className="h-5 w-5 mr-2" />
+                      Join {league.name}
+                    </>
+                  )}
+                </Button>
+              )}
+              
+              <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
+                By joining this league, you agree to participate in the {new Date().getFullYear()} NFL season picks.
+              </p>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+}
diff --git a/packages/frontend/app/leagues/page.tsx b/packages/frontend/app/leagues/page.tsx
index bc9a6d7..8bd5090 100644
--- a/packages/frontend/app/leagues/page.tsx
+++ b/packages/frontend/app/leagues/page.tsx
@@ -58,7 +58,7 @@ interface League {
 }
 
 export default function LeaguesPage() {
-  const { isAuthenticated, isLoading } = useAuth();
+  const { isAuthenticated, isLoading, user } = useAuth();
   const router = useRouter();
   const [activeTab, setActiveTab] = useState<'my-leagues' | 'public' | 'create'>('my-leagues');
   const [myLeagues, setMyLeagues] = useState<League[]>([]);
@@ -66,6 +66,7 @@ export default function LeaguesPage() {
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
   const [copiedCode, setCopiedCode] = useState<string | null>(null);
+  const [copiedLink, setCopiedLink] = useState<string | null>(null);
 
   // Create League Form State
   const [createForm, setCreateForm] = useState({
@@ -97,7 +98,7 @@ export default function LeaguesPage() {
       setError(null);
 
       if (activeTab === 'my-leagues') {
-        const response = await fetch('/api/leagues?action=my-leagues&userId=user-1');
+        const response = await fetch(`/api/leagues?action=my-leagues&userId=${user?.id || 'anonymous'}`);
         const data = await response.json();
         
         if (data.success) {
@@ -106,7 +107,7 @@ export default function LeaguesPage() {
           setError(data.error);
         }
       } else if (activeTab === 'public') {
-        const response = await fetch('/api/leagues?action=public&userId=user-1');
+        const response = await fetch(`/api/leagues?action=public&userId=${user?.id || 'anonymous'}`);
         const data = await response.json();
         
         if (data.success) {
@@ -145,7 +146,10 @@ export default function LeaguesPage() {
             weeklyPayout: createForm.weeklyPayout,
             seasonPayout: createForm.seasonPayout,
           },
-          ownerId: 'user-1',
+          ownerData: {
+            userId: user?.id || 'anonymous',
+            username: user?.username || 'Unknown User',
+          },
         }),
       });
 
@@ -188,8 +192,10 @@ export default function LeaguesPage() {
         body: JSON.stringify({
           leagueId,
           action: 'join',
-          userId: 'user-1',
-          username: 'currentuser',
+          userData: {
+            userId: user?.id || 'anonymous',
+            username: user?.username || 'Unknown User',
+          },
         }),
       });
 
@@ -216,6 +222,13 @@ export default function LeaguesPage() {
     setTimeout(() => setCopiedCode(null), 2000);
   };
 
+  const copyInviteLink = (leagueId: string) => {
+    const inviteLink = `${window.location.origin}/leagues/join/${leagueId}`;
+    navigator.clipboard.writeText(inviteLink);
+    setCopiedLink(leagueId);
+    setTimeout(() => setCopiedLink(null), 2000);
+  };
+
   if (isLoading && !isAuthenticated) {
     return (
       <div className="min-h-screen flex items-center justify-center">
@@ -303,9 +316,11 @@ export default function LeaguesPage() {
                   <LeagueCard
                     key={league.id}
                     league={league}
-                    isOwner={league.ownerId === 'user-1'}
+                    isOwner={league.ownerId === (user?.id || 'anonymous')}
                     onCopyCode={copyInviteCode}
+                    onCopyLink={copyInviteLink}
                     copiedCode={copiedCode}
+                    copiedLink={copiedLink}
                     showJoinButton={false}
                   />
                 ))}
@@ -525,12 +540,14 @@ interface LeagueCardProps {
   league: League;
   isOwner: boolean;
   onCopyCode?: (code: string) => void;
+  onCopyLink?: (leagueId: string) => void;
   onJoin?: () => void;
   copiedCode?: string | null;
+  copiedLink?: string | null;
   showJoinButton: boolean;
 }
 
-function LeagueCard({ league, isOwner, onCopyCode, onJoin, copiedCode, showJoinButton }: LeagueCardProps) {
+function LeagueCard({ league, isOwner, onCopyCode, onCopyLink, onJoin, copiedCode, copiedLink, showJoinButton }: LeagueCardProps) {
   const router = useRouter();
 
   const getScoringSystemLabel = (system: string) => {
@@ -600,11 +617,12 @@ function LeagueCard({ league, isOwner, onCopyCode, onJoin, copiedCode, showJoinB
           </div>
         </div>
 
-        {/* Invite Code */}
+        {/* Invite Code & Link */}
         {!showJoinButton && (
-          <div className="mb-4">
+          <div className="mb-4 space-y-3">
+            {/* Invite Code */}
             <div className="flex items-center space-x-2">
-              <span className="text-sm text-gray-600 dark:text-gray-400">Invite Code:</span>
+              <span className="text-sm text-gray-600 dark:text-gray-400 min-w-fit">Invite Code:</span>
               <code className="flex-1 px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-sm font-mono">
                 {league.inviteCode}
               </code>
@@ -620,6 +638,27 @@ function LeagueCard({ league, isOwner, onCopyCode, onJoin, copiedCode, showJoinB
                 )}
               </button>
             </div>
+            
+            {/* Invite Link */}
+            <div className="flex items-center space-x-2">
+              <span className="text-sm text-gray-600 dark:text-gray-400 min-w-fit">Invite Link:</span>
+              <button
+                onClick={() => onCopyLink?.(league.id)}
+                className="flex-1 px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-sm text-left hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
+                title="Copy invite link"
+              >
+                <span className="text-blue-600 dark:text-blue-400 truncate block">
+                  {typeof window !== 'undefined' ? `${window.location.origin}/leagues/join/${league.id}` : `/leagues/join/${league.id}`}
+                </span>
+              </button>
+              <div className="p-1">
+                {copiedLink === league.id ? (
+                  <Check className="h-4 w-4 text-green-500" />
+                ) : (
+                  <Copy className="h-4 w-4 text-gray-500" />
+                )}
+              </div>
+            </div>
           </div>
         )}
 
-- 
2.50.1

